{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/stereo.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport Helipad from '../lib/helipad/helipad.js';\nimport Left from './left.js';\nimport Right from './right.js';\nimport Upload from './upload.js';\nexport default class Stereo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isPlaying: false,\n      song: null,\n      currentTrackTime: 0,\n      totalTrackTime: null,\n      scrubbingTrack: false,\n      scrubbingPlayer: false // TODO: move to a global store.\n\n    });\n\n    _defineProperty(this, \"timeAnimationInterval\", null);\n\n    _defineProperty(this, \"play\", song => {\n      if (this.state.song && song.id === this.state.song.id) {\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: this.audioRef.currentTime,\n          totalTrackTime: this.audioRef.duration\n        }, () => {\n          this.audioRef.play();\n          this.animateTime();\n        });\n      } else {\n        clearInterval(this.timeAnimationInterval);\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: 0,\n          totalTrackTime: this.audioRef.duration,\n          song\n        }, () => {\n          this.audioRef.play();\n          this.animateTime();\n        });\n      }\n    });\n\n    _defineProperty(this, \"animateTime\", () => {\n      this.timeAnimationInterval = setInterval(() => {\n        this.setState({\n          currentTrackTime: this.audioRef.currentTime,\n          totalTrackTime: this.audioRef.duration\n        });\n      }, 20);\n    });\n\n    _defineProperty(this, \"stopTimeAnimation\", () => {\n      clearInterval(this.timeAnimationInterval);\n    });\n\n    _defineProperty(this, \"pause\", () => {\n      this.setState({\n        isPlaying: false\n      }, () => this.audioRef.pause());\n    });\n\n    _defineProperty(this, \"toggle\", () => {\n      this.state.playing ? this.pause() : this.play();\n    });\n\n    _defineProperty(this, \"beginScrub\", () => {\n      this.stopTimeAnimation();\n      this.setState({\n        scrubbing: true\n      });\n    });\n\n    _defineProperty(this, \"endScub\", () => {\n      this.setState({\n        scrubbing: false\n      });\n    });\n\n    _defineProperty(this, \"skipTo\", (time, cb) => {\n      console.log(time);\n      this.audioRef.currentTime = time;\n      cb();\n    });\n  }\n\n  render() {\n    const {\n      song,\n      isPlaying,\n      currentTrackTime,\n      totalTrackTime\n    } = this.state;\n    const {\n      signedIn,\n      startSession\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-outer-container\",\n      children: /*#__PURE__*/_jsxDEV(Helipad, {\n        className: classnames('page-content', {\n          center: !signedIn\n        }),\n        modal: /*#__PURE__*/_jsxDEV(Upload, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 83\n        }, this),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left fake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Left, {\n          ref: \"left\",\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          nowPlaying: song,\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          startSession: startSession,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this), signedIn && /*#__PURE__*/_jsxDEV(Right, {\n          ref: \"right\",\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          playingId: song && song.id,\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"audio\",\n          src: song && song.audioSrc,\n          ref: input => {\n            this.audioRef = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/stereo.js"],"names":["Component","ReactDOM","classnames","Helipad","Left","Right","Upload","Stereo","isPlaying","song","currentTrackTime","totalTrackTime","scrubbingTrack","scrubbingPlayer","state","id","setState","audioRef","currentTime","duration","play","animateTime","clearInterval","timeAnimationInterval","setInterval","pause","playing","stopTimeAnimation","scrubbing","time","cb","console","log","render","signedIn","startSession","props","center","toggle","skipTo","audioSrc","input"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport classnames from 'classnames'\nimport Helipad from '../lib/helipad/helipad.js'\n\nimport Left from './left.js'\nimport Right from './right.js'\nimport Upload from './upload.js'\n\nexport default class Stereo extends Component {\n\n\tstate = {\n\t\tisPlaying: false,\n\t\tsong: null,\n\t\tcurrentTrackTime: 0,\n\t\ttotalTrackTime: null,\n\t\tscrubbingTrack: false,\n\t\tscrubbingPlayer: false,\n\t\t// TODO: move to a global store.\n\t}\n\n\ttimeAnimationInterval = null\n\n\tplay = (song) => {\n\t\tif (this.state.song && song.id === this.state.song.id) {\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: this.audioRef.currentTime, \n\t\t\t\ttotalTrackTime: this.audioRef.duration \n\t\t\t}, () => {\n\t\t\t\tthis.audioRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t})\n\t\t} else {\n\t\t\tclearInterval(this.timeAnimationInterval)\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: 0, \n\t\t\t\ttotalTrackTime: this.audioRef.duration,\n\t\t\t\tsong\n\t\t\t}, () => {\n\t\t\t\tthis.audioRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t})\n\t\t}\n\n\t}\n\n\tanimateTime = () => {\n\t\tthis.timeAnimationInterval = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tcurrentTrackTime: this.audioRef.currentTime,\n\t\t\t\ttotalTrackTime: this.audioRef.duration\n\t\t\t})\n\t\t}, 20)\n\t}\n\n\tstopTimeAnimation = () => {\n\t\tclearInterval(this.timeAnimationInterval)\n\t}\n\n\tpause = () => {\n\t\tthis.setState({ isPlaying: false }, () => this.audioRef.pause())\n\t}\n\n\ttoggle = () => {\n\t\tthis.state.playing ? this.pause() : this.play() \n\t}\n\n\tbeginScrub = () => {\n\t\tthis.stopTimeAnimation()\n\t\tthis.setState({ scrubbing: true })\n\t}\n\n\tendScub = () => {\n\t\tthis.setState({ scrubbing: false })\n\t}\n\n\tskipTo = (time, cb) => {\n\t\tconsole.log(time)\n\t\tthis.audioRef.currentTime = time\n\t\tcb()\n\t}\n\n\trender() {\n\t\tconst { song, isPlaying, currentTrackTime, totalTrackTime } = this.state\n\t\tconst { signedIn, startSession} = this.props\n\n\t\treturn (\n\t\t\t<div className=\"page-outer-container\">\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<video autoPlay muted loop className=\"background-video\">\n\t\t\t\t\t\t<source type=\"video/mp4\" src=\"test_data/video/corn.mov\" />\n\t\t\t\t\t</video>\n\t\t\t\t*/}\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<div className=\"background-video-shade\" />\n\t\t\t\t*/}\n\t\t\t\t<Helipad className={classnames('page-content', { center: !signedIn })} modal={<Upload />}>\n\t\t\t\t\t<div className=\"left fake\" />\n\t\t    \t\t<Left ref=\"left\" \n\t\t    \t\t\ttoggle={this.toggle} \n\t\t    \t\t\tplay={this.play} \n\t\t    \t\t\tpause={this.pause} \n\t\t    \t\t\tnowPlaying={song}\n\t\t    \t\t\tisPlaying={isPlaying}\n\t\t    \t\t\tsignedIn={signedIn}\n\t\t    \t\t\tstartSession={startSession}\n\t\t    \t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\tskipTo={this.skipTo} />\n\t\t    \t\t{ \n\t\t    \t\t\tsignedIn && \n\t\t    \t\t\t<Right ref=\"right\" \n\t\t    \t\t\t\ttoggle={this.toggle} \n\t\t    \t\t\t\tplay={this.play} \n\t\t    \t\t\t\tpause={this.pause} \n\t\t    \t\t\t\tplayingId={song && song.id} \n\t\t    \t\t\t\tisPlaying={isPlaying}\n\t\t    \t\t\t\tsignedIn={signedIn}\n\t\t    \t\t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\t\tskipTo={this.skipTo} />\n\t\t    \t\t}\n\t\t\t\t\t<audio id=\"audio\" src={song && song.audioSrc} ref={(input) => {this.audioRef = input}} />\n\t\t\t\t</Helipad>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}