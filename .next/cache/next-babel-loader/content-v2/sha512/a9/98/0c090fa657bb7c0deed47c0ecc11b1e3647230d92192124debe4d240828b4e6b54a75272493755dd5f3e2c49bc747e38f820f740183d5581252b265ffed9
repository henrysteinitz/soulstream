{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { useRouter } from 'next/router';\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js';\nimport Main from '../main.js';\n\nfunction Home(props) {\n  const router = useRouter(); // Atlas.setPath(router.pathname)\n  // Atlas.setState({ artist: router.asPath.slice(1) })\n  // console.log(router.pathname)\n\n  return /*#__PURE__*/_jsxDEV(Main, _objectSpread(_objectSpread({}, props), {}, {\n    pathname: router.pathname\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths(context) {\n  const artists = await prisma.artist.findMany({\n    select: {\n      url\n    }\n  });\n  return {\n    paths: artists.map(artist => '/' + atrist.url),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  console.log('yoooooo');\n  let prisma = new PrismaClient();\n  const {\n    artist: artistUrl\n  } = context.params;\n  console.log(\"slugga\");\n  console.log(artistUrl);\n  const artist = await prisma.artist.findUnique({\n    select: {\n      id: true,\n      name: true,\n      pictureUrl: true,\n      tracks: {\n        include: {\n          track: {\n            select: {\n              id: true,\n              title: true,\n              audioUrl: true,\n              artUrl: true,\n              url: true\n            }\n          }\n        }\n      }\n    },\n    where: {\n      url: artistUrl\n    }\n  });\n  console.log(\"arty farty\");\n  const artistNoTracks = {\n    id: artist.is,\n    name: artiast.name\n  };\n  return {\n    props: {\n      artist,\n      stream: artist.tracks.map(x => x.track)\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js"],"names":["React","GetStaticProps","useRouter","PrismaClient","Atlas","Main","Home","props","router","pathname","getStaticPaths","context","artists","prisma","artist","findMany","select","url","paths","map","atrist","fallback","getStaticProps","console","log","artistUrl","params","findUnique","id","name","pictureUrl","tracks","include","track","title","audioUrl","artUrl","where","artistNoTracks","is","artiast","stream","x"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AACnB,QAAMC,MAAM,GAAGN,SAAS,EAAxB,CADmB,CAEnB;AACA;AACA;;AAEA,sBAAO,QAAC,IAAD,kCAAUK,KAAV;AAAiB,IAAA,QAAQ,EAAEC,MAAM,CAACC;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C,QAAMC,OAAO,GAAG,MAAMC,MAAM,CAACC,MAAP,CAAcC,QAAd,CAAuB;AAC5CC,IAAAA,MAAM,EAAE;AACPC,MAAAA;AADO;AADoC,GAAvB,CAAtB;AAMA,SAAO;AACNC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYL,MAAM,IAAK,MAAMM,MAAM,CAACH,GAApC,CADD;AAENI,IAAAA,QAAQ,EAAE;AAFJ,GAAP;AAIA;AAED,OAAO,eAAeC,cAAf,CAA8BX,OAA9B,EAAsC;AAC5CY,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,MAAIX,MAAM,GAAG,IAAIV,YAAJ,EAAb;AACA,QAAM;AAAEW,IAAAA,MAAM,EAAEW;AAAV,MAAwBd,OAAO,CAACe,MAAtC;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AAEA,QAAMX,MAAM,GAAG,MAAMD,MAAM,CAACC,MAAP,CAAca,UAAd,CAAyB;AAC7CX,IAAAA,MAAM,EAAE;AACPY,MAAAA,EAAE,EAAE,IADG;AAEPC,MAAAA,IAAI,EAAE,IAFC;AAGPC,MAAAA,UAAU,EAAE,IAHL;AAIPC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AACRC,UAAAA,KAAK,EAAE;AACNjB,YAAAA,MAAM,EAAE;AACPY,cAAAA,EAAE,EAAE,IADG;AAEPM,cAAAA,KAAK,EAAE,IAFA;AAGPC,cAAAA,QAAQ,EAAE,IAHH;AAIPC,cAAAA,MAAM,EAAE,IAJD;AAKPnB,cAAAA,GAAG,EAAE;AALE;AADF;AADC;AADL;AAJD,KADqC;AAmB7CoB,IAAAA,KAAK,EAAE;AACNpB,MAAAA,GAAG,EAAEQ;AADC;AAnBsC,GAAzB,CAArB;AAuBAF,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAMc,cAAc,GAAG;AAACV,IAAAA,EAAE,EAAEd,MAAM,CAACyB,EAAZ;AAAgBV,IAAAA,IAAI,EAAEW,OAAO,CAACX;AAA9B,GAAvB;AACA,SAAO;AAAEtB,IAAAA,KAAK,EAAE;AAAEO,MAAAA,MAAF;AAAU2B,MAAAA,MAAM,EAAE3B,MAAM,CAACiB,MAAP,CAAcZ,GAAd,CAAkBuB,CAAC,IAAKA,CAAC,CAACT,KAA1B;AAAlB;AAAT,GAAP;AACA;AAED,eAAe3B,IAAf","sourcesContent":["import React from \"react\"\nimport { GetStaticProps } from \"next\"\nimport { useRouter } from 'next/router'\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js'\nimport Main from '../main.js'\n\n\nfunction Home(props){\n\tconst router = useRouter()\n\t// Atlas.setPath(router.pathname)\n\t// Atlas.setState({ artist: router.asPath.slice(1) })\n\t// console.log(router.pathname)\n\n\treturn <Main {...props} pathname={router.pathname}/>\n}\n\nexport async function getStaticPaths(context) {\n\tconst artists = await prisma.artist.findMany({\n\t\tselect: {\n\t\t\turl\n\t\t}\n\t})\n\n\treturn {\n\t\tpaths: artists.map(artist => ('/' + atrist.url)),\n\t\tfallback: false\n\t}\n}\n\nexport async function getStaticProps(context){\n\tconsole.log('yoooooo')\n\tlet prisma = new PrismaClient();\n\tconst { artist: artistUrl } = context.params\n\tconsole.log(\"slugga\")\n\tconsole.log(artistUrl)\n\n\tconst artist = await prisma.artist.findUnique({\n\t\tselect: {\n\t\t\tid: true,\n\t\t\tname: true,\n\t\t\tpictureUrl: true,\n\t\t\ttracks: {\n\t    \t\tinclude: {\n\t    \t\t\ttrack: {\n\t    \t\t\t\tselect: {\n\t    \t\t\t\t\tid: true,\n\t    \t\t\t\t\ttitle: true,\n\t    \t\t\t\t\taudioUrl: true,\n\t    \t\t\t\t\tartUrl: true,\n\t    \t\t\t\t\turl: true,\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \t}\n\t\t},\n\t\twhere: {\n\t\t\turl: artistUrl\n\t\t}\n\t})\n\tconsole.log(\"arty farty\")\n\tconst artistNoTracks = {id: artist.is, name: artiast.name}\n\treturn { props: { artist, stream: artist.tracks.map(x => (x.track)) }}\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}