{"ast":null,"code":"import _classCallCheck from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Voice = /*#__PURE__*/function () {\n  function Voice() {\n    _classCallCheck(this, Voice);\n\n    this.synth = window.speechSynthesis;\n    this.context = new (window.AudioContext || window.webkitAudioContext)();\n    this.streamDestination = this.context.createMediaStreamDestination();\n    this.source1 = this.context.createBufferSource();\n    this.source2 = this.context.createBufferSource();\n    this.source3 = this.context.createBufferSource();\n    this.source4 = this.context.createBufferSource();\n    this.bufferSource = this.context.createBufferSource();\n  }\n\n  _createClass(Voice, [{\n    key: \"say\",\n    value: function say(script) {\n      var _this = this;\n\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        console.log('getUserMedia supported.');\n        navigator.mediaDevices.getUserMedia({\n          audio: true\n        }).then(function (stream) {\n          var mediaRecorder = new MediaRecorder(stream);\n          var utterance = new SpeechSynthesisUtterance(script);\n          mediaRecorder.start();\n\n          utterance.onend = function () {\n            mediaRecorder.stop();\n\n            mediaRecorder.ondataavailable = function (e) {\n              e.data.arrayBuffer().then(function (buffer) {\n                console.log(buffer);\n\n                _this.context.decodeAudioData(buffer, function (audioBuffer) {\n                  var combinedBuffer = audioBuffer.getChannelData(0) + audioBuffer.getChannelData(0).slice(10000);\n                  console.log(combinedBuffer); // this.bufferSource\n\n                  _this.source1.buffer = audioBuffer;\n                  _this.source2.buffer = audioBuffer;\n                  _this.source3.buffer = audioBuffer;\n                  _this.source4.buffer = audioBuffer;\n\n                  _this.source1.start();\n\n                  _this.source2.start();\n\n                  _this.source3.start();\n\n                  _this.source4.start();\n                });\n              });\n            };\n          };\n\n          _this.synth.speak(utterance);\n        });\n      }\n    }\n  }, {\n    key: \"loop\",\n    value: function loop() {\n      if (!window) {\n        return;\n      }\n\n      return;\n    }\n  }, {\n    key: \"save\",\n    value: function save() {\n      if (!window) {\n        return;\n      }\n\n      return;\n    }\n  }]);\n\n  return Voice;\n}();\n\nexport { Voice as default };","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/lib/voice/voice.js"],"names":["Voice","synth","window","speechSynthesis","context","AudioContext","webkitAudioContext","streamDestination","createMediaStreamDestination","source1","createBufferSource","source2","source3","source4","bufferSource","script","navigator","mediaDevices","getUserMedia","console","log","audio","then","stream","mediaRecorder","MediaRecorder","utterance","SpeechSynthesisUtterance","start","onend","stop","ondataavailable","e","data","arrayBuffer","buffer","decodeAudioData","audioBuffer","combinedBuffer","getChannelData","slice","speak"],"mappings":";;;IAAqBA,K;AAEpB,mBAAc;AAAA;;AACb,SAAKC,KAAL,GAAaC,MAAM,CAACC,eAApB;AACA,SAAKC,OAAL,GAAe,KAAKF,MAAM,CAACG,YAAP,IAAuBH,MAAM,CAACI,kBAAnC,GAAf;AACA,SAAKC,iBAAL,GAAyB,KAAKH,OAAL,CAAaI,4BAAb,EAAzB;AACA,SAAKC,OAAL,GAAe,KAAKL,OAAL,CAAaM,kBAAb,EAAf;AACA,SAAKC,OAAL,GAAe,KAAKP,OAAL,CAAaM,kBAAb,EAAf;AACA,SAAKE,OAAL,GAAe,KAAKR,OAAL,CAAaM,kBAAb,EAAf;AACA,SAAKG,OAAL,GAAe,KAAKT,OAAL,CAAaM,kBAAb,EAAf;AACA,SAAKI,YAAL,GAAoB,KAAKV,OAAL,CAAaM,kBAAb,EAApB;AACA;;;;wBAEGK,M,EAAQ;AAAA;;AACX,UAAIC,SAAS,CAACC,YAAV,IAA0BD,SAAS,CAACC,YAAV,CAAuBC,YAArD,EAAmE;AAC/DC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAJ,QAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAqC;AAAEG,UAAAA,KAAK,EAAE;AAAT,SAArC,EACGC,IADH,CACQ,UAACC,MAAD,EAAY;AACjB,cAAMC,aAAa,GAAG,IAAIC,aAAJ,CAAkBF,MAAlB,CAAtB;AACA,cAAMG,SAAS,GAAG,IAAIC,wBAAJ,CAA6BZ,MAA7B,CAAlB;AACAS,UAAAA,aAAa,CAACI,KAAd;;AACAF,UAAAA,SAAS,CAACG,KAAV,GAAkB,YAAM;AACvBL,YAAAA,aAAa,CAACM,IAAd;;AACAN,YAAAA,aAAa,CAACO,eAAd,GAAgC,UAACC,CAAD,EAAO;AACvCA,cAAAA,CAAC,CAACC,IAAF,CAAOC,WAAP,GAAqBZ,IAArB,CAA0B,UAACa,MAAD,EAAY;AACrChB,gBAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ;;AACA,gBAAA,KAAI,CAAC/B,OAAL,CAAagC,eAAb,CAA6BD,MAA7B,EAAqC,UAACE,WAAD,EAAiB;AACrD,sBAAMC,cAAc,GAAGD,WAAW,CAACE,cAAZ,CAA2B,CAA3B,IAAgCF,WAAW,CAACE,cAAZ,CAA2B,CAA3B,EAA8BC,KAA9B,CAAoC,KAApC,CAAvD;AACArB,kBAAAA,OAAO,CAACC,GAAR,CAAYkB,cAAZ,EAFqD,CAGrD;;AAEH,kBAAA,KAAI,CAAC7B,OAAL,CAAa0B,MAAb,GAAsBE,WAAtB;AACG,kBAAA,KAAI,CAAC1B,OAAL,CAAawB,MAAb,GAAsBE,WAAtB;AACA,kBAAA,KAAI,CAACzB,OAAL,CAAauB,MAAb,GAAsBE,WAAtB;AACA,kBAAA,KAAI,CAACxB,OAAL,CAAasB,MAAb,GAAsBE,WAAtB;;AACA,kBAAA,KAAI,CAAC5B,OAAL,CAAamB,KAAb;;AACA,kBAAA,KAAI,CAACjB,OAAL,CAAaiB,KAAb;;AACA,kBAAA,KAAI,CAAChB,OAAL,CAAagB,KAAb;;AACA,kBAAA,KAAI,CAACf,OAAL,CAAae,KAAb;AACA,iBAbD;AAcA,eAhBD;AAiBA,aAlBA;AAmBA,WArBD;;AAsBA,UAAA,KAAI,CAAC3B,KAAL,CAAWwC,KAAX,CAAiBf,SAAjB;AACA,SA5BH;AA6BE;AAGN;;;2BAEM;AACN,UAAI,CAACxB,MAAL,EAAa;AACZ;AACA;;AACD;AACA;;;2BAEM;AACN,UAAI,CAACA,MAAL,EAAa;AACZ;AACA;;AACD;AACA;;;;;;SA9DmBF,K","sourcesContent":["export default class Voice {\n\n\tconstructor() {\n\t\tthis.synth = window.speechSynthesis\n\t\tthis.context = new (window.AudioContext || window.webkitAudioContext)()\n\t\tthis.streamDestination = this.context.createMediaStreamDestination()\n\t\tthis.source1 = this.context.createBufferSource()\n\t\tthis.source2 = this.context.createBufferSource()\n\t\tthis.source3 = this.context.createBufferSource()\n\t\tthis.source4 = this.context.createBufferSource()\n\t\tthis.bufferSource = this.context.createBufferSource()\n\t}\n\n\tsay(script) {\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n   \t\t\tconsole.log('getUserMedia supported.');\n   \t\t\tnavigator.mediaDevices.getUserMedia ({ audio: true })\n      \t\t.then((stream) => {\n      \t\t\tconst mediaRecorder = new MediaRecorder(stream);\n      \t\t\tconst utterance = new SpeechSynthesisUtterance(script);\n      \t\t\tmediaRecorder.start()\n      \t\t\tutterance.onend = () => {\n      \t\t\t\tmediaRecorder.stop()\n      \t\t\t\tmediaRecorder.ondataavailable = (e) => {\n      \t\t\t\te.data.arrayBuffer().then((buffer) => {\n      \t\t\t\t\tconsole.log(buffer)\n      \t\t\t\t\tthis.context.decodeAudioData(buffer, (audioBuffer) => {\n      \t\t\t\t\t\tconst combinedBuffer = audioBuffer.getChannelData(0) + audioBuffer.getChannelData(0).slice(10000)\n      \t\t\t\t\t\tconsole.log(combinedBuffer)\n      \t\t\t\t\t\t// this.bufferSource\n\n\t  \t\t\t\t\t\tthis.source1.buffer = audioBuffer\n\t      \t\t\t\t\tthis.source2.buffer = audioBuffer\n\t      \t\t\t\t\tthis.source3.buffer = audioBuffer\n\t      \t\t\t\t\tthis.source4.buffer = audioBuffer\n\t      \t\t\t\t\tthis.source1.start()\n\t      \t\t\t\t\tthis.source2.start()\n\t      \t\t\t\t\tthis.source3.start()\n\t      \t\t\t\t\tthis.source4.start()\n      \t\t\t\t\t})\n      \t\t\t\t})\n      \t\t\t}\n      \t\t\t}\n      \t\t\tthis.synth.speak(utterance)\n      \t\t})\n      \t}\n\t\t\n\n\t}\n\n\tloop() {\n\t\tif (!window) {\n\t\t\treturn\n\t\t}\n\t\treturn\n\t}\n\n\tsave() {\n\t\tif (!window) {\n\t\t\treturn\n\t\t}\n\t\treturn\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}