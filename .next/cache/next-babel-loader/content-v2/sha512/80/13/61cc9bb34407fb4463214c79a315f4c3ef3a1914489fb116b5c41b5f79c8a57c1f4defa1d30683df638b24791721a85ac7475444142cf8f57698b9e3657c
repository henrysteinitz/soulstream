{"ast":null,"code":"export default class Voice {\n  constructor() {\n    this.synth = window.speechSynthesis;\n    this.context = new AudioContext();\n    this.source1 = this.context.createBufferSource();\n    this.source2 = this.context.createBufferSource();\n    this.source3 = this.context.createBufferSource();\n    this.source4 = this.context.createBufferSource();\n  }\n\n  say(script) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      console.log('getUserMedia supported.');\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        const mediaRecorder = new MediaRecorder(stream);\n        const utterance = new SpeechSynthesisUtterance(script);\n\n        mediaRecorder.ondataavailable = e => {\n          e.data.arrayBuffer().then(buffer => {\n            this.source1.buffer = buffer;\n            this.source2.buffer = buffer;\n            this.source3.buffer = buffer;\n            this.source4.buffer = buffer;\n            this.source1.connect(this.connect.destination);\n            this.source2.connect(this.connect.destination);\n            this.source3.connect(this.connect.destination);\n            this.source4.connect(this.connect.destination);\n            this.source1.start();\n            this.source2.start();\n            this.source3.start();\n            this.source4.start();\n          });\n        };\n\n        mediaRecorder.start();\n\n        utterance.onend = () => {\n          mediaRecorder.stop();\n        };\n\n        this.synth.speak(utterance);\n      });\n    }\n  }\n\n  loop() {\n    if (!window) {\n      return;\n    }\n\n    return;\n  }\n\n  save() {\n    if (!window) {\n      return;\n    }\n\n    return;\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/lib/voice/voice.js"],"names":["Voice","constructor","synth","window","speechSynthesis","context","AudioContext","source1","createBufferSource","source2","source3","source4","say","script","navigator","mediaDevices","getUserMedia","console","log","audio","then","stream","mediaRecorder","MediaRecorder","utterance","SpeechSynthesisUtterance","ondataavailable","e","data","arrayBuffer","buffer","connect","destination","start","onend","stop","speak","loop","save"],"mappings":"AAAA,eAAe,MAAMA,KAAN,CAAY;AAE1BC,EAAAA,WAAW,GAAG;AACb,SAAKC,KAAL,GAAaC,MAAM,CAACC,eAApB;AACA,SAAKC,OAAL,GAAe,IAAIC,YAAJ,EAAf;AACA,SAAKC,OAAL,GAAe,KAAKF,OAAL,CAAaG,kBAAb,EAAf;AACA,SAAKC,OAAL,GAAe,KAAKJ,OAAL,CAAaG,kBAAb,EAAf;AACA,SAAKE,OAAL,GAAe,KAAKL,OAAL,CAAaG,kBAAb,EAAf;AACA,SAAKG,OAAL,GAAe,KAAKN,OAAL,CAAaG,kBAAb,EAAf;AACA;;AAEDI,EAAAA,GAAG,CAACC,MAAD,EAAS;AACX,QAAIC,SAAS,CAACC,YAAV,IAA0BD,SAAS,CAACC,YAAV,CAAuBC,YAArD,EAAmE;AAC/DC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAJ,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAqC;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAArC,EACGC,IADH,CACSC,MAAD,IAAY;AACjB,cAAMC,aAAa,GAAG,IAAIC,aAAJ,CAAkBF,MAAlB,CAAtB;AACA,cAAMG,SAAS,GAAG,IAAIC,wBAAJ,CAA6BZ,MAA7B,CAAlB;;AACAS,QAAAA,aAAa,CAACI,eAAd,GAAiCC,CAAD,IAAO;AACtCA,UAAAA,CAAC,CAACC,IAAF,CAAOC,WAAP,GAAqBT,IAArB,CAA2BU,MAAD,IAAY;AACrC,iBAAKvB,OAAL,CAAauB,MAAb,GAAsBA,MAAtB;AACA,iBAAKrB,OAAL,CAAaqB,MAAb,GAAsBA,MAAtB;AACA,iBAAKpB,OAAL,CAAaoB,MAAb,GAAsBA,MAAtB;AACA,iBAAKnB,OAAL,CAAamB,MAAb,GAAsBA,MAAtB;AACA,iBAAKvB,OAAL,CAAawB,OAAb,CAAqB,KAAKA,OAAL,CAAaC,WAAlC;AACA,iBAAKvB,OAAL,CAAasB,OAAb,CAAqB,KAAKA,OAAL,CAAaC,WAAlC;AACA,iBAAKtB,OAAL,CAAaqB,OAAb,CAAqB,KAAKA,OAAL,CAAaC,WAAlC;AACA,iBAAKrB,OAAL,CAAaoB,OAAb,CAAqB,KAAKA,OAAL,CAAaC,WAAlC;AACA,iBAAKzB,OAAL,CAAa0B,KAAb;AACA,iBAAKxB,OAAL,CAAawB,KAAb;AACA,iBAAKvB,OAAL,CAAauB,KAAb;AACA,iBAAKtB,OAAL,CAAasB,KAAb;AACA,WAbD;AAcA,SAfD;;AAgBAX,QAAAA,aAAa,CAACW,KAAd;;AACAT,QAAAA,SAAS,CAACU,KAAV,GAAkB,MAAM;AACvBZ,UAAAA,aAAa,CAACa,IAAd;AACA,SAFD;;AAGA,aAAKjC,KAAL,CAAWkC,KAAX,CAAiBZ,SAAjB;AACA,OAzBH;AA0BE;AAGN;;AAEDa,EAAAA,IAAI,GAAG;AACN,QAAI,CAAClC,MAAL,EAAa;AACZ;AACA;;AACD;AACA;;AAEDmC,EAAAA,IAAI,GAAG;AACN,QAAI,CAACnC,MAAL,EAAa;AACZ;AACA;;AACD;AACA;;AAzDyB","sourcesContent":["export default class Voice {\n\n\tconstructor() {\n\t\tthis.synth = window.speechSynthesis\n\t\tthis.context = new AudioContext()\n\t\tthis.source1 = this.context.createBufferSource()\n\t\tthis.source2 = this.context.createBufferSource()\n\t\tthis.source3 = this.context.createBufferSource()\n\t\tthis.source4 = this.context.createBufferSource()\n\t}\n\n\tsay(script) {\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n   \t\t\tconsole.log('getUserMedia supported.');\n   \t\t\tnavigator.mediaDevices.getUserMedia ({ audio: true })\n      \t\t.then((stream) => {\n      \t\t\tconst mediaRecorder = new MediaRecorder(stream);\n      \t\t\tconst utterance = new SpeechSynthesisUtterance(script);\n      \t\t\tmediaRecorder.ondataavailable = (e) => {\n      \t\t\t\te.data.arrayBuffer().then((buffer) => {\n      \t\t\t\t\tthis.source1.buffer = buffer\n      \t\t\t\t\tthis.source2.buffer = buffer\n      \t\t\t\t\tthis.source3.buffer = buffer\n      \t\t\t\t\tthis.source4.buffer = buffer\n      \t\t\t\t\tthis.source1.connect(this.connect.destination)\n      \t\t\t\t\tthis.source2.connect(this.connect.destination)\n      \t\t\t\t\tthis.source3.connect(this.connect.destination)\n      \t\t\t\t\tthis.source4.connect(this.connect.destination)\n      \t\t\t\t\tthis.source1.start()\n      \t\t\t\t\tthis.source2.start()\n      \t\t\t\t\tthis.source3.start()\n      \t\t\t\t\tthis.source4.start()\n      \t\t\t\t})\n      \t\t\t}\n      \t\t\tmediaRecorder.start()\n      \t\t\tutterance.onend = () => {\n      \t\t\t\tmediaRecorder.stop()\n      \t\t\t}\n      \t\t\tthis.synth.speak(utterance)\n      \t\t})\n      \t}\n\t\t\n\n\t}\n\n\tloop() {\n\t\tif (!window) {\n\t\t\treturn\n\t\t}\n\t\treturn\n\t}\n\n\tsave() {\n\t\tif (!window) {\n\t\t\treturn\n\t\t}\n\t\treturn\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}