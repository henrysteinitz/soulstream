{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/crowd.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport classnames from 'classnames'; // Ephemeral comments and social interactions\n\nexport default class Crowd extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // map comments ids to hidden = {true, false}\n      // TODO: nest...?\n      comment: '',\n      postedComments: []\n    });\n\n    _defineProperty(this, \"computeRemainingTime\", comment => {\n      // TODO: figure it out, kiiid\n      return comment.remainingTime * (1000 * 60);\n    });\n\n    _defineProperty(this, \"handleComment\", e => {\n      this.setState({\n        comment: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handlePostComment\", e => {\n      const {\n        account,\n        song\n      } = this.props;\n      const {\n        comment\n      } = this.state;\n      console.log(account);\n      console.log(account.accountId);\n      console.log(song.id);\n      fetch('/api/crowd/comment', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionToken: account.sessionToken,\n          message: comment,\n          trackId: song.id,\n          authorId: account.accountId,\n          duration: 5\n        })\n      }).then(res => {\n        console.log(res);\n        res.json().then(body => this.setState({\n          postedComments: [body].concat(this.state.postedComments)\n        }));\n      });\n    });\n\n    _defineProperty(this, \"handleEnter\", fn => e => {\n      if (e.key === 'Enter') {\n        fn(e);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.comments.forEach(comment => {\n      setTimeout(() => this.setState({\n        [comment.id]: true\n      }), this.computeRemainingTime(comment));\n    });\n  }\n\n  render() {\n    const {\n      comments,\n      show\n    } = this.props;\n    const {\n      comment\n    } = this.state;\n    const combinedComments = this.state.postedComments.concat(comments);\n    console.log(combinedComments.filter(x => !this.state[x.id]).length);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames('crowd', {\n        show\n      }),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crowd-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crowd-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crowd-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-speak\",\n            children: show && /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"crowd-input\",\n              placeholder: \"Talk\",\n              value: comment,\n              onChange: this.handleComment,\n              onKeyPress: this.handleEnter(this.handlePostComment),\n              autoFocus: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-chat\",\n            children: combinedComments.filter(x => !this.state[x.accountId]).map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: comment.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: comment.author\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/crowd.js"],"names":["Component","classnames","Crowd","comment","postedComments","remainingTime","e","setState","target","value","account","song","props","state","console","log","accountId","id","fetch","method","headers","body","JSON","stringify","sessionToken","message","trackId","authorId","duration","then","res","json","concat","fn","key","componentDidMount","comments","forEach","setTimeout","computeRemainingTime","render","show","combinedComments","filter","x","length","handleComment","handleEnter","handlePostComment","map","author"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport classnames from 'classnames'\n\n\n// Ephemeral comments and social interactions\nexport default class Crowd extends Component {\n\t\n\tstate = {\n\t\t// map comments ids to hidden = {true, false}\n\t\t// TODO: nest...?\n\t\tcomment: '',\n\t\tpostedComments: []\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.comments.forEach(comment => {\n\t\t\tsetTimeout(() => this.setState({[comment.id]: true}), this.computeRemainingTime(comment))\n\t\t})\n\t}\n\n\tcomputeRemainingTime = (comment) => {\n\t\t// TODO: figure it out, kiiid\n\t\treturn comment.remainingTime * (1000 * 60)\n\t}\n\n\thandleComment = (e) => {\n\t\tthis.setState({ comment: e.target.value },)\n\t}\n\n\thandlePostComment = (e) => {\n\t\tconst { account, song } = this.props\n\t\tconst { comment } = this.state\n\n\t\tconsole.log(account)\n\t\tconsole.log(account.accountId)\n\t\tconsole.log(song.id)\n\t\tfetch('/api/crowd/comment', \n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsessionToken: account.sessionToken,\n\t\t\t\tmessage: comment,\n\t\t\t\ttrackId: song.id,\n\t\t\t\tauthorId: account.accountId,\n\t\t\t\tduration: 5,\n\t\t\t})\n\t\t}).then((res) => {\n\t\t\tconsole.log(res)\n\t\t\tres.json().then(body => this.setState({ postedComments: [body].concat(this.state.postedComments)}))\n\t\t})\n\t}\n\n\thandleEnter = (fn) => (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tfn(e)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { comments, show } = this.props\n\t\tconst { comment } = this.state\n\t\tconst combinedComments = this.state.postedComments.concat(comments)\n\t\tconsole.log(combinedComments.filter(x => !this.state[x.id]).length)\n\t\treturn (\n\t\t\t<div className={classnames('crowd', { show })}>\n\t\t\t\t<div className=\"crowd-inner\">\n\t\t\t\t\t<div className=\"crowd-left\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"crowd-right\">\n\t\t\t\t\t\t<div className=\"crowd-speak\">\n\t\t\t\t\t\t\t{show &&\n\t\t\t\t\t\t\t<input className=\"crowd-input\" \n\t\t\t\t\t\t\t\tplaceholder=\"Talk\" \n\t\t\t\t\t\t\t\tvalue={comment} \n\t\t\t\t\t\t\t\tonChange={this.handleComment}\n\t\t\t\t\t\t\t\tonKeyPress={this.handleEnter(this.handlePostComment)}\n\t\t\t\t\t\t\t\tautoFocus />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"crowd-chat\">\n\t\t\t\t\t\t\t{combinedComments.filter(x => !this.state[x.accountId]).map(comment => (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{comment.message}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{comment.author}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\t\n\t\t)\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}