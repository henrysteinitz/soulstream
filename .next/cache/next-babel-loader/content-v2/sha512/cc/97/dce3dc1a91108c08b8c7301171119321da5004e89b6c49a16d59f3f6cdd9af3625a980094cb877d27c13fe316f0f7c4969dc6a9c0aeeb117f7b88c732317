{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { useRouter } from 'next/router';\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js';\nimport Main from '../main.js';\n\nfunction Home(props) {\n  const router = useRouter();\n  Atlas.setPath(router.pathname);\n  Atlas.setState({\n    artist: router.asPath.slice(1)\n  });\n  return /*#__PURE__*/_jsxDEV(Main, _objectSpread(_objectSpread({}, props), {}, {\n    pathname: router.pathname\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths(context) {\n  return {\n    paths: [],\n    fallback: true\n  };\n}\nexport async function getStaticProps(context) {\n  let prisma = new PrismaClient();\n  const {\n    artist: artistUrl\n  } = context.params;\n  console.log(\"slugga\");\n  console.log(artistUrl);\n  const artist = await prisma.artist.findUnique({\n    select: {\n      id: true,\n      name: true,\n      pictureUrl: true,\n      tracks: {\n        include: {\n          track: {\n            select: {\n              id: true,\n              title: true,\n              audioUrl: true,\n              artUrl: true,\n              url: true\n            }\n          }\n        }\n      }\n    },\n    where: {\n      url: artistUrl\n    }\n  });\n  Console.log(\"arty farty\");\n  console.log(artist);\n  return {\n    props: {\n      artist,\n      stream: artist.tracks.map(x => x.track)\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js"],"names":["React","GetStaticProps","useRouter","PrismaClient","Atlas","Main","Home","props","router","setPath","pathname","setState","artist","asPath","slice","getStaticPaths","context","paths","fallback","getStaticProps","prisma","artistUrl","params","console","log","findUnique","select","id","name","pictureUrl","tracks","include","track","title","audioUrl","artUrl","url","where","Console","stream","map","x"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AACnB,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACAE,EAAAA,KAAK,CAACK,OAAN,CAAcD,MAAM,CAACE,QAArB;AACAN,EAAAA,KAAK,CAACO,QAAN,CAAe;AAAEC,IAAAA,MAAM,EAAEJ,MAAM,CAACK,MAAP,CAAcC,KAAd,CAAoB,CAApB;AAAV,GAAf;AAEA,sBAAO,QAAC,IAAD,kCAAUP,KAAV;AAAiB,IAAA,QAAQ,EAAEC,MAAM,CAACE;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;AAED,OAAO,eAAeK,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C,SAAO;AACNC,IAAAA,KAAK,EAAE,EADD;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GAAP;AAIA;AAED,OAAO,eAAeC,cAAf,CAA8BH,OAA9B,EAAsC;AAC5C,MAAII,MAAM,GAAG,IAAIjB,YAAJ,EAAb;AACA,QAAM;AAAES,IAAAA,MAAM,EAAES;AAAV,MAAwBL,OAAO,CAACM,MAAtC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AAEA,QAAMT,MAAM,GAAG,MAAMQ,MAAM,CAACR,MAAP,CAAca,UAAd,CAAyB;AAC7CC,IAAAA,MAAM,EAAE;AACPC,MAAAA,EAAE,EAAE,IADG;AAEPC,MAAAA,IAAI,EAAE,IAFC;AAGPC,MAAAA,UAAU,EAAE,IAHL;AAIPC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AACRC,UAAAA,KAAK,EAAE;AACNN,YAAAA,MAAM,EAAE;AACPC,cAAAA,EAAE,EAAE,IADG;AAEPM,cAAAA,KAAK,EAAE,IAFA;AAGPC,cAAAA,QAAQ,EAAE,IAHH;AAIPC,cAAAA,MAAM,EAAE,IAJD;AAKPC,cAAAA,GAAG,EAAE;AALE;AADF;AADC;AADL;AAJD,KADqC;AAmB7CC,IAAAA,KAAK,EAAE;AACND,MAAAA,GAAG,EAAEf;AADC;AAnBsC,GAAzB,CAArB;AAuBAiB,EAAAA,OAAO,CAACd,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ;AACA,SAAO;AAAEL,IAAAA,KAAK,EAAE;AAAEK,MAAAA,MAAF;AAAU2B,MAAAA,MAAM,EAAE3B,MAAM,CAACkB,MAAP,CAAcU,GAAd,CAAkBC,CAAC,IAAIA,CAAC,CAACT,KAAzB;AAAlB;AAAT,GAAP;AACA;AAED,eAAe1B,IAAf","sourcesContent":["import React from \"react\"\nimport { GetStaticProps } from \"next\"\nimport { useRouter } from 'next/router'\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js'\nimport Main from '../main.js'\n\n\nfunction Home(props){\n\tconst router = useRouter()\n\tAtlas.setPath(router.pathname)\n\tAtlas.setState({ artist: router.asPath.slice(1) })\n\n\treturn <Main {...props} pathname={router.pathname}/>\n}\n\nexport async function getStaticPaths(context) {\n\treturn {\n\t\tpaths: [],\n\t\tfallback: true\n\t}\n}\n\nexport async function getStaticProps(context){\n\tlet prisma = new PrismaClient();\n\tconst { artist: artistUrl } = context.params\n\tconsole.log(\"slugga\")\n\tconsole.log(artistUrl)\n\n\tconst artist = await prisma.artist.findUnique({\n\t\tselect: {\n\t\t\tid: true,\n\t\t\tname: true,\n\t\t\tpictureUrl: true,\n\t\t\ttracks: {\n\t    \t\tinclude: {\n\t    \t\t\ttrack: {\n\t    \t\t\t\tselect: {\n\t    \t\t\t\t\tid: true,\n\t    \t\t\t\t\ttitle: true,\n\t    \t\t\t\t\taudioUrl: true,\n\t    \t\t\t\t\tartUrl: true,\n\t    \t\t\t\t\turl: true,\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \t}\n\t\t},\n\t\twhere: {\n\t\t\turl: artistUrl\n\t\t}\n\t})\n\tConsole.log(\"arty farty\")\n\tconsole.log(artist)\n\treturn { props: { artist, stream: artist.tracks.map(x => x.track) }}\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}