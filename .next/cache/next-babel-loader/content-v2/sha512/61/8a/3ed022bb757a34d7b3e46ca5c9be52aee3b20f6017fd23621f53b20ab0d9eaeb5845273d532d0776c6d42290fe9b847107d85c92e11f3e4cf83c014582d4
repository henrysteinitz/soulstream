{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/lib/atlas/atlas.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext } from 'react';\n\nclass AtlasClass {\n  constructor(preHistory = []) {\n    _defineProperty(this, \"push\", path => {\n      if (path[0] !== '/') {\n        path = '/' + path;\n      }\n\n      this.history.push(path);\n      window.href = path;\n      this.now += 1;\n    });\n\n    _defineProperty(this, \"back\", () => this.now -= 1);\n\n    _defineProperty(this, \"forward\", () => this.now += 1);\n\n    _defineProperty(this, \"path\", () => this.history[now]);\n\n    this.history = preHistory;\n    this.now = preHistory.length - 1;\n  }\n\n}\n\nconst Atlas = new AtlasClass();\nexport const AtlasContext = /*#__PURE__*/React.createContext(Atlas);\nexport const AtlasProvider = AtlasContext.Provider;\nexport const AtlasConsumer = AtlasContext.Consumer;\nexport const Route = ({\n  path,\n  children\n}) => {\n  const atlas = useContext(AtlasContext); // TODO: Support inexact routes\t\n\n  if (atlas.path() !== path) {\n    return null;\n  }\n\n  return children;\n};\n\nconst handleClick = (atlas, path) => {\n  atlas.push(path);\n};\n\nexport const Link = ({\n  to,\n  children\n}) => {\n  const atlas = useContext(AtlasContext);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => handleClick(atlas, to),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n};\nexport default Atlas;","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/lib/atlas/atlas.js"],"names":["React","useContext","AtlasClass","constructor","preHistory","path","history","push","window","href","now","length","Atlas","AtlasContext","createContext","AtlasProvider","Provider","AtlasConsumer","Consumer","Route","children","atlas","handleClick","Link","to"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,MAAMC,UAAN,CAAiB;AAChBC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EAAkB;AAAA,kCAKrBC,IAAD,IAAU;AAChB,UAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACpBA,QAAAA,IAAI,GAAG,MAAMA,IAAb;AACA;;AACD,WAAKC,OAAL,CAAaC,IAAb,CAAkBF,IAAlB;AACAG,MAAAA,MAAM,CAACC,IAAP,GAAcJ,IAAd;AACA,WAAKK,GAAL,IAAY,CAAZ;AACA,KAZ4B;;AAAA,kCActB,MAAM,KAAKA,GAAL,IAAY,CAdI;;AAAA,qCAgBnB,MAAM,KAAKA,GAAL,IAAY,CAhBC;;AAAA,kCAkBtB,MAAM,KAAKJ,OAAL,CAAaI,GAAb,CAlBgB;;AAC5B,SAAKJ,OAAL,GAAeF,UAAf;AACA,SAAKM,GAAL,GAAWN,UAAU,CAACO,MAAX,GAAoB,CAA/B;AACA;;AAJe;;AAsBjB,MAAMC,KAAK,GAAG,IAAIV,UAAJ,EAAd;AACA,OAAO,MAAMW,YAAY,gBAAGb,KAAK,CAACc,aAAN,CAAoBF,KAApB,CAArB;AACP,OAAO,MAAMG,aAAa,GAAGF,YAAY,CAACG,QAAnC;AACP,OAAO,MAAMC,aAAa,GAAGJ,YAAY,CAACK,QAAnC;AAEP,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEd,EAAAA,IAAF;AAAQe,EAAAA;AAAR,CAAD,KAAwB;AAC5C,QAAMC,KAAK,GAAGpB,UAAU,CAACY,YAAD,CAAxB,CAD4C,CAG5C;;AACA,MAAIQ,KAAK,CAAChB,IAAN,OAAiBA,IAArB,EAA2B;AAC1B,WAAO,IAAP;AACA;;AAED,SAAOe,QAAP;AACA,CATM;;AAWP,MAAME,WAAW,GAAG,CAACD,KAAD,EAAQhB,IAAR,KAAiB;AACpCgB,EAAAA,KAAK,CAACd,IAAN,CAAWF,IAAX;AACA,CAFD;;AAIA,OAAO,MAAMkB,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMJ,EAAAA;AAAN,CAAD,KAAsB;AACzC,QAAMC,KAAK,GAAGpB,UAAU,CAACY,YAAD,CAAxB;AACA,sBACC;AAAK,IAAA,OAAO,EAAE,MAAMS,WAAW,CAACD,KAAD,EAAQG,EAAR,CAA/B;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAPM;AASP,eAAeR,KAAf","sourcesContent":["import React, { useContext } from 'react'\n\nclass AtlasClass {\n\tconstructor(preHistory = []) {\n\t\tthis.history = preHistory\n\t\tthis.now = preHistory.length - 1\n\t}\n\n\tpush = (path) => {\n\t\tif (path[0] !== '/') {\n\t\t\tpath = '/' + path\n\t\t}\n\t\tthis.history.push(path)\n\t\twindow.href = path\n\t\tthis.now += 1\n\t}\t\n\n\tback = () => this.now -= 1\n\n\tforward = () => this.now += 1\n\n\tpath = () => this.history[now]\n}\n\nconst Atlas = new AtlasClass()\nexport const AtlasContext = React.createContext(Atlas)\nexport const AtlasProvider = AtlasContext.Provider\nexport const AtlasConsumer = AtlasContext.Consumer\n\nexport const Route = ({ path, children }) => {\n\tconst atlas = useContext(AtlasContext)\n\t\n\t// TODO: Support inexact routes\t\n\tif (atlas.path() !== path) {\n\t\treturn null\n\t}\n\n\treturn children\n}\n\nconst handleClick = (atlas, path) => {\n\tatlas.push(path)\n}\n\nexport const Link = ({ to, children }) => {\n\tconst atlas = useContext(AtlasContext)\n\treturn (\n\t\t<div onClick={() => handleClick(atlas, to)}>\n\t\t\t{ children }\n\t\t</div>\n\t)\n}\n\nexport default Atlas\n\n"]},"metadata":{},"sourceType":"module"}