{"ast":null,"code":"export default class Voice {\n  constructor() {\n    this.synth = window.speechSynthesis;\n    this.context = new (window.AudioContext || window.webkitAudioContext)();\n    this.streamDestination = this.context.createMediaStreamDestination();\n    this.source1 = this.context.createBufferSource();\n    this.source2 = this.context.createBufferSource();\n    this.source3 = this.context.createBufferSource();\n    this.source4 = this.context.createBufferSource();\n    this.bufferSource = this.context.createBufferSource();\n  }\n\n  say(script) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      console.log('getUserMedia supported.');\n      navigator.mediaDevices.getUserMedia({\n        audio: true\n      }).then(stream => {\n        const mediaRecorder = new MediaRecorder(stream);\n        const utterance = new SpeechSynthesisUtterance(script);\n\n        utterance.onend = () => {\n          mediaRecorder.stop();\n\n          mediaRecorder.ondataavailable = e => {\n            e.data.arrayBuffer().then(buffer => {\n              console.log(buffer);\n              this.context.decodeAudioData(buffer, audioBuffer => {\n                const combinedBuffer = audioBuffer.getChannelData(0) + audioBuffer.getChannelData(0).slice(10000);\n                console.log(combinedBuffer); // this.bufferSource\n\n                this.source1.buffer = audioBuffer;\n                this.source2.buffer = audioBuffer;\n                this.source3.buffer = audioBuffer;\n                this.source4.buffer = audioBuffer;\n                this.source1.connect(this.context.destination);\n                this.source2.connect(this.context.destination);\n                this.source3.connect(this.context.destination);\n                this.source4.connect(this.context.destination);\n                this.source1.start();\n                this.source2.start();\n                this.source3.start();\n                this.source4.start();\n              });\n            });\n          };\n        };\n\n        mediaRecorder.start();\n        this.synth.speak(utterance);\n      });\n    }\n  }\n\n  loop() {\n    if (!window) {\n      return;\n    }\n\n    return;\n  }\n\n  save() {\n    if (!window) {\n      return;\n    }\n\n    return;\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/lib/voice/voice.js"],"names":["Voice","constructor","synth","window","speechSynthesis","context","AudioContext","webkitAudioContext","streamDestination","createMediaStreamDestination","source1","createBufferSource","source2","source3","source4","bufferSource","say","script","navigator","mediaDevices","getUserMedia","console","log","audio","then","stream","mediaRecorder","MediaRecorder","utterance","SpeechSynthesisUtterance","onend","stop","ondataavailable","e","data","arrayBuffer","buffer","decodeAudioData","audioBuffer","combinedBuffer","getChannelData","slice","connect","destination","start","speak","loop","save"],"mappings":"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","sourcesContent":["export default class Voice {\n\n\tconstructor() {\n\t\tthis.synth = window.speechSynthesis\n\t\tthis.context = new (window.AudioContext || window.webkitAudioContext)()\n\t\tthis.streamDestination = this.context.createMediaStreamDestination()\n\t\tthis.source1 = this.context.createBufferSource()\n\t\tthis.source2 = this.context.createBufferSource()\n\t\tthis.source3 = this.context.createBufferSource()\n\t\tthis.source4 = this.context.createBufferSource()\n\t\tthis.bufferSource = this.context.createBufferSource()\n\t}\n\n\tsay(script) {\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n   \t\t\tconsole.log('getUserMedia supported.');\n   \t\t\tnavigator.mediaDevices.getUserMedia ({ audio: true })\n      \t\t.then((stream) => {\n      \t\t\tconst mediaRecorder = new MediaRecorder(stream);\n      \t\t\tconst utterance = new SpeechSynthesisUtterance(script);\n      \t\t\tutterance.onend = () => {\n      \t\t\t\tmediaRecorder.stop()\n      \t\t\t\tmediaRecorder.ondataavailable = (e) => {\n\t      \t\t\t\te.data.arrayBuffer().then((buffer) => {\n\t      \t\t\t\t\tconsole.log(buffer)\n\t      \t\t\t\t\tthis.context.decodeAudioData(buffer, (audioBuffer) => {\n\t      \t\t\t\t\t\tconst combinedBuffer = audioBuffer.getChannelData(0) + audioBuffer.getChannelData(0).slice(10000)\n\t      \t\t\t\t\t\tconsole.log(combinedBuffer)\n\t      \t\t\t\t\t\t// this.bufferSource\n\n\t\t  \t\t\t\t\t\tthis.source1.buffer = audioBuffer\n\t\t      \t\t\t\t\tthis.source2.buffer = audioBuffer\n\t\t      \t\t\t\t\tthis.source3.buffer = audioBuffer\n\t\t      \t\t\t\t\tthis.source4.buffer = audioBuffer\n\t\t      \t\t\t\t\tthis.source1.connect(this.context.destination)\n\t      \t\t\t\t\t\tthis.source2.connect(this.context.destination)\n\t      \t\t\t\t\t\tthis.source3.connect(this.context.destination)\n\t      \t\t\t\t\t\tthis.source4.connect(this.context.destination)\n\t\t      \t\t\t\t\tthis.source1.start()\n\t\t      \t\t\t\t\tthis.source2.start()\n\t\t      \t\t\t\t\tthis.source3.start()\n\t\t      \t\t\t\t\tthis.source4.start()\n\t      \t\t\t\t\t})\n\t      \t\t\t\t})\n      \t\t\t\t}\n      \t\t\t}\n\n      \t\t\tmediaRecorder.start()\n      \t\t\tthis.synth.speak(utterance)\n      \t\t})\n\n      \t}\n\t}\n\n\tloop() {\n\t\tif (!window) {\n\t\t\treturn\n\t\t}\n\t\treturn\n\t}\n\n\tsave() {\n\t\tif (!window) {\n\t\t\treturn\n\t\t}\n\t\treturn\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}