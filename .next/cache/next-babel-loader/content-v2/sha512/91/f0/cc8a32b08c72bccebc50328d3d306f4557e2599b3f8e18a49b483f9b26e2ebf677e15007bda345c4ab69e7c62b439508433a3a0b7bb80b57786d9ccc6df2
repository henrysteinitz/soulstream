{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/screen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classnames from 'classnames';\nimport { Component } from 'react';\nimport { Route, AtlasProvider } from '../lib/atlas/atlas.js'; // import PropTypes from 'prop-types'\n\nimport Content from './content.js';\nimport Time from './time.js';\nconst MODES = {\n  'default': \"DEFAULT\",\n  'pocket': \"POCKET\"\n};\n\nclass ScreenWithAtlas extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      contentIsPaused: true,\n      mode: \"DEFAULT\"\n    });\n  }\n\n  render() {\n    const {\n      on,\n      toggle,\n      nowPlaying,\n      artist,\n      atlas\n    } = this.props;\n    const onOrLocked = Atlas.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames(\"screen\", \"fullscreen\", {\n        \"off\": !on\n      }),\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Content, {\n          size: \"fullscreen\",\n          art: nowPlaying && nowPlaying.artUrl,\n          toggle: toggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/[artist]\",\n        children: /*#__PURE__*/_jsxDEV(Content, {\n          size: \"fullscreen\",\n          art: artist && artist.pictureUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst Screen = props => {\n  return /*#__PURE__*/_jsxDEV(AtlasProvider, {\n    children: atlas => {\n      /*#__PURE__*/\n      _jsxDEV(ScreenWithAtlas, _objectSpread({\n        atlas: atlas\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n};\n\nexport default screen; // Screen.propTypes = {\n//  \tsize: PropTypes.oneOf([\"full\"]),\n//  \tisCurrent: PropTypes.bool,\n// };\n// TODO\n// - take and render album art and album videos\n//   - consider allowing small album preview to be videos\n// - resize / minimize\n// - render and connect controls\n// - -","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/screen.js"],"names":["classnames","Component","Route","AtlasProvider","Content","Time","MODES","ScreenWithAtlas","contentIsPaused","mode","render","on","toggle","nowPlaying","artist","atlas","props","onOrLocked","Atlas","state","artUrl","pictureUrl","Screen","screen"],"mappings":";;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,uBAArC,C,CACA;;AAEA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,KAAK,GAAG;AACb,aAAW,SADE;AAEb,YAAU;AAFG,CAAd;;AAKA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;AAAA;AAAA;;AAAA,mCAE/B;AACPO,MAAAA,eAAe,EAAE,IADV;AAEPC,MAAAA,IAAI,EAAE;AAFC,KAF+B;AAAA;;AAOvCC,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,MAAN;AAAcC,MAAAA,UAAd;AAA0BC,MAAAA,MAA1B;AAAkCC,MAAAA;AAAlC,QAA4C,KAAKC,KAAvD;AAEA,UAAMC,UAAU,GAAGC,KAAK,CAACC,KAAzB;AAEA,wBACC;AAAK,MAAA,SAAS,EAAEnB,UAAU,CAAC,QAAD,EAAW,YAAX,EAAyB;AAAC,eAAO,CAACW;AAAT,OAAzB,CAA1B;AAAA,8BACC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAA,+BACC,QAAC,OAAD;AAAS,UAAA,IAAI,EAAC,YAAd;AAA2B,UAAA,GAAG,EAAEE,UAAU,IAAIA,UAAU,CAACO,MAAzD;AAAiE,UAAA,MAAM,EAAER;AAAzE;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,eAIC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,WAAZ;AAAA,+BACC,QAAC,OAAD;AAAS,UAAA,IAAI,EAAC,YAAd;AAA2B,UAAA,GAAG,EAAEE,MAAM,IAAIA,MAAM,CAACO;AAAjD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAUA;;AAtBsC;;AAyBxC,MAAMC,MAAM,GAAIN,KAAD,IAAW;AACzB,sBACC,QAAC,aAAD;AAAA,cACGD,KAAD,IAAW;AACX;AAAA,cAAC,eAAD;AAAiB,QAAA,KAAK,EAAEA;AAAxB,SAAmCC,KAAnC;AAAA;AAAA;AAAA;AAAA;AACA;AAHF;AAAA;AAAA;AAAA;AAAA,UADD;AAOA,CARD;;AAUA,eAAeO,MAAf,C,CAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import classnames from 'classnames'\nimport { Component } from 'react'\nimport { Route, AtlasProvider } from '../lib/atlas/atlas.js'\n// import PropTypes from 'prop-types'\n\nimport Content from './content.js'\nimport Time from './time.js'\n\nconst MODES = {\n\t'default': \"DEFAULT\",\n\t'pocket': \"POCKET\"\n}\n\nclass ScreenWithAtlas extends Component {\n\n\tstate = {\n\t\tcontentIsPaused: true,\n\t\tmode: \"DEFAULT\",\n\t}\n\t\n\trender() {\n\t\tconst { on, toggle, nowPlaying, artist, atlas } = this.props;\n\n\t\tconst onOrLocked = Atlas.state\n\n\t\treturn (\n\t\t\t<div className={classnames(\"screen\", \"fullscreen\", {\"off\": !on})} >\n\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t<Content size=\"fullscreen\" art={nowPlaying && nowPlaying.artUrl} toggle={toggle} />\n\t\t\t\t</Route> \n\t\t\t\t<Route path=\"/[artist]\">\n\t\t\t\t\t<Content size=\"fullscreen\" art={artist && artist.pictureUrl} />\n\t\t\t\t</Route>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst Screen = (props) => {\n\treturn (\n\t\t<AtlasProvider>\n\t\t\t{(atlas) => {\n\t\t\t\t<ScreenWithAtlas atlas={atlas} {...props} />\n\t\t\t}}\n\t\t</AtlasProvider>\n\t)\n}\n\nexport default screen\n\n\n// Screen.propTypes = {\n//  \tsize: PropTypes.oneOf([\"full\"]),\n//  \tisCurrent: PropTypes.bool,\n// };\n\n\n\n\n// TODO\n// - take and render album art and album videos\n//   - consider allowing small album preview to be videos\n// - resize / minimize\n// - render and connect controls\n// - -"]},"metadata":{},"sourceType":"module"}