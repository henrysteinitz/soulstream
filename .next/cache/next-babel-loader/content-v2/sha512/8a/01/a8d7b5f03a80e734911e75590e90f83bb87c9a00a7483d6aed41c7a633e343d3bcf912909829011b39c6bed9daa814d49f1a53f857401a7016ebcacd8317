{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/stereo.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport Helipad from '../lib/helipad/helipad.js';\nimport { Route } from '../lib/atlas/atlas.js';\nimport Left from './left.js';\nimport Mural from './mural.js';\nimport Right from './right.js';\nimport Upload from './upload.js';\nimport { VerseMap } from '../state/lyrics.js';\n\nconst mapTracksById = tracks => {\n  let result = {};\n  tracks.forEach(track => {\n    result[track.id] = _objectSpread({}, track);\n    console.log(\"Map tracks by id .verses\");\n    console.log(result[track.id].verses);\n    result[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]);\n  });\n  return result;\n};\n\nexport default class Stereo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isPlaying: false,\n      song: null,\n      currentTrackTime: 0,\n      totalTrackTime: null,\n      scrubbingTrack: false,\n      scrubbingPlayer: false,\n      screenOn: false,\n      typing: false,\n      tracks: this.props.stream,\n      tracksById: mapTracksById(this.props.stream),\n      queue: [],\n      // list of track ids\\\n      defaultQueue: [],\n      dragTrackId: null,\n      nightMode: true // TODO: move to a global store.\n\n    });\n\n    _defineProperty(this, \"timeAnimationInterval\", null);\n\n    _defineProperty(this, \"play\", (song, source = \"STREAM\", ref = null) => {\n      const trackRef = ref || this.state.trackRef;\n      let screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n\n      if (this.state.song && song.id === this.state.song.id) {\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: screenRef ? screenRef.currentTime : trackRef.currentTrackTime,\n          totalTrackTime: screenRef ? screenRef.duration : trackRef.duration\n        }, () => {\n          screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n          screenRef && screenRef.play();\n          trackRef && trackRef.play();\n          this.animateTime();\n        });\n      } else {\n        saveToHistory();\n        clearInterval(this.timeAnimationInterval);\n\n        if (trackRef) {\n          trackRef.pause();\n          trackRef.currentTime = 0;\n        }\n\n        if (source === 'STREAM') {// set default queue.\n        }\n\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: 0,\n          totalTrackTime: screenRef ? screenRef.duration : trackRef.duration,\n          song,\n          trackRef: ref\n        }, () => {\n          screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n\n          if (screenRef) {\n            screenRef.play();\n            screenRef.onended = this.playNextInQueue;\n          }\n\n          ref && ref.play();\n          this.animateTime();\n        });\n      }\n    });\n\n    _defineProperty(this, \"playNextInQueue\", () => {\n      const {\n        queue,\n        tracksById\n      } = this.state;\n\n      if (queue.length > 0) {\n        this.play(tracksById[queue.shift()], 'QUEUE');\n        this.setState({\n          queue\n        });\n      }\n    });\n\n    _defineProperty(this, \"playQueueTrackByIndex\", i => () => {\n      let {\n        queue,\n        tracksById\n      } = this.state;\n      this.play(tracksById[queue[i]], 'QUEUE');\n      this.setState({\n        queue: queue.slice(i + 1)\n      });\n    });\n\n    _defineProperty(this, \"animateTime\", () => {\n      const {\n        song\n      } = this.state;\n      const ref = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n      this.timeAnimationInterval = setInterval(() => {\n        this.setState({\n          currentTrackTime: ref.currentTime,\n          totalTrackTime: ref.duration\n        });\n      }, 40);\n    });\n\n    _defineProperty(this, \"stopTimeAnimation\", () => {\n      clearInterval(this.timeAnimationInterval);\n    });\n\n    _defineProperty(this, \"pause\", (mediaRef = null) => {\n      const {\n        song,\n        trackRef\n      } = this.state;\n      let screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n      this.setState({\n        isPlaying: false\n      }, () => {\n        screenRef.pause();\n        trackRef && trackRef.pause();\n      });\n    });\n\n    _defineProperty(this, \"toggle\", () => {\n      this.state.isPlaying ? this.pause() : this.play(this.state.song);\n    });\n\n    _defineProperty(this, \"beginScrub\", () => {\n      this.stopTimeAnimation();\n      this.setState({\n        scrubbing: true\n      });\n    });\n\n    _defineProperty(this, \"endScub\", () => {\n      this.setState({\n        scrubbing: false\n      });\n    });\n\n    _defineProperty(this, \"skipTo\", (time, cb = () => {}) => {\n      const {\n        song,\n        trackRef\n      } = this.state;\n      let screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n\n      if (trackRef) {\n        trackRef.currentTime = time;\n      }\n\n      screenRef.currentTime = time;\n      this.setState({\n        currentTrackTime: time\n      }, cb);\n    });\n\n    _defineProperty(this, \"turnScreenOn\", () => this.setState({\n      screenOn: true\n    }));\n\n    _defineProperty(this, \"turnScreenOff\", () => this.setState({\n      screenOn: false\n    }));\n\n    _defineProperty(this, \"toggleScreen\", () => this.setState({\n      screenOn: !this.state.screenOn\n    }));\n\n    _defineProperty(this, \"handleSpacebar\", e => {\n      if (e.key === ' ' && !this.state.typing) {\n        e.preventDefault();\n        this.toggle();\n      }\n    });\n\n    _defineProperty(this, \"addVerse\", (verse, trackId) => {\n      const nextTracksById = _objectSpread({}, this.state.tracksById);\n\n      nextTracksById[trackid].verses.insert(verse);\n      this.setState({\n        tracksById: nextTracksById\n      }, () => this.syncTracks());\n    });\n\n    _defineProperty(this, \"syncSteamState\", () => {\n      const nextStream = this.state.tracks.map(x => this.state.tracksById[x.id]);\n      this.setState({\n        tracks: nextStream\n      });\n    });\n\n    _defineProperty(this, \"addToQueue\", id => {\n      this.setState({\n        queue: [...this.state.queue, id]\n      });\n    });\n\n    _defineProperty(this, \"startTrackDragging\", id => {\n      this.setState({\n        dragTrackId: id\n      });\n    });\n\n    _defineProperty(this, \"stopTrackDragging\", (id, e) => {\n      this.setState({\n        dragTrackId: null\n      });\n      const queueRect = this.left.queue.queueDropzone.getBoundingClientRect();\n\n      if (queueRect.left <= e.clientX && e.clientX <= queueRect.right && queueRect.top <= e.clientY && e.clientY <= queueRect.bottom) {\n        this.addToQueue(id);\n      }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => this.handleSpacebar(e));\n  }\n\n  render() {\n    const {\n      song,\n      isPlaying,\n      currentTrackTime,\n      totalTrackTime,\n      screenOn,\n      tracks,\n      dragTrackId,\n      nightMode\n    } = this.state;\n    const {\n      signedIn,\n      startSession,\n      stream,\n      account,\n      artist\n    } = this.props;\n    const realStream = tracks || stream;\n    const playingVideo = song && song.type === 'VIDEO';\n    console.log(dragTrackId);\n    return /*#__PURE__*/_jsxDEV(Helipad, {\n      className: \"page-outer-container\",\n      onKeyDown: this.handleSpacebar,\n      modal: /*#__PURE__*/_jsxDEV(Upload, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 85\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('page-content', {\n          center: !signedIn\n        }),\n        children: [screenOn && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classnames('left', 'fake', {\n            wide: playingVideo\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(Left, {\n          ref: \"left\",\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          nowPlaying: song && this.state.tracksById[song.id],\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          startSession: startSession,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          toggleScreen: this.toggleScreen,\n          screenOn: screenOn,\n          account: account,\n          artist: artist,\n          setTyping: value => this.setState({\n            typing: value\n          }),\n          addVerse: this.addVerse,\n          dragTrackId: dragTrackId,\n          addToQueue: this.addToQueue,\n          queueTracks: this.state.queue.map(id => this.state.tracksById[id]),\n          stopTrackDragging: this.stopTrackDragging,\n          playQueueTrackByIndex: this.playQueueTrackByIndex,\n          nightMode: nightMode,\n          playingVideo: playingVideo,\n          ref: input => {\n            this.left = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }, this), signedIn && /*#__PURE__*/_jsxDEV(Right, {\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          playingId: song && song.id,\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          stream: realStream,\n          account: account,\n          artist: artist,\n          startTrackDragging: this.startTrackDragging,\n          stopTrackDragging: this.stopTrackDragging\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"audio\",\n          src: song && song.audioUrl,\n          ref: input => {\n            this.audioRef = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/stereo.js"],"names":["Component","ReactDOM","classnames","Helipad","Route","Left","Mural","Right","Upload","VerseMap","mapTracksById","tracks","result","forEach","track","id","console","log","verses","Stereo","isPlaying","song","currentTrackTime","totalTrackTime","scrubbingTrack","scrubbingPlayer","screenOn","typing","props","stream","tracksById","queue","defaultQueue","dragTrackId","nightMode","source","ref","trackRef","state","screenRef","type","left","screen","videoRef","audioRef","setState","currentTime","duration","play","animateTime","saveToHistory","clearInterval","timeAnimationInterval","pause","onended","playNextInQueue","length","shift","i","slice","setInterval","mediaRef","stopTimeAnimation","scrubbing","time","cb","e","key","preventDefault","toggle","verse","trackId","nextTracksById","trackid","insert","syncTracks","nextStream","map","x","queueRect","queueDropzone","getBoundingClientRect","clientX","right","top","clientY","bottom","addToQueue","componentDidMount","window","addEventListener","handleSpacebar","render","signedIn","startSession","account","artist","realStream","playingVideo","center","wide","skipTo","toggleScreen","value","addVerse","stopTrackDragging","playQueueTrackByIndex","input","startTrackDragging","audioUrl"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,QAAT,QAAyB,oBAAzB;;AAGA,MAAMC,aAAa,GAAIC,MAAD,IAAY;AACjC,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAW;AACzBF,IAAAA,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,qBAAuBD,KAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAA7B;AACAN,IAAAA,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAAjB,GAA0BN,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAAjB,GAA0B,IAAIT,QAAJ,CAAaG,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAA9B,CAA1B,GAAkE,IAAIT,QAAJ,CAAa,EAAb,CAA5F;AACA,GALD;AAMA,SAAOG,MAAP;AACA,CATD;;AAWA,eAAe,MAAMO,MAAN,SAAqBnB,SAArB,CAA+B;AAAA;AAAA;;AAAA,mCAErC;AACPoB,MAAAA,SAAS,EAAE,KADJ;AAEPC,MAAAA,IAAI,EAAE,IAFC;AAGPC,MAAAA,gBAAgB,EAAE,CAHX;AAIPC,MAAAA,cAAc,EAAE,IAJT;AAKPC,MAAAA,cAAc,EAAE,KALT;AAMPC,MAAAA,eAAe,EAAE,KANV;AAOPC,MAAAA,QAAQ,EAAE,KAPH;AAQPC,MAAAA,MAAM,EAAE,KARD;AASPhB,MAAAA,MAAM,EAAE,KAAKiB,KAAL,CAAWC,MATZ;AAUPC,MAAAA,UAAU,EAAEpB,aAAa,CAAC,KAAKkB,KAAL,CAAWC,MAAZ,CAVlB;AAWPE,MAAAA,KAAK,EAAE,EAXA;AAWI;AACXC,MAAAA,YAAY,EAAE,EAZP;AAaPC,MAAAA,WAAW,EAAE,IAbN;AAcPC,MAAAA,SAAS,EAAE,IAdJ,CAeP;;AAfO,KAFqC;;AAAA,mDAoBrB,IApBqB;;AAAA,kCA4BtC,CAACb,IAAD,EAAOc,MAAM,GAAC,QAAd,EAAwBC,GAAG,GAAC,IAA5B,KAAqC;AAC3C,YAAMC,QAAQ,GAAGD,GAAG,IAAI,KAAKE,KAAL,CAAWD,QAAnC;AACA,UAAIE,SAAS,GAAGlB,IAAI,CAACmB,IAAL,KAAc,OAAd,GAAwB,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,QAAzC,GAAoD,KAAKC,QAAzE;;AACA,UAAI,KAAKN,KAAL,CAAWjB,IAAX,IAAmBA,IAAI,CAACN,EAAL,KAAY,KAAKuB,KAAL,CAAWjB,IAAX,CAAgBN,EAAnD,EAAuD;AACtD,aAAK8B,QAAL,CAAc;AACbzB,UAAAA,SAAS,EAAE,IADE;AAEbE,UAAAA,gBAAgB,EAAEiB,SAAS,GAAGA,SAAS,CAACO,WAAb,GAA2BT,QAAQ,CAACf,gBAFlD;AAGbC,UAAAA,cAAc,EAAEgB,SAAS,GAAGA,SAAS,CAACQ,QAAb,GAAwBV,QAAQ,CAACU;AAH7C,SAAd,EAIG,MAAM;AACRR,UAAAA,SAAS,GAAGlB,IAAI,CAACmB,IAAL,KAAc,OAAd,GAAwB,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,QAAzC,GAAoD,KAAKC,QAArE;AACAL,UAAAA,SAAS,IAAIA,SAAS,CAACS,IAAV,EAAb;AACAX,UAAAA,QAAQ,IAAIA,QAAQ,CAACW,IAAT,EAAZ;AACA,eAAKC,WAAL;AACA,SATD;AAUA,OAXD,MAWO;AACNC,QAAAA,aAAa;AACbC,QAAAA,aAAa,CAAC,KAAKC,qBAAN,CAAb;;AACA,YAAIf,QAAJ,EAAc;AACbA,UAAAA,QAAQ,CAACgB,KAAT;AACAhB,UAAAA,QAAQ,CAACS,WAAT,GAAuB,CAAvB;AACA;;AACD,YAAIX,MAAM,KAAK,QAAf,EAAyB,CACxB;AACA;;AACD,aAAKU,QAAL,CAAc;AACbzB,UAAAA,SAAS,EAAE,IADE;AAEbE,UAAAA,gBAAgB,EAAE,CAFL;AAGbC,UAAAA,cAAc,EAAEgB,SAAS,GAAGA,SAAS,CAACQ,QAAb,GAAwBV,QAAQ,CAACU,QAH7C;AAIb1B,UAAAA,IAJa;AAKbgB,UAAAA,QAAQ,EAAED;AALG,SAAd,EAMG,MAAM;AACRG,UAAAA,SAAS,GAAGlB,IAAI,CAACmB,IAAL,KAAc,OAAd,GAAwB,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,QAAzC,GAAoD,KAAKC,QAArE;;AACA,cAAIL,SAAJ,EAAe;AACdA,YAAAA,SAAS,CAACS,IAAV;AACAT,YAAAA,SAAS,CAACe,OAAV,GAAoB,KAAKC,eAAzB;AACA;;AACDnB,UAAAA,GAAG,IAAIA,GAAG,CAACY,IAAJ,EAAP;AACA,eAAKC,WAAL;AACA,SAdD;AAeA;AAED,KArE4C;;AAAA,6CAuE3B,MAAM;AACvB,YAAM;AAAElB,QAAAA,KAAF;AAASD,QAAAA;AAAT,UAAwB,KAAKQ,KAAnC;;AACA,UAAIP,KAAK,CAACyB,MAAN,GAAe,CAAnB,EAAsB;AACrB,aAAKR,IAAL,CAAUlB,UAAU,CAACC,KAAK,CAAC0B,KAAN,EAAD,CAApB,EAAqC,OAArC;AACA,aAAKZ,QAAL,CAAc;AAAEd,UAAAA;AAAF,SAAd;AACA;AACD,KA7E4C;;AAAA,mDA+EpB2B,CAAD,IAAO,MAAM;AACpC,UAAI;AAAE3B,QAAAA,KAAF;AAASD,QAAAA;AAAT,UAAwB,KAAKQ,KAAjC;AACA,WAAKU,IAAL,CAAUlB,UAAU,CAACC,KAAK,CAAC2B,CAAD,CAAN,CAApB,EAAgC,OAAhC;AACA,WAAKb,QAAL,CAAc;AAAEd,QAAAA,KAAK,EAAEA,KAAK,CAAC4B,KAAN,CAAYD,CAAC,GAAG,CAAhB;AAAT,OAAd;AACA,KAnF4C;;AAAA,yCAqF/B,MAAM;AACnB,YAAM;AAAErC,QAAAA;AAAF,UAAW,KAAKiB,KAAtB;AACA,YAAMF,GAAG,GAAGf,IAAI,CAACmB,IAAL,KAAc,OAAd,GAAwB,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,QAAzC,GAAoD,KAAKC,QAArE;AACA,WAAKQ,qBAAL,GAA6BQ,WAAW,CAAC,MAAM;AAC9C,aAAKf,QAAL,CAAc;AACbvB,UAAAA,gBAAgB,EAAEc,GAAG,CAACU,WADT;AAEbvB,UAAAA,cAAc,EAAEa,GAAG,CAACW;AAFP,SAAd;AAIA,OALuC,EAKrC,EALqC,CAAxC;AAMA,KA9F4C;;AAAA,+CAgGzB,MAAM;AACzBI,MAAAA,aAAa,CAAC,KAAKC,qBAAN,CAAb;AACA,KAlG4C;;AAAA,mCAoGrC,CAACS,QAAQ,GAAC,IAAV,KAAmB;AAC1B,YAAM;AAAExC,QAAAA,IAAF;AAAQgB,QAAAA;AAAR,UAAqB,KAAKC,KAAhC;AACA,UAAIC,SAAS,GAAGlB,IAAI,CAACmB,IAAL,KAAc,OAAd,GAAwB,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,QAAzC,GAAoD,KAAKC,QAAzE;AACA,WAAKC,QAAL,CAAc;AAAEzB,QAAAA,SAAS,EAAE;AAAb,OAAd,EAAoC,MAAM;AACzCmB,QAAAA,SAAS,CAACc,KAAV;AACAhB,QAAAA,QAAQ,IAAIA,QAAQ,CAACgB,KAAT,EAAZ;AACA,OAHD;AAIA,KA3G4C;;AAAA,oCA6GpC,MAAM;AACd,WAAKf,KAAL,CAAWlB,SAAX,GAAuB,KAAKiC,KAAL,EAAvB,GAAsC,KAAKL,IAAL,CAAU,KAAKV,KAAL,CAAWjB,IAArB,CAAtC;AACA,KA/G4C;;AAAA,wCAiHhC,MAAM;AAClB,WAAKyC,iBAAL;AACA,WAAKjB,QAAL,CAAc;AAAEkB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,KApH4C;;AAAA,qCAsHnC,MAAM;AACf,WAAKlB,QAAL,CAAc;AAAEkB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,KAxH4C;;AAAA,oCA0HpC,CAACC,IAAD,EAAOC,EAAE,GAAG,MAAM,CAAE,CAApB,KAAyB;AACjC,YAAM;AAAE5C,QAAAA,IAAF;AAAQgB,QAAAA;AAAR,UAAqB,KAAKC,KAAhC;AACA,UAAIC,SAAS,GAAGlB,IAAI,CAACmB,IAAL,KAAc,OAAd,GAAwB,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,QAAzC,GAAoD,KAAKC,QAAzE;;AACA,UAAIP,QAAJ,EAAc;AACbA,QAAAA,QAAQ,CAACS,WAAT,GAAuBkB,IAAvB;AACA;;AACDzB,MAAAA,SAAS,CAACO,WAAV,GAAwBkB,IAAxB;AACA,WAAKnB,QAAL,CAAc;AAAEvB,QAAAA,gBAAgB,EAAE0C;AAApB,OAAd,EAA0CC,EAA1C;AACA,KAlI4C;;AAAA,0CAoI9B,MAAM,KAAKpB,QAAL,CAAc;AAAEnB,MAAAA,QAAQ,EAAE;AAAZ,KAAd,CApIwB;;AAAA,2CAsI7B,MAAM,KAAKmB,QAAL,CAAc;AAAEnB,MAAAA,QAAQ,EAAE;AAAZ,KAAd,CAtIuB;;AAAA,0CAwI9B,MAAM,KAAKmB,QAAL,CAAc;AAAEnB,MAAAA,QAAQ,EAAE,CAAC,KAAKY,KAAL,CAAWZ;AAAxB,KAAd,CAxIwB;;AAAA,4CA0I3BwC,CAAD,IAAO;AACvB,UAAIA,CAAC,CAACC,GAAF,KAAU,GAAV,IAAiB,CAAE,KAAK7B,KAAL,CAAWX,MAAlC,EAA0C;AACzCuC,QAAAA,CAAC,CAACE,cAAF;AACA,aAAKC,MAAL;AACA;AACD,KA/I4C;;AAAA,sCAiJlC,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC9B,YAAMC,cAAc,qBAAO,KAAKlC,KAAL,CAAWR,UAAlB,CAApB;;AACA0C,MAAAA,cAAc,CAACC,OAAD,CAAd,CAAwBvD,MAAxB,CAA+BwD,MAA/B,CAAsCJ,KAAtC;AACA,WAAKzB,QAAL,CAAc;AACbf,QAAAA,UAAU,EAAE0C;AADC,OAAd,EAEG,MAAM,KAAKG,UAAL,EAFT;AAGA,KAvJ4C;;AAAA,4CAyJ5B,MAAM;AACtB,YAAMC,UAAU,GAAG,KAAKtC,KAAL,CAAW3B,MAAX,CAAkBkE,GAAlB,CAAsBC,CAAC,IACzC,KAAKxC,KAAL,CAAWR,UAAX,CAAsBgD,CAAC,CAAC/D,EAAxB,CADkB,CAAnB;AAGA,WAAK8B,QAAL,CAAc;AACblC,QAAAA,MAAM,EAAEiE;AADK,OAAd;AAGA,KAhK4C;;AAAA,wCAkK/B7D,EAAD,IAAQ;AACpB,WAAK8B,QAAL,CAAc;AAACd,QAAAA,KAAK,EAAE,CAAC,GAAG,KAAKO,KAAL,CAAWP,KAAf,EAAsBhB,EAAtB;AAAR,OAAd;AACA,KApK4C;;AAAA,gDAsKvBA,EAAD,IAAQ;AAC5B,WAAK8B,QAAL,CAAc;AAAEZ,QAAAA,WAAW,EAAElB;AAAf,OAAd;AACA,KAxK4C;;AAAA,+CA0KzB,CAACA,EAAD,EAAKmD,CAAL,KAAW;AAC9B,WAAKrB,QAAL,CAAc;AAAEZ,QAAAA,WAAW,EAAE;AAAf,OAAd;AACA,YAAM8C,SAAS,GAAG,KAAKtC,IAAL,CAAUV,KAAV,CAAgBiD,aAAhB,CAA8BC,qBAA9B,EAAlB;;AACA,UAAIF,SAAS,CAACtC,IAAV,IAAkByB,CAAC,CAACgB,OAApB,IACHhB,CAAC,CAACgB,OAAF,IAAYH,SAAS,CAACI,KADnB,IAEHJ,SAAS,CAACK,GAAV,IAAiBlB,CAAC,CAACmB,OAFhB,IAGHnB,CAAC,CAACmB,OAAF,IAAaN,SAAS,CAACO,MAHxB,EAGgC;AAC9B,aAAKC,UAAL,CAAgBxE,EAAhB;AACD;AACD,KAnL4C;AAAA;;AAsB7CyE,EAAAA,iBAAiB,GAAG;AACnBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAoCxB,CAAD,IAAO,KAAKyB,cAAL,CAAoBzB,CAApB,CAA1C;AAGA;;AA2JD0B,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEvE,MAAAA,IAAF;AAAQD,MAAAA,SAAR;AAAmBE,MAAAA,gBAAnB;AAAqCC,MAAAA,cAArC;AAAqDG,MAAAA,QAArD;AAA+Df,MAAAA,MAA/D;AAAuEsB,MAAAA,WAAvE;AAAoFC,MAAAA;AAApF,QAAkG,KAAKI,KAA7G;AACA,UAAM;AAAEuD,MAAAA,QAAF;AAAYC,MAAAA,YAAZ;AAA0BjE,MAAAA,MAA1B;AAAkCkE,MAAAA,OAAlC;AAA2CC,MAAAA;AAA3C,QAAsD,KAAKpE,KAAjE;AAEA,UAAMqE,UAAU,GAAGtF,MAAM,IAAIkB,MAA7B;AACA,UAAMqE,YAAY,GAAG7E,IAAI,IAAIA,IAAI,CAACmB,IAAL,KAAc,OAA3C;AACAxB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,WAAZ;AAEA,wBACC,QAAC,OAAD;AAAS,MAAA,SAAS,EAAC,sBAAnB;AAA0C,MAAA,SAAS,EAAE,KAAK0D,cAA1D;AAA0E,MAAA,KAAK,eAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAAjF;AAAA,6BAkBC;AAAK,QAAA,SAAS,EAAEzF,UAAU,CAAC,cAAD,EAAiB;AAAEiG,UAAAA,MAAM,EAAE,CAACN;AAAX,SAAjB,CAA1B;AAAA,mBACGnE,QAAQ,iBAAI;AAAK,UAAA,SAAS,EAAExB,UAAU,CAAC,MAAD,EAAS,MAAT,EAAiB;AAAEkG,YAAAA,IAAI,EAAEF;AAAR,WAAjB;AAA1B;AAAA;AAAA;AAAA;AAAA,gBADf,eAEI,QAAC,IAAD;AAAM,UAAA,GAAG,EAAC,MAAV;AACC,UAAA,MAAM,EAAE,KAAK7B,MADd;AAEC,UAAA,IAAI,EAAE,KAAKrB,IAFZ;AAGC,UAAA,KAAK,EAAE,KAAKK,KAHb;AAIC,UAAA,UAAU,EAAEhC,IAAI,IAAI,KAAKiB,KAAL,CAAWR,UAAX,CAAsBT,IAAI,CAACN,EAA3B,CAJrB;AAKC,UAAA,SAAS,EAAEK,SALZ;AAMC,UAAA,QAAQ,EAAEyE,QANX;AAOC,UAAA,YAAY,EAAEC,YAPf;AAQC,UAAA,gBAAgB,EAAExE,gBARnB;AASC,UAAA,cAAc,EAAEC,cATjB;AAUC,UAAA,MAAM,EAAE,KAAK8E,MAVd;AAWC,UAAA,YAAY,EAAE,KAAKC,YAXpB;AAYC,UAAA,QAAQ,EAAE5E,QAZX;AAaC,UAAA,OAAO,EAAEqE,OAbV;AAcC,UAAA,MAAM,EAAEC,MAdT;AAeC,UAAA,SAAS,EAAGO,KAAD,IAAW,KAAK1D,QAAL,CAAc;AAAElB,YAAAA,MAAM,EAAE4E;AAAV,WAAd,CAfvB;AAgBC,UAAA,QAAQ,EAAE,KAAKC,QAhBhB;AAiBC,UAAA,WAAW,EAAEvE,WAjBd;AAkBC,UAAA,UAAU,EAAE,KAAKsD,UAlBlB;AAmBC,UAAA,WAAW,EAAE,KAAKjD,KAAL,CAAWP,KAAX,CAAiB8C,GAAjB,CAAsB9D,EAAD,IAAQ,KAAKuB,KAAL,CAAWR,UAAX,CAAsBf,EAAtB,CAA7B,CAnBd;AAoBC,UAAA,iBAAiB,EAAE,KAAK0F,iBApBzB;AAqBC,UAAA,qBAAqB,EAAE,KAAKC,qBArB7B;AAsBC,UAAA,SAAS,EAAExE,SAtBZ;AAuBC,UAAA,YAAY,EAAEgE,YAvBf;AAwBC,UAAA,GAAG,EAAGS,KAAD,IAAW;AAAC,iBAAKlE,IAAL,GAAYkE,KAAZ;AAAkB;AAxBpC;AAAA;AAAA;AAAA;AAAA,gBAFJ,EA8BKd,QAAQ,iBACR,QAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKxB,MAApB;AACC,UAAA,IAAI,EAAE,KAAKrB,IADZ;AAEC,UAAA,KAAK,EAAE,KAAKK,KAFb;AAGC,UAAA,SAAS,EAAEhC,IAAI,IAAIA,IAAI,CAACN,EAHzB;AAIC,UAAA,SAAS,EAAEK,SAJZ;AAKC,UAAA,QAAQ,EAAEyE,QALX;AAMC,UAAA,gBAAgB,EAAEvE,gBANnB;AAOC,UAAA,cAAc,EAAEC,cAPjB;AAQC,UAAA,MAAM,EAAE,KAAK8E,MARd;AASC,UAAA,MAAM,EAAEJ,UATT;AAUC,UAAA,OAAO,EAAEF,OAVV;AAWC,UAAA,MAAM,EAAEC,MAXT;AAYC,UAAA,kBAAkB,EAAE,KAAKY,kBAZ1B;AAaC,UAAA,iBAAiB,EAAE,KAAKH;AAbzB;AAAA;AAAA;AAAA;AAAA,gBA/BL,eA8CC;AAAO,UAAA,EAAE,EAAC,OAAV;AAAkB,UAAA,GAAG,EAAEpF,IAAI,IAAIA,IAAI,CAACwF,QAApC;AAA8C,UAAA,GAAG,EAAGF,KAAD,IAAW;AAAC,iBAAK/D,QAAL,GAAgB+D,KAAhB;AAAsB;AAArF;AAAA;AAAA;AAAA;AAAA,gBA9CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBD;AAAA;AAAA;AAAA;AAAA,YADD;AAqEA;;AAlQ4C","sourcesContent":["import { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport classnames from 'classnames'\nimport Helipad from '../lib/helipad/helipad.js'\nimport { Route } from '../lib/atlas/atlas.js' \n\nimport Left from './left.js'\nimport Mural from './mural.js'\nimport Right from './right.js'\nimport Upload from './upload.js'\n\nimport { VerseMap } from '../state/lyrics.js'\n\n\nconst mapTracksById = (tracks) => {\n\tlet result = {}\n\ttracks.forEach((track) => {\n\t\tresult[track.id] = {...track}\n\t\tconsole.log(\"Map tracks by id .verses\")\n\t\tconsole.log(result[track.id].verses)\n\t\tresult[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]) \n\t})\n\treturn result\n}\n\nexport default class Stereo extends Component {\n\n\tstate = {\n\t\tisPlaying: false,\n\t\tsong: null,\n\t\tcurrentTrackTime: 0,\n\t\ttotalTrackTime: null,\n\t\tscrubbingTrack: false,\n\t\tscrubbingPlayer: false,\n\t\tscreenOn: false,\n\t\ttyping: false,\n\t\ttracks: this.props.stream,\n\t\ttracksById: mapTracksById(this.props.stream),\n\t\tqueue: [], // list of track ids\\\n\t\tdefaultQueue: [],\n\t\tdragTrackId: null,\n\t\tnightMode: true\n\t\t// TODO: move to a global store.\n\t}\n\n\ttimeAnimationInterval = null\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener('keydown', (e) => this.handleSpacebar(e));\n\t\t\n\n\t}\n\n\tplay = (song, source=\"STREAM\", ref=null) => {\n\t\tconst trackRef = ref || this.state.trackRef\n\t\tlet screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tif (this.state.song && song.id === this.state.song.id) {\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: screenRef ? screenRef.currentTime : trackRef.currentTrackTime, \n\t\t\t\ttotalTrackTime: screenRef ? screenRef.duration : trackRef.duration\n\t\t\t}, () => {\n\t\t\t\tscreenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\t\t\tscreenRef && screenRef.play()\n\t\t\t\ttrackRef && trackRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t})\n\t\t} else {\n\t\t\tsaveToHistory()\n\t\t\tclearInterval(this.timeAnimationInterval)\n\t\t\tif (trackRef) {\n\t\t\t\ttrackRef.pause()\n\t\t\t\ttrackRef.currentTime = 0\n\t\t\t}\n\t\t\tif (source === 'STREAM') {\n\t\t\t\t// set default queue.\n\t\t\t}\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: 0, \n\t\t\t\ttotalTrackTime: screenRef ? screenRef.duration : trackRef.duration,\n\t\t\t\tsong,\n\t\t\t\ttrackRef: ref\n\t\t\t}, () => {\n\t\t\t\tscreenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\t\t\tif (screenRef) {\n\t\t\t\t\tscreenRef.play()\n\t\t\t\t\tscreenRef.onended = this.playNextInQueue\n\t\t\t\t}\n\t\t\t\tref && ref.play()\n\t\t\t\tthis.animateTime()\n\t\t\t})\n\t\t}\n\n\t}\n\n\tplayNextInQueue = () => {\n\t\tconst { queue, tracksById } = this.state\n\t\tif (queue.length > 0) {\n\t\t\tthis.play(tracksById[queue.shift()], 'QUEUE')\n\t\t\tthis.setState({ queue })\n\t\t}\n\t}\n\n\tplayQueueTrackByIndex = (i) => () => {\n\t\tlet { queue, tracksById } = this.state\n\t\tthis.play(tracksById[queue[i]], 'QUEUE')\n\t\tthis.setState({ queue: queue.slice(i + 1) })\n\t}\n\n\tanimateTime = () => {\n\t\tconst { song } = this.state\n\t\tconst ref = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tthis.timeAnimationInterval = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tcurrentTrackTime: ref.currentTime,\n\t\t\t\ttotalTrackTime: ref.duration\n\t\t\t})\n\t\t}, 40)\n\t}\n\n\tstopTimeAnimation = () => {\n\t\tclearInterval(this.timeAnimationInterval)\n\t}\n\n\tpause = (mediaRef=null) => {\n\t\tconst { song, trackRef } = this.state\n\t\tlet screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tthis.setState({ isPlaying: false }, () => {\n\t\t\tscreenRef.pause()\n\t\t\ttrackRef && trackRef.pause()\n\t\t})\n\t}\n\n\ttoggle = () => {\n\t\tthis.state.isPlaying ? this.pause() : this.play(this.state.song) \n\t}\n\n\tbeginScrub = () => {\n\t\tthis.stopTimeAnimation()\n\t\tthis.setState({ scrubbing: true })\n\t}\n\n\tendScub = () => {\n\t\tthis.setState({ scrubbing: false })\n\t}\n\n\tskipTo = (time, cb = () => {}) => {\n\t\tconst { song, trackRef } = this.state\n\t\tlet screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tif (trackRef) { \n\t\t\ttrackRef.currentTime = time\n\t\t}\n\t\tscreenRef.currentTime = time\n\t\tthis.setState({ currentTrackTime: time }, cb)\n\t}\n\n\tturnScreenOn = () => this.setState({ screenOn: true })\n\n\tturnScreenOff = () => this.setState({ screenOn: false })\n\n\ttoggleScreen = () => this.setState({ screenOn: !this.state.screenOn })\n\n\thandleSpacebar = (e) => {\n\t\tif (e.key === ' ' && ! this.state.typing) {\n\t\t\te.preventDefault()\n\t\t\tthis.toggle()\n\t\t}\n\t}\n\n\taddVerse = (verse, trackId) => {\n\t\tconst nextTracksById = {...this.state.tracksById}\n\t\tnextTracksById[trackid].verses.insert(verse)\n\t\tthis.setState({\n\t\t\ttracksById: nextTracksById\n\t\t}, () => this.syncTracks())\n\t}\n\n\tsyncSteamState = () => {\n\t\tconst nextStream = this.state.tracks.map(x => (\n\t\t\tthis.state.tracksById[x.id]\n\t\t))\n\t\tthis.setState({\n\t\t\ttracks: nextStream\n\t\t})\n\t}\n\n\taddToQueue = (id) => {\n\t\tthis.setState({queue: [...this.state.queue, id]})\n\t}\n\n\tstartTrackDragging = (id) => {\n\t\tthis.setState({ dragTrackId: id })\n\t}\n\n\tstopTrackDragging = (id, e) => {\n\t\tthis.setState({ dragTrackId: null })\n\t\tconst queueRect = this.left.queue.queueDropzone.getBoundingClientRect()\n\t\tif (queueRect.left <= e.clientX && \n\t\t\te.clientX<= queueRect.right && \n\t\t\tqueueRect.top <= e.clientY && \n\t\t\te.clientY <= queueRect.bottom) {\n\t\t\t\tthis.addToQueue(id)\t\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { song, isPlaying, currentTrackTime, totalTrackTime, screenOn, tracks, dragTrackId, nightMode } = this.state\n\t\tconst { signedIn, startSession, stream, account, artist } = this.props\n\n\t\tconst realStream = tracks || stream\n\t\tconst playingVideo = song && song.type === 'VIDEO'\n\t\tconsole.log(dragTrackId)\n\n\t\treturn (\n\t\t\t<Helipad className=\"page-outer-container\" onKeyDown={this.handleSpacebar} modal={<Upload />}>\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<video autoPlay muted loop className=\"background-video\">\n\t\t\t\t\t\t<source type=\"video/mp4\" src=\"test_data/video/corn.mov\" />\n\t\t\t\t\t</video>\n\t\t\t\t*/}\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<div className=\"background-video-shade\" />\n\t\t\t\t*/}\n{/*\t\t\t\t<Route path=\"/[artist]\">\n\t\t\t\t\t<Mural src=\"test_data/artistsbigbirb.jpg\" />\n\t\t\t\t</Route>*/}\n\t\t\t\t{/*<div className=\"mural-container\">\n\t\t\t\t\t{ screenOn && <div className=\"mural-fake\" /> }\t\n\t\t\t\t\t<Mural />\n\t\t\t\t</div>*/}\n\t\t\t\t<div className={classnames('page-content', { center: !signedIn })}>\t\n\t\t\t\t\t{ screenOn && <div className={classnames('left', 'fake', { wide: playingVideo })} /> }\t\t\n\t\t    \t\t<Left ref=\"left\" \n\t\t    \t\t\ttoggle={this.toggle} \n\t\t    \t\t\tplay={this.play} \n\t\t    \t\t\tpause={this.pause} \n\t\t    \t\t\tnowPlaying={song && this.state.tracksById[song.id]}\n\t\t    \t\t\tisPlaying={isPlaying}\n\t\t    \t\t\tsignedIn={signedIn}\n\t\t    \t\t\tstartSession={startSession}\n\t\t    \t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\tskipTo={this.skipTo}\n\t\t    \t\t\ttoggleScreen={this.toggleScreen}\n\t\t    \t\t\tscreenOn={screenOn}\n\t\t    \t\t\taccount={account} \n\t\t    \t\t\tartist={artist}\n\t\t    \t\t\tsetTyping={(value) => this.setState({ typing: value })}\n\t\t    \t\t\taddVerse={this.addVerse}\n\t\t    \t\t\tdragTrackId={dragTrackId}\n\t\t    \t\t\taddToQueue={this.addToQueue}\n\t\t    \t\t\tqueueTracks={this.state.queue.map((id) => this.state.tracksById[id])}\n\t\t    \t\t\tstopTrackDragging={this.stopTrackDragging}\n\t\t    \t\t\tplayQueueTrackByIndex={this.playQueueTrackByIndex}\n\t\t    \t\t\tnightMode={nightMode}\n\t\t    \t\t\tplayingVideo={playingVideo}\n\t\t    \t\t\tref={(input) => {this.left = input}}\n\n\t\t    \t\t/>\n\t\t    \t\t{ \n\t\t    \t\t\tsignedIn && \n\t\t    \t\t\t<Right toggle={this.toggle} \n\t\t    \t\t\t\tplay={this.play} \n\t\t    \t\t\t\tpause={this.pause} \n\t\t    \t\t\t\tplayingId={song && song.id} \n\t\t    \t\t\t\tisPlaying={isPlaying}\n\t\t    \t\t\t\tsignedIn={signedIn}\n\t\t    \t\t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\t\tskipTo={this.skipTo}\n\t\t    \t\t\t\tstream={realStream}\n\t\t    \t\t\t\taccount={account}\n\t\t    \t\t\t\tartist={artist}\n\t\t    \t\t\t\tstartTrackDragging={this.startTrackDragging}\n\t\t    \t\t\t\tstopTrackDragging={this.stopTrackDragging} />\n\t\t    \t\t}\n\t\t\t\t\t<audio id=\"audio\" src={song && song.audioUrl} ref={(input) => {this.audioRef = input}} />\n\t\t\t\t</div>\n\t\t\t</Helipad>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}