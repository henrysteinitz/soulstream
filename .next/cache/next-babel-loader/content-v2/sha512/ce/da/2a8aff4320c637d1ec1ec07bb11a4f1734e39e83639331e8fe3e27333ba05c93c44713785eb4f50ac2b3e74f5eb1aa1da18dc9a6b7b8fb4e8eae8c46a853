{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/time.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Draggable from 'react-draggable';\nimport classnames from 'classnames';\nexport default class Time extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      scrubbingWidth: null\n    });\n\n    _defineProperty(this, \"handleStart\", e => {\n      console.log(e.clientX);\n      console.log(this.timeRef.getBoundingClientRect().left);\n      this.setState({\n        scrubbingWidth: e.clientX - this.timeRef.getBoundingClientRect().left\n      });\n    });\n\n    _defineProperty(this, \"handleEnd\", e => {\n      this.setState({\n        scrubbingWidth: null\n      });\n      const scrubberWidth = bounds.right - bounds.left(e.clientX - this.timeRef.getBoundingClientRect().left);\n      this.skipTo(e.clientX - this.timeRef.getBoundingClientRect().left);\n    });\n  }\n\n  render() {\n    const {\n      screen,\n      currentTime,\n      totalTime\n    } = this.props;\n    const {\n      scrubbingWidth\n    } = this.state;\n    const secretWidth = 10000;\n    const widthValue = scrubbingWidth ? `${scrubbingWidth}px` : `${currentTime / totalTime * 100}%`;\n    const width = `calc(${secretWidth}px + ${widthValue})`;\n    const style = widthValue ? {\n      width\n    } : {};\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseDown: this.handleStart,\n        ref: input => {\n          this.timeRef = input;\n        },\n        className: classnames(\"time\", {\n          'screen-time': screen\n        }),\n        children: /*#__PURE__*/_jsxDEV(Draggable, {\n          axis: \"x\",\n          onEnd: this.handleEnd,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-scrubber-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-scrubber\",\n              style: style\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/time.js"],"names":["Component","Draggable","classnames","Time","scrubbingWidth","e","console","log","clientX","timeRef","getBoundingClientRect","left","setState","scrubberWidth","bounds","right","skipTo","render","screen","currentTime","totalTime","props","state","secretWidth","widthValue","width","style","handleStart","input","handleEnd"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,eAAe,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAAA;AAAA;;AAAA,mCACnC;AACPI,MAAAA,cAAc,EAAE;AADT,KADmC;;AAAA,yCAK5BC,CAAD,IAAO;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKE,OAAL,CAAaC,qBAAb,GAAqCC,IAAjD;AAEA,WAAKC,QAAL,CAAc;AACbR,QAAAA,cAAc,EAAEC,CAAC,CAACG,OAAF,GAAY,KAAKC,OAAL,CAAaC,qBAAb,GAAqCC;AADpD,OAAd;AAGA,KAZ0C;;AAAA,uCAc9BN,CAAD,IAAO;AAClB,WAAKO,QAAL,CAAc;AAAER,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACA,YAAMS,aAAa,GAAGC,MAAM,CAACC,KAAP,GAAeD,MAAM,CAACH,IAAP,CACpCN,CAAC,CAACG,OAAF,GAAY,KAAKC,OAAL,CAAaC,qBAAb,GAAqCC,IADb,CAArC;AAEA,WAAKK,MAAL,CAAYX,CAAC,CAACG,OAAF,GAAY,KAAKC,OAAL,CAAaC,qBAAb,GAAqCC,IAA7D;AACA,KAnB0C;AAAA;;AAqB3CM,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,WAAV;AAAuBC,MAAAA;AAAvB,QAAqC,KAAKC,KAAhD;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAqB,KAAKkB,KAAhC;AACA,UAAMC,WAAW,GAAG,KAApB;AACA,UAAMC,UAAU,GAAGpB,cAAc,GAAI,GAAEA,cAAe,IAArB,GAA4B,GAAIe,WAAW,GAAGC,SAAf,GAA6B,GAAK,GAAlG;AACA,UAAMK,KAAK,GAAI,QAAOF,WAAY,QAAQC,UAAY,GAAtD;AACA,UAAME,KAAK,GAAGF,UAAU,GAAG;AAAEC,MAAAA;AAAF,KAAH,GAAe,EAAvC;AAEA,wBACC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACC;AAAK,QAAA,WAAW,EAAE,KAAKE,WAAvB;AAAoC,QAAA,GAAG,EAAGC,KAAD,IAAW;AAAC,eAAKnB,OAAL,GAAemB,KAAf;AAAqB,SAA1E;AAA4E,QAAA,SAAS,EAAE1B,UAAU,CAAC,MAAD,EAAS;AAAE,yBAAegB;AAAjB,SAAT,CAAjG;AAAA,+BACC,QAAC,SAAD;AACC,UAAA,IAAI,EAAC,GADN;AAEC,UAAA,KAAK,EAAE,KAAKW,SAFb;AAAA,iCAIC;AAAK,YAAA,SAAS,EAAC,yBAAf;AAAA,mCACC;AAAK,cAAA,SAAS,EAAC,eAAf;AAA+B,cAAA,KAAK,EAAEH;AAAtC;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AAJD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAcA;;AA3C0C","sourcesContent":["import { Component } from 'react'\nimport Draggable from 'react-draggable'\nimport classnames from 'classnames'\n\nexport default class Time extends Component {\n\tstate = {\n\t\tscrubbingWidth: null\n\t}\n\n\thandleStart = (e) => {\n\t\tconsole.log(e.clientX)\n\t\tconsole.log(this.timeRef.getBoundingClientRect().left)\n\n\t\tthis.setState({\n\t\t\tscrubbingWidth: e.clientX - this.timeRef.getBoundingClientRect().left\n\t\t})\n\t}\n\n\thandleEnd = (e) => {\n\t\tthis.setState({ scrubbingWidth: null })\n\t\tconst scrubberWidth = bounds.right - bounds.left\n\t\t(e.clientX - this.timeRef.getBoundingClientRect().left)\n\t\tthis.skipTo(e.clientX - this.timeRef.getBoundingClientRect().left)\n\t}\n\n\trender() {\n\t\tconst { screen, currentTime, totalTime } = this.props\n\t\tconst { scrubbingWidth } = this.state\n\t\tconst secretWidth = 10000\n\t\tconst widthValue = scrubbingWidth ? `${scrubbingWidth}px` : `${((currentTime / totalTime ) * 100)}%`\n\t\tconst width = `calc(${secretWidth}px + ${(widthValue)})`\n\t\tconst style = widthValue ? { width } : {}\n\n\t\treturn (\n\t\t\t<div className=\"time-container\">\n\t\t\t\t<div onMouseDown={this.handleStart} ref={(input) => {this.timeRef = input}} className={classnames(\"time\", { 'screen-time': screen })}>\n\t\t\t\t\t<Draggable\n\t\t\t\t\t\taxis=\"x\"\n\t\t\t\t\t\tonEnd={this.handleEnd}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"time-scrubber-container\">\n\t\t\t\t\t\t\t<div className=\"time-scrubber\" style={style} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Draggable>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}