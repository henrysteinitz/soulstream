{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/crowd.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport classnames from 'classnames'; // Ephemeral comments and social interactions\n\nexport default class Crowd extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      // map comments ids to hidden = {true, false}\n      // TODO: nest...?\n      comment: '',\n      comments: []\n    });\n\n    _defineProperty(this, \"computeRemainingTime\", comment => {\n      // TODO: figure it out, kiiid\n      return comment.remainingTime * (1000 * 60);\n    });\n\n    _defineProperty(this, \"handleComment\", e => {\n      this.setState({\n        comment: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handlePostComment\", e => {\n      const {\n        account,\n        song\n      } = this.props;\n      const {\n        comment\n      } = this.state;\n      fetch('/api/crowd/post_comment', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionToken: account.sessionToken,\n          message: comment,\n          trackId: song.id,\n          authorId: account.accountId,\n          duration: 5\n        })\n      }).then(res => {\n        res.json().then(body => {\n          const comment = _objectSpread(_objectSpread({}, body), {}, {\n            accountId: body.id\n          });\n\n          this.setState({\n            comments: [body].concat(this.state.comments)\n          });\n        });\n      });\n    });\n\n    _defineProperty(this, \"handleEnter\", fn => e => {\n      if (e.key === 'Enter') {\n        fn(e);\n      }\n    });\n  }\n\n  componentDidMount() {\n    const {\n      account,\n      song\n    } = this.props;\n    fetch(`/api/crowd/get_comments`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        trackId: song.id\n      })\n    }).then(res => {\n      res.json().then(body => {\n        console.log(body);\n        this.setState({\n          comments: body\n        });\n      });\n    });\n    this.state.comments.forEach(comment => {\n      setTimeout(() => this.setState({\n        [comment.id]: true\n      }), this.computeRemainingTime(comment));\n    });\n  }\n\n  render() {\n    const {\n      show\n    } = this.props;\n    const {\n      comment,\n      comments\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames('crowd', {\n        show\n      }),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crowd-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crowd-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crowd-right\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-speak\",\n            children: show && /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"crowd-input\",\n              placeholder: \"Talk\",\n              value: comment,\n              onChange: this.handleComment,\n              onKeyPress: this.handleEnter(this.handlePostComment),\n              autoFocus: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-chat\",\n            children: comments.filter(x => !this.state[x.accountId]).map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"track-comment\",\n                children: comment.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/crowd.js"],"names":["Component","classnames","Crowd","comment","comments","remainingTime","e","setState","target","value","account","song","props","state","fetch","method","headers","body","JSON","stringify","sessionToken","message","trackId","id","authorId","accountId","duration","then","res","json","concat","fn","key","componentDidMount","console","log","forEach","setTimeout","computeRemainingTime","render","show","handleComment","handleEnter","handlePostComment","filter","x","map"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport classnames from 'classnames'\n\n\n// Ephemeral comments and social interactions\nexport default class Crowd extends Component {\n\t\n\tstate = {\n\t\t// map comments ids to hidden = {true, false}\n\t\t// TODO: nest...?\n\t\tcomment: '',\n\t\tcomments: []\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { account, song } = this.props\n\t\tfetch(`/api/crowd/get_comments`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({ \n\t\t\t\ttrackId: song.id\n\t\t\t})\n\t\t}).then((res) => {\n\t\t\tres.json().then(body => {\n\t\t\t\tconsole.log(body)\n\t\t\t\tthis.setState({ comments: body })\n\t\t\t})\n\t\t})\n\t\tthis.state.comments.forEach(comment => {\n\t\t\tsetTimeout(() => this.setState({[comment.id]: true}), this.computeRemainingTime(comment))\n\t\t})\n\t}\n\n\tcomputeRemainingTime = (comment) => {\n\t\t// TODO: figure it out, kiiid\n\t\treturn comment.remainingTime * (1000 * 60)\n\t}\n\n\thandleComment = (e) => {\n\t\tthis.setState({ comment: e.target.value })\n\t}\n\n\thandlePostComment = (e) => {\n\t\tconst { account, song } = this.props\n\t\tconst { comment } = this.state\n\n\t\tfetch('/api/crowd/post_comment', \n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsessionToken: account.sessionToken,\n\t\t\t\tmessage: comment,\n\t\t\t\ttrackId: song.id,\n\t\t\t\tauthorId: account.accountId,\n\t\t\t\tduration: 5,\n\t\t\t})\n\t\t}).then((res) => {\n\t\t\tres.json().then(body => {\n\t\t\t\tconst comment = {...body, accountId: body.id }\n\t\t\t\tthis.setState({ comments: [body].concat(this.state.comments)})\n\t\t\t})\n\t\t})\n\t} \n\n\thandleEnter = (fn) => (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tfn(e)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { show } = this.props\n\t\tconst { comment, comments } = this.state\n\n\t\treturn (\n\t\t\t<div className={classnames('crowd', { show })}>\n\t\t\t\t<div className=\"crowd-inner\">\n\t\t\t\t\t<div className=\"crowd-left\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"crowd-right\">\n\t\t\t\t\t\t<div className=\"crowd-speak\">\n\t\t\t\t\t\t\t{show &&\n\t\t\t\t\t\t\t<input className=\"crowd-input\" \n\t\t\t\t\t\t\t\tplaceholder=\"Talk\" \n\t\t\t\t\t\t\t\tvalue={comment} \n\t\t\t\t\t\t\t\tonChange={this.handleComment}\n\t\t\t\t\t\t\t\tonKeyPress={this.handleEnter(this.handlePostComment)}\n\t\t\t\t\t\t\t\tautoFocus />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"crowd-chat\">\n\t\t\t\t\t\t\t{comments.filter(x => !this.state[x.accountId]).map(comment => (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"track-comment\">\n\t\t\t\t\t\t\t\t\t\t{comment.message}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\t\n\t\t)\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}