{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/crowd.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from 'react';\nimport classnames from 'classnames'; // Ephemeral comments and social interactions\n\nvar Crowd = /*#__PURE__*/function (_Component) {\n  _inherits(Crowd, _Component);\n\n  var _super = _createSuper(Crowd);\n\n  function Crowd() {\n    var _this;\n\n    _classCallCheck(this, Crowd);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      // map comments ids to hidden = {true, false}\n      // TODO: nest...?\n      comment: '',\n      comments: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeRemainingTime\", function (comment) {\n      // TODO: figure it out, kiiid\n      return comment.remainingTime * (1000 * 60);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleComment\", function (e) {\n      _this.setState({\n        comment: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePostComment\", function (e) {\n      var _this$props = _this.props,\n          account = _this$props.account,\n          song = _this$props.song;\n      var comment = _this.state.comment;\n\n      _this.setState({\n        posting: true\n      });\n\n      fetch('/api/crowd/post_comment', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionToken: account.sessionToken,\n          message: comment,\n          trackId: song.id,\n          authorId: account.accountId,\n          duration: 5\n        })\n      }).then(function (res) {\n        res.json().then(function (body) {\n          var comment = _objectSpread(_objectSpread({}, body), {}, {\n            accountId: body.id\n          });\n\n          _this.setState({\n            comments: [body].concat(_this.state.comments)\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnter\", function (fn) {\n      return function (e) {\n        if (e.key === 'Enter') {\n          fn(e);\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(Crowd, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          account = _this$props2.account,\n          song = _this$props2.song;\n      fetch(\"/api/crowd/get_comments\", {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          trackId: song.id\n        })\n      }).then(function (res) {\n        res.json().then(function (body) {\n          console.log(body);\n\n          _this2.setState({\n            comments: body\n          });\n        });\n      });\n      this.state.comments.forEach(function (comment) {\n        setTimeout(function () {\n          return _this2.setState(_defineProperty({}, comment.id, true));\n        }, _this2.computeRemainingTime(comment));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var show = this.props.show;\n      var _this$state = this.state,\n          comment = _this$state.comment,\n          comments = _this$state.comments;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('crowd', {\n          show: show\n        }),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crowd-inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crowd-speak\",\n              children: show && /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"crowd-input\",\n                placeholder: \"Talk\",\n                value: comment,\n                onChange: this.handleComment,\n                onKeyPress: this.handleEnter(this.handlePostComment),\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crowd-chat\",\n              children: comments.filter(function (x) {\n                return !_this3.state[x.accountId];\n              }).map(function (comment) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 10\n                  }, _this3), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"track-comment\",\n                    children: comment.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 10\n                  }, _this3)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 9\n                }, _this3);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 4\n      }, this);\n    }\n  }]);\n\n  return Crowd;\n}(Component);\n\nexport { Crowd as default };","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/crowd.js"],"names":["Component","classnames","Crowd","comment","comments","remainingTime","e","setState","target","value","props","account","song","state","posting","fetch","method","headers","body","JSON","stringify","sessionToken","message","trackId","id","authorId","accountId","duration","then","res","json","concat","fn","key","console","log","forEach","setTimeout","computeRemainingTime","show","handleComment","handleEnter","handlePostComment","filter","x","map"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAGA;;IACqBC,K;;;;;;;;;;;;;;;;4DAEZ;AACP;AACA;AACAC,MAAAA,OAAO,EAAE,EAHF;AAIPC,MAAAA,QAAQ,EAAE;AAJH,K;;2EA4Be,UAACD,OAAD,EAAa;AACnC;AACA,aAAOA,OAAO,CAACE,aAAR,IAAyB,OAAO,EAAhC,CAAP;AACA,K;;oEAEe,UAACC,CAAD,EAAO;AACtB,YAAKC,QAAL,CAAc;AAAEJ,QAAAA,OAAO,EAAEG,CAAC,CAACE,MAAF,CAASC;AAApB,OAAd;AACA,K;;wEAEmB,UAACH,CAAD,EAAO;AAAA,wBACA,MAAKI,KADL;AAAA,UAClBC,OADkB,eAClBA,OADkB;AAAA,UACTC,IADS,eACTA,IADS;AAAA,UAElBT,OAFkB,GAEN,MAAKU,KAFC,CAElBV,OAFkB;;AAI1B,YAAKI,QAAL,CAAc;AAAEO,QAAAA,OAAO,EAAE;AAAX,OAAd;;AACAC,MAAAA,KAAK,CAAC,yBAAD,EACL;AACCC,QAAAA,MAAM,EAAE,MADT;AAECC,QAAAA,OAAO,EAAE;AACR,0BAAgB;AADR,SAFV;AAKCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBC,UAAAA,YAAY,EAAEV,OAAO,CAACU,YADF;AAEpBC,UAAAA,OAAO,EAAEnB,OAFW;AAGpBoB,UAAAA,OAAO,EAAEX,IAAI,CAACY,EAHM;AAIpBC,UAAAA,QAAQ,EAAEd,OAAO,CAACe,SAJE;AAKpBC,UAAAA,QAAQ,EAAE;AALU,SAAf;AALP,OADK,CAAL,CAaGC,IAbH,CAaQ,UAACC,GAAD,EAAS;AAChBA,QAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgB,UAAAV,IAAI,EAAI;AACvB,cAAMf,OAAO,mCAAOe,IAAP;AAAaQ,YAAAA,SAAS,EAAER,IAAI,CAACM;AAA7B,YAAb;;AACA,gBAAKjB,QAAL,CAAc;AAAEH,YAAAA,QAAQ,EAAE,CAACc,IAAD,EAAOa,MAAP,CAAc,MAAKlB,KAAL,CAAWT,QAAzB;AAAZ,WAAd;AACA,SAHD;AAIA,OAlBD;AAmBA,K;;kEAEa,UAAC4B,EAAD;AAAA,aAAQ,UAAC1B,CAAD,EAAO;AAC5B,YAAIA,CAAC,CAAC2B,GAAF,KAAU,OAAd,EAAuB;AACtBD,UAAAA,EAAE,CAAC1B,CAAD,CAAF;AACA;AACD,OAJa;AAAA,K;;;;;;;wCAxDM;AAAA;;AAAA,yBACO,KAAKI,KADZ;AAAA,UACXC,OADW,gBACXA,OADW;AAAA,UACFC,IADE,gBACFA,IADE;AAEnBG,MAAAA,KAAK,4BAA4B;AAChCC,QAAAA,MAAM,EAAE,MADwB;AAEhCC,QAAAA,OAAO,EAAE;AACR,0BAAgB;AADR,SAFuB;AAKhCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBG,UAAAA,OAAO,EAAEX,IAAI,CAACY;AADM,SAAf;AAL0B,OAA5B,CAAL,CAQGI,IARH,CAQQ,UAACC,GAAD,EAAS;AAChBA,QAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgB,UAAAV,IAAI,EAAI;AACvBgB,UAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;;AACA,UAAA,MAAI,CAACX,QAAL,CAAc;AAAEH,YAAAA,QAAQ,EAAEc;AAAZ,WAAd;AACA,SAHD;AAIA,OAbD;AAcA,WAAKL,KAAL,CAAWT,QAAX,CAAoBgC,OAApB,CAA4B,UAAAjC,OAAO,EAAI;AACtCkC,QAAAA,UAAU,CAAC;AAAA,iBAAM,MAAI,CAAC9B,QAAL,qBAAgBJ,OAAO,CAACqB,EAAxB,EAA6B,IAA7B,EAAN;AAAA,SAAD,EAA4C,MAAI,CAACc,oBAAL,CAA0BnC,OAA1B,CAA5C,CAAV;AACA,OAFD;AAGA;;;6BA2CQ;AAAA;;AAAA,UACAoC,IADA,GACS,KAAK7B,KADd,CACA6B,IADA;AAAA,wBAEsB,KAAK1B,KAF3B;AAAA,UAEAV,OAFA,eAEAA,OAFA;AAAA,UAESC,QAFT,eAESA,QAFT;AAIR,0BACC;AAAK,QAAA,SAAS,EAAEH,UAAU,CAAC,OAAD,EAAU;AAAEsC,UAAAA,IAAI,EAAJA;AAAF,SAAV,CAA1B;AAAA,+BACC;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACC;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBADD,eAGC;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,oCACC;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,wBACEA,IAAI,iBACL;AAAO,gBAAA,SAAS,EAAC,aAAjB;AACC,gBAAA,WAAW,EAAC,MADb;AAEC,gBAAA,KAAK,EAAEpC,OAFR;AAGC,gBAAA,QAAQ,EAAE,KAAKqC,aAHhB;AAIC,gBAAA,UAAU,EAAE,KAAKC,WAAL,CAAiB,KAAKC,iBAAtB,CAJb;AAKC,gBAAA,SAAS;AALV;AAAA;AAAA;AAAA;AAAA;AAFD;AAAA;AAAA;AAAA;AAAA,oBADD,eAUC;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,wBACEtC,QAAQ,CAACuC,MAAT,CAAgB,UAAAC,CAAC;AAAA,uBAAI,CAAC,MAAI,CAAC/B,KAAL,CAAW+B,CAAC,CAAClB,SAAb,CAAL;AAAA,eAAjB,EAA+CmB,GAA/C,CAAmD,UAAA1C,OAAO;AAAA,oCAC1D;AAAA,0CACC;AAAA;AAAA;AAAA;AAAA,4BADD,eAGC;AAAK,oBAAA,SAAS,EAAC,eAAf;AAAA,8BACEA,OAAO,CAACmB;AADV;AAAA;AAAA;AAAA;AAAA,4BAHD;AAAA;AAAA;AAAA;AAAA;AAAA,0BAD0D;AAAA,eAA1D;AADF;AAAA;AAAA;AAAA;AAAA,oBAVD;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD;AA8BA;;;;EAzGiCtB,S;;SAAdE,K","sourcesContent":["import { Component } from 'react'\nimport classnames from 'classnames'\n\n\n// Ephemeral comments and social interactions\nexport default class Crowd extends Component {\n\t\n\tstate = {\n\t\t// map comments ids to hidden = {true, false}\n\t\t// TODO: nest...?\n\t\tcomment: '',\n\t\tcomments: []\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { account, song } = this.props\n\t\tfetch(`/api/crowd/get_comments`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({ \n\t\t\t\ttrackId: song.id\n\t\t\t})\n\t\t}).then((res) => {\n\t\t\tres.json().then(body => {\n\t\t\t\tconsole.log(body)\n\t\t\t\tthis.setState({ comments: body })\n\t\t\t})\n\t\t})\n\t\tthis.state.comments.forEach(comment => {\n\t\t\tsetTimeout(() => this.setState({[comment.id]: true}), this.computeRemainingTime(comment))\n\t\t})\n\t}\n\n\tcomputeRemainingTime = (comment) => {\n\t\t// TODO: figure it out, kiiid\n\t\treturn comment.remainingTime * (1000 * 60)\n\t}\n\n\thandleComment = (e) => {\n\t\tthis.setState({ comment: e.target.value })\n\t}\n\n\thandlePostComment = (e) => {\n\t\tconst { account, song } = this.props\n\t\tconst { comment } = this.state\n\n\t\tthis.setState({ posting: true })\n\t\tfetch('/api/crowd/post_comment', \n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsessionToken: account.sessionToken,\n\t\t\t\tmessage: comment,\n\t\t\t\ttrackId: song.id,\n\t\t\t\tauthorId: account.accountId,\n\t\t\t\tduration: 5,\n\t\t\t})\n\t\t}).then((res) => {\n\t\t\tres.json().then(body => {\n\t\t\t\tconst comment = {...body, accountId: body.id }\n\t\t\t\tthis.setState({ comments: [body].concat(this.state.comments)})\n\t\t\t})\n\t\t})\n\t} \n\n\thandleEnter = (fn) => (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tfn(e)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { show } = this.props\n\t\tconst { comment, comments } = this.state\n\n\t\treturn (\n\t\t\t<div className={classnames('crowd', { show })}>\n\t\t\t\t<div className=\"crowd-inner\">\n\t\t\t\t\t<div className=\"crowd-left\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"crowd-right\">\n\t\t\t\t\t\t<div className=\"crowd-speak\">\n\t\t\t\t\t\t\t{show &&\n\t\t\t\t\t\t\t<input className=\"crowd-input\" \n\t\t\t\t\t\t\t\tplaceholder=\"Talk\" \n\t\t\t\t\t\t\t\tvalue={comment} \n\t\t\t\t\t\t\t\tonChange={this.handleComment}\n\t\t\t\t\t\t\t\tonKeyPress={this.handleEnter(this.handlePostComment)}\n\t\t\t\t\t\t\t\tautoFocus />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"crowd-chat\">\n\t\t\t\t\t\t\t{comments.filter(x => !this.state[x.accountId]).map(comment => (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"track-comment\">\n\t\t\t\t\t\t\t\t\t\t{comment.message}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\t\n\t\t)\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}