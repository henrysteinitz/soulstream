{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _toConsumableArray from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/time.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from 'react';\nimport Draggable from 'react-draggable';\nimport classnames from 'classnames';\n\nvar Time = /*#__PURE__*/function (_Component) {\n  _inherits(Time, _Component);\n\n  var _super = _createSuper(Time);\n\n  function Time() {\n    var _this;\n\n    _classCallCheck(this, Time);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      scrubbingWidth: null,\n      fakeTime: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStart\", function (e) {\n      console.log(e.clientX);\n      console.log(_this.timeRef.getBoundingClientRect().left);\n\n      _this.setState({\n        scrubbingWidth: e.clientX - _this.timeRef.getBoundingClientRect().left\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStop\", function (e) {\n      var bounds = _this.timeRef.getBoundingClientRect();\n\n      var scrubberWidth = bounds.right - bounds.left;\n      var newCurrentTime = (e.clientX - bounds.left) / scrubberWidth * _this.props.totalTime;\n\n      _this.setState({\n        scrubbingWidth: null,\n        fakeTime: newCurrentTime\n      }, function () {\n        _this.props.skipTo(newCurrentTime, function () {\n          _this.setState({\n            fakeTime: null\n          });\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Time, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          screen = _this$props.screen,\n          currentTime = _this$props.currentTime,\n          totalTime = _this$props.totalTime,\n          channel = _this$props.channel,\n          history = _this$props.history;\n      var _this$state = this.state,\n          scrubbingWidth = _this$state.scrubbingWidth,\n          fakeTime = _this$state.fakeTime;\n      var renderTime = fakeTime || currentTime;\n      var secretWidth = 10000;\n      var widthValue = scrubbingWidth ? \"\".concat(scrubbingWidth, \"px\") : \"\".concat(renderTime / totalTime * 100, \"%\");\n      var width = \"calc(\".concat(secretWidth, \"px + \").concat(widthValue, \")\");\n      var style = widthValue ? {\n        width: width\n      } : {};\n      var minTime = history && Math.min.apply(Math, _toConsumableArray(history.map(function (x) {\n        return x.createdAt.getTime();\n      })));\n      var maxTime = history && Math.max.apply(Math, _toConsumableArray(history.map(function (x) {\n        return x.createdAt.getTime();\n      })));\n      console.log(minTime);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          onMouseDown: this.handleStart,\n          ref: function ref(input) {\n            _this2.timeRef = input;\n          },\n          className: classnames(\"time\", {\n            'screen-time': screen,\n            channel: channel\n          }),\n          children: /*#__PURE__*/_jsxDEV(Draggable, {\n            axis: \"x\",\n            onStop: this.handleStop,\n            position: scrubbingWidth ? null : {\n              x: 0,\n              y: 0\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-scrubber-container\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"time-scrubber\",\n                style: style\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 5\n        }, this), history && history.map(function (x) {\n          var percentage = (x.createdAt.getTime() - minTime) / (maxTime - minTime) * 100;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history-point\",\n            style: {\n              left: \"\".concat(percentage, \"%\")\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, _this2);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 4\n      }, this);\n    }\n  }]);\n\n  return Time;\n}(Component);\n\nexport { Time as default };","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/time.js"],"names":["Component","Draggable","classnames","Time","scrubbingWidth","fakeTime","e","console","log","clientX","timeRef","getBoundingClientRect","left","setState","bounds","scrubberWidth","right","newCurrentTime","props","totalTime","skipTo","screen","currentTime","channel","history","state","renderTime","secretWidth","widthValue","width","style","minTime","Math","min","map","x","createdAt","getTime","maxTime","max","handleStart","input","handleStop","y","percentage"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Draggable from 'react-draggable'\nimport classnames from 'classnames'\n\nexport default class Time extends Component {\n\tstate = {\n\t\tscrubbingWidth: null,\n\t\tfakeTime: null\n\t}\n\n\thandleStart = (e) => {\n\t\tconsole.log(e.clientX)\n\t\tconsole.log(this.timeRef.getBoundingClientRect().left)\n\n\t\tthis.setState({\n\t\t\tscrubbingWidth: e.clientX - this.timeRef.getBoundingClientRect().left\n\t\t})\n\t}\n\n\thandleStop = (e) => {\n\t\tconst bounds = this.timeRef.getBoundingClientRect()\n\t\tconst scrubberWidth = bounds.right - bounds.left\n\t\tconst newCurrentTime = ((e.clientX - bounds.left) / scrubberWidth) * this.props.totalTime\n\t\tthis.setState({ scrubbingWidth: null, fakeTime: newCurrentTime }, () => {\n\t\t\tthis.props.skipTo(newCurrentTime, () => {\n\t\t\t\tthis.setState({ fakeTime: null })\n\t\t\t})\n\t\t})\n\t\t\n\t}\n\n\trender() {\n\t\tconst { screen, currentTime, totalTime, channel, history } = this.props\n\t\tconst { scrubbingWidth, fakeTime } = this.state\n\t\tconst renderTime = fakeTime || currentTime\n\t\tconst secretWidth = 10000\n\t\tconst widthValue = scrubbingWidth ? `${scrubbingWidth}px` : `${((renderTime / totalTime) * 100)}%`\n\t\tconst width = `calc(${secretWidth}px + ${(widthValue)})`\n\t\tconst style = widthValue ? { width } : {}\n\n\t\tlet minTime = history && Math.min(...history.map(x => x.createdAt.getTime()))\n\t\tlet maxTime = history && Math.max(...history.map(x => x.createdAt.getTime()))\n\t\tconsole.log(minTime)\n\n\n\t\treturn (\n\t\t\t<div className=\"time-container\">\n\t\t\t\t<div onMouseDown={this.handleStart} ref={(input) => {this.timeRef = input}} className={classnames(\"time\", { 'screen-time': screen, channel })}>\n\t\t\t\t\t<Draggable\n\t\t\t\t\t\taxis=\"x\"\n\t\t\t\t\t\tonStop={this.handleStop}\n\t\t\t\t\t\tposition={scrubbingWidth ? null : {x: 0, y: 0}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"time-scrubber-container\">\n\t\t\t\t\t\t\t<div className=\"time-scrubber\" style={style} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Draggable>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\t\thistory && history.map(x => {\n\t\t\t\t\t\t\tconst percentage = ((x.createdAt.getTime() - minTime) / (maxTime - minTime)) * 100 \n\t\t\t\t\t\t\treturn <div className=\"history-point\" style={{ left: `${percentage}%`}} />\n\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}