{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/stereo.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport Helipad from '../lib/helipad/helipad.js';\nimport { Route } from '../lib/atlas/atlas.js';\nimport Left from './left.js';\nimport Mural from './mural.js';\nimport Right from './right.js';\nimport Upload from './upload.js';\nimport { VerseMap } from '../state/lyrics.js';\n\nconst mapTracksById = tracks => {\n  console.log(tracks);\n  let result = {};\n  tracks.forEach(track => {\n    result[track.id] = _objectSpread({}, track);\n    console.log(\"Map tracks by id .verses\");\n    console.log(result[track.id].verses);\n    result[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]);\n  });\n  return result;\n};\n\nexport default class Stereo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isPlaying: false,\n      song: null,\n      currentTrackTime: 0,\n      totalTrackTime: null,\n      scrubbingTrack: false,\n      scrubbingPlayer: false,\n      screenOn: false,\n      typing: false,\n      tracks: this.props.stream,\n      following: new Set(this.props.account.following ? this.props.account.following.map(x => x.artistId) : []),\n      tracksById: mapTracksById(this.props.stream.concat(this.props.history.map(x => x.track))),\n      queue: [],\n      // list of track ids\\\n      defaultQueue: [],\n      dragTrackId: null,\n      nightMode: true // TODO: move to a global store.\n\n    });\n\n    _defineProperty(this, \"timeAnimationInterval\", null);\n\n    _defineProperty(this, \"play\", (song, source = \"STREAM\", ref = null) => {\n      const trackRef = ref || this.state.trackRef;\n      let screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n\n      if (this.state.song && song.id === this.state.song.id) {\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: screenRef ? screenRef.currentTime : trackRef.currentTrackTime\n        }, () => {\n          screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n          screenRef && screenRef.play();\n          trackRef && trackRef.play();\n          this.animateTime();\n        });\n      } else {\n        this.savePlayForHistory(song);\n        clearInterval(this.timeAnimationInterval);\n\n        if (trackRef) {\n          trackRef.pause();\n          trackRef.currentTime = 0;\n        }\n\n        if (source === 'STREAM') {// set default queue.\n        }\n\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: 0,\n          song,\n          trackRef: ref\n        }, () => {\n          screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n\n          if (screenRef) {\n            screenRef.play();\n            screenRef.onended = this.playNextInQueue;\n          }\n\n          ref && ref.play();\n          this.animateTime();\n          this.setState({\n            totalTrackTime: screenRef ? screenRef.duration : trackRef.duration\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"savePlayForHistory\", song => {\n      fetch(`/api/history/record_play`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          trackId: song.id,\n          accountId: this.props.account.accountId\n        })\n      }).then(res => {\n        res.json().then(body => {\n          return;\n        });\n      });\n    });\n\n    _defineProperty(this, \"playNextInQueue\", () => {\n      const {\n        queue,\n        tracksById\n      } = this.state;\n\n      if (queue.length > 0) {\n        this.play(tracksById[queue.shift()], 'QUEUE');\n        this.setState({\n          queue\n        });\n      }\n    });\n\n    _defineProperty(this, \"playQueueTrackByIndex\", i => () => {\n      let {\n        queue,\n        tracksById\n      } = this.state;\n      this.play(tracksById[queue[i]], 'QUEUE');\n      this.setState({\n        queue: queue.slice(i + 1)\n      });\n    });\n\n    _defineProperty(this, \"animateTime\", () => {\n      const {\n        song\n      } = this.state;\n      const ref = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n      this.timeAnimationInterval = setInterval(() => {\n        this.setState({\n          currentTrackTime: ref.currentTime,\n          totalTrackTime: ref.duration\n        });\n      }, 40);\n    });\n\n    _defineProperty(this, \"stopTimeAnimation\", () => {\n      clearInterval(this.timeAnimationInterval);\n    });\n\n    _defineProperty(this, \"pause\", (mediaRef = null) => {\n      const {\n        song,\n        trackRef\n      } = this.state;\n      let screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n      this.setState({\n        isPlaying: false\n      }, () => {\n        screenRef.pause();\n        trackRef && trackRef.pause();\n      });\n    });\n\n    _defineProperty(this, \"toggle\", () => {\n      this.state.isPlaying ? this.pause() : this.play(this.state.song);\n    });\n\n    _defineProperty(this, \"beginScrub\", () => {\n      this.stopTimeAnimation();\n      this.setState({\n        scrubbing: true\n      });\n    });\n\n    _defineProperty(this, \"endScub\", () => {\n      this.setState({\n        scrubbing: false\n      });\n    });\n\n    _defineProperty(this, \"skipTo\", (time, cb = () => {}) => {\n      const {\n        song,\n        trackRef\n      } = this.state;\n      let screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef;\n\n      if (trackRef) {\n        trackRef.currentTime = time;\n      }\n\n      screenRef.currentTime = time;\n      this.setState({\n        currentTrackTime: time\n      }, cb);\n    });\n\n    _defineProperty(this, \"turnScreenOn\", () => this.setState({\n      screenOn: true\n    }));\n\n    _defineProperty(this, \"turnScreenOff\", () => this.setState({\n      screenOn: false\n    }));\n\n    _defineProperty(this, \"toggleScreen\", () => this.setState({\n      screenOn: !this.state.screenOn\n    }));\n\n    _defineProperty(this, \"handleSpacebar\", e => {\n      if (e.key === ' ' && !this.state.typing) {\n        e.preventDefault();\n        this.toggle();\n      }\n    });\n\n    _defineProperty(this, \"addVerse\", (verse, trackId) => {\n      const nextTracksById = _objectSpread({}, this.state.tracksById);\n\n      nextTracksById[trackid].verses.insert(verse);\n      this.setState({\n        tracksById: nextTracksById\n      }, () => this.syncTracks());\n    });\n\n    _defineProperty(this, \"syncSteamState\", () => {\n      const nextStream = this.state.tracks.map(x => this.state.tracksById[x.id]);\n      this.setState({\n        tracks: nextStream\n      });\n    });\n\n    _defineProperty(this, \"addToQueue\", id => {\n      this.setState({\n        queue: [...this.state.queue, id]\n      });\n    });\n\n    _defineProperty(this, \"startTrackDragging\", id => {\n      this.setState({\n        dragTrackId: id\n      });\n    });\n\n    _defineProperty(this, \"stopTrackDragging\", (id, e) => {\n      this.setState({\n        dragTrackId: null\n      });\n      const queueRect = this.left.queue.queueDropzone.getBoundingClientRect();\n\n      if (queueRect.left <= e.clientX && e.clientX <= queueRect.right && queueRect.top <= e.clientY && e.clientY <= queueRect.bottom) {\n        this.addToQueue(id);\n      }\n    });\n\n    _defineProperty(this, \"follow\", follow => {\n      const nextFollowing = _objectSpread({}, this.state.following);\n\n      nextFollowing.add(follow.artistId);\n      this.setState({\n        following: nextFollowing\n      });\n    });\n\n    _defineProperty(this, \"unfollow\", unfollow => {\n      const nextFollowing = _objectSpread({}, this.state.following);\n\n      nextFollowing.remove(unfollow.artistId);\n      this.setState({\n        following: nextFollowing\n      });\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => this.handleSpacebar(e));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      following: new Set(nextProps.account.following ? nextProps.account.following.map(x => x.artistId) : [])\n    });\n  }\n\n  render() {\n    const {\n      song,\n      isPlaying,\n      currentTrackTime,\n      totalTrackTime,\n      screenOn,\n      tracks,\n      dragTrackId,\n      nightMode,\n      following\n    } = this.state;\n    const {\n      signedIn,\n      startSession,\n      stream,\n      account,\n      artist,\n      history,\n      acc\n    } = this.props;\n    const realStream = tracks || stream;\n    const playingVideo = song && song.type === 'VIDEO';\n    console.log(history);\n    return /*#__PURE__*/_jsxDEV(Helipad, {\n      className: \"page-outer-container\",\n      onKeyDown: this.handleSpacebar,\n      modal: /*#__PURE__*/_jsxDEV(Upload, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 85\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('page-content', {\n          center: !signedIn\n        }),\n        children: [screenOn && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classnames('left', 'fake', {\n            wide: playingVideo\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(Left, {\n          ref: \"left\",\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          nowPlaying: song && this.state.tracksById[song.id],\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          startSession: startSession,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          toggleScreen: this.toggleScreen,\n          screenOn: screenOn,\n          account: account,\n          artist: artist,\n          setTyping: value => this.setState({\n            typing: value\n          }),\n          addVerse: this.addVerse,\n          dragTrackId: dragTrackId,\n          addToQueue: this.addToQueue,\n          queueTracks: this.state.queue.map(id => this.state.tracksById[id]),\n          stopTrackDragging: this.stopTrackDragging,\n          playQueueTrackByIndex: this.playQueueTrackByIndex,\n          nightMode: nightMode,\n          playingVideo: playingVideo,\n          ref: input => {\n            this.left = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }, this), signedIn && /*#__PURE__*/_jsxDEV(Right, {\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          playingId: song && song.id,\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          stream: realStream,\n          account: account,\n          artist: artist,\n          startTrackDragging: this.startTrackDragging,\n          stopTrackDragging: this.stopTrackDragging,\n          history: history,\n          following: following,\n          follow: this.follow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"audio\",\n          src: song && song.audioUrl,\n          ref: input => {\n            this.audioRef = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/stereo.js"],"names":["Component","ReactDOM","classnames","Helipad","Route","Left","Mural","Right","Upload","VerseMap","mapTracksById","tracks","console","log","result","forEach","track","id","verses","Stereo","isPlaying","song","currentTrackTime","totalTrackTime","scrubbingTrack","scrubbingPlayer","screenOn","typing","props","stream","following","Set","account","map","x","artistId","tracksById","concat","history","queue","defaultQueue","dragTrackId","nightMode","source","ref","trackRef","state","screenRef","type","left","screen","videoRef","audioRef","setState","currentTime","play","animateTime","savePlayForHistory","clearInterval","timeAnimationInterval","pause","onended","playNextInQueue","duration","fetch","method","headers","body","JSON","stringify","trackId","accountId","then","res","json","length","shift","i","slice","setInterval","mediaRef","stopTimeAnimation","scrubbing","time","cb","e","key","preventDefault","toggle","verse","nextTracksById","trackid","insert","syncTracks","nextStream","queueRect","queueDropzone","getBoundingClientRect","clientX","right","top","clientY","bottom","addToQueue","follow","nextFollowing","add","unfollow","remove","componentDidMount","window","addEventListener","handleSpacebar","componentWillReceiveProps","nextProps","render","signedIn","startSession","artist","acc","realStream","playingVideo","center","wide","skipTo","toggleScreen","value","addVerse","stopTrackDragging","playQueueTrackByIndex","input","startTrackDragging","audioUrl"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport classnames from 'classnames'\nimport Helipad from '../lib/helipad/helipad.js'\nimport { Route } from '../lib/atlas/atlas.js' \n\nimport Left from './left.js'\nimport Mural from './mural.js'\nimport Right from './right.js'\nimport Upload from './upload.js'\n\nimport { VerseMap } from '../state/lyrics.js'\n\n\nconst mapTracksById = (tracks) => {\n\tconsole.log(tracks)\n\tlet result = {}\n\ttracks.forEach((track) => {\n\t\tresult[track.id] = {...track}\n\t\tconsole.log(\"Map tracks by id .verses\")\n\t\tconsole.log(result[track.id].verses)\n\t\tresult[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]) \n\t})\n\treturn result\n}\n\nexport default class Stereo extends Component {\n\n\tstate = {\n\t\tisPlaying: false,\n\t\tsong: null,\n\t\tcurrentTrackTime: 0,\n\t\ttotalTrackTime: null,\n\t\tscrubbingTrack: false,\n\t\tscrubbingPlayer: false,\n\t\tscreenOn: false,\n\t\ttyping: false,\n\t\ttracks: this.props.stream,\n\t\tfollowing: new Set(this.props.account.following ? this.props.account.following.map(x => x.artistId) : []),\n\t\ttracksById: mapTracksById(this.props.stream.concat(this.props.history.map(x => x.track))),\n\t\tqueue: [], // list of track ids\\\n\t\tdefaultQueue: [],\n\t\tdragTrackId: null,\n\t\tnightMode: true\n\t\t// TODO: move to a global store.\n\t}\n\n\ttimeAnimationInterval = null\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener('keydown', (e) => this.handleSpacebar(e));\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.setState({ \n\t\t\tfollowing: new Set(nextProps.account.following ? nextProps.account.following.map(x => x.artistId) : [])\n\t\t})\n\t}\n\n\tplay = (song, source=\"STREAM\", ref=null) => {\n\t\tconst trackRef = ref || this.state.trackRef\n\t\tlet screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tif (this.state.song && song.id === this.state.song.id) {\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: screenRef ? screenRef.currentTime : trackRef.currentTrackTime, \n\t\t\t}, () => {\n\t\t\t\tscreenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\t\t\tscreenRef && screenRef.play()\n\t\t\t\ttrackRef && trackRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t})\n\t\t} else {\n\t\t\tthis.savePlayForHistory(song)\n\t\t\tclearInterval(this.timeAnimationInterval)\n\t\t\tif (trackRef) {\n\t\t\t\ttrackRef.pause()\n\t\t\t\ttrackRef.currentTime = 0\n\t\t\t}\n\t\t\tif (source === 'STREAM') {\n\t\t\t\t// set default queue.\n\t\t\t}\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: 0, \n\t\t\t\tsong,\n\t\t\t\ttrackRef: ref\n\t\t\t}, () => {\n\t\t\t\tscreenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\t\t\tif (screenRef) {\n\t\t\t\t\tscreenRef.play()\n\t\t\t\t\tscreenRef.onended = this.playNextInQueue\n\t\t\t\t}\n\t\t\t\tref && ref.play()\n\t\t\t\tthis.animateTime()\n\t\t\t\tthis.setState({totalTrackTime: screenRef ? screenRef.duration : trackRef.duration})\n\t\t\t})\n\t\t}\n\n\t}\n\n\tsavePlayForHistory = (song) => {\n\t\tfetch(`/api/history/record_play`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({ \n\t\t\t\ttrackId: song.id,\n\t\t\t\taccountId: this.props.account.accountId\n\t\t\t})\n\t\t}).then((res) => {\n\t\t\tres.json().then(body => {\n\t\t\t\treturn\n\t\t\t})\n\t\t})\n\t}\n\n\tplayNextInQueue = () => {\n\t\tconst { queue, tracksById } = this.state\n\t\tif (queue.length > 0) {\n\t\t\tthis.play(tracksById[queue.shift()], 'QUEUE')\n\t\t\tthis.setState({ queue })\n\t\t}\n\t}\n\n\tplayQueueTrackByIndex = (i) => () => {\n\t\tlet { queue, tracksById } = this.state\n\t\tthis.play(tracksById[queue[i]], 'QUEUE')\n\t\tthis.setState({ queue: queue.slice(i + 1) })\n\t}\n\n\tanimateTime = () => {\n\t\tconst { song } = this.state\n\t\tconst ref = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tthis.timeAnimationInterval = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tcurrentTrackTime: ref.currentTime,\n\t\t\t\ttotalTrackTime: ref.duration\n\t\t\t})\n\t\t}, 40)\n\t}\n\n\tstopTimeAnimation = () => {\n\t\tclearInterval(this.timeAnimationInterval)\n\t}\n\n\tpause = (mediaRef=null) => {\n\t\tconst { song, trackRef } = this.state\n\t\tlet screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tthis.setState({ isPlaying: false }, () => {\n\t\t\tscreenRef.pause()\n\t\t\ttrackRef && trackRef.pause()\n\t\t})\n\t}\n\n\ttoggle = () => {\n\t\tthis.state.isPlaying ? this.pause() : this.play(this.state.song) \n\t}\n\n\tbeginScrub = () => {\n\t\tthis.stopTimeAnimation()\n\t\tthis.setState({ scrubbing: true })\n\t}\n\n\tendScub = () => {\n\t\tthis.setState({ scrubbing: false })\n\t}\n\n\tskipTo = (time, cb = () => {}) => {\n\t\tconst { song, trackRef } = this.state\n\t\tlet screenRef = song.type === 'VIDEO' ? this.left.screen.videoRef : this.audioRef\n\t\tif (trackRef) { \n\t\t\ttrackRef.currentTime = time\n\t\t}\n\t\tscreenRef.currentTime = time\n\t\tthis.setState({ currentTrackTime: time }, cb)\n\t}\n\n\tturnScreenOn = () => this.setState({ screenOn: true })\n\n\tturnScreenOff = () => this.setState({ screenOn: false })\n\n\ttoggleScreen = () => this.setState({ screenOn: !this.state.screenOn })\n\n\thandleSpacebar = (e) => {\n\t\tif (e.key === ' ' && ! this.state.typing) {\n\t\t\te.preventDefault()\n\t\t\tthis.toggle()\n\t\t}\n\t}\n\n\taddVerse = (verse, trackId) => {\n\t\tconst nextTracksById = {...this.state.tracksById}\n\t\tnextTracksById[trackid].verses.insert(verse)\n\t\tthis.setState({\n\t\t\ttracksById: nextTracksById\n\t\t}, () => this.syncTracks())\n\t}\n\n\tsyncSteamState = () => {\n\t\tconst nextStream = this.state.tracks.map(x => (\n\t\t\tthis.state.tracksById[x.id]\n\t\t))\n\t\tthis.setState({\n\t\t\ttracks: nextStream\n\t\t})\n\t}\n\n\taddToQueue = (id) => {\n\t\tthis.setState({queue: [...this.state.queue, id]})\n\t}\n\n\tstartTrackDragging = (id) => {\n\t\tthis.setState({ dragTrackId: id })\n\t}\n\n\tstopTrackDragging = (id, e) => {\n\t\tthis.setState({ dragTrackId: null })\n\t\tconst queueRect = this.left.queue.queueDropzone.getBoundingClientRect()\n\t\tif (queueRect.left <= e.clientX && \n\t\t\te.clientX<= queueRect.right && \n\t\t\tqueueRect.top <= e.clientY && \n\t\t\te.clientY <= queueRect.bottom) {\n\t\t\t\tthis.addToQueue(id)\t\n\t\t}\n\t}\n\n\tfollow = (follow) => {\n\t\tconst nextFollowing = {...this.state.following}\n\t\tnextFollowing.add(follow.artistId)\n\t\tthis.setState({ following: nextFollowing })\n\t}\n\n\tunfollow = (unfollow) => {\n\t\tconst nextFollowing = {...this.state.following}\n\t\tnextFollowing.remove(unfollow.artistId)\n\t\tthis.setState({ following: nextFollowing })\n\t}\n\n\trender() {\n\t\tconst { song, isPlaying, currentTrackTime, totalTrackTime, screenOn, tracks, dragTrackId, nightMode, following } = this.state\n\t\tconst { signedIn, startSession, stream, account, artist, history, acc } = this.props\n\n\t\tconst realStream = tracks || stream\n\t\tconst playingVideo = song && song.type === 'VIDEO'\n\t\tconsole.log(history)\n\n\t\treturn (\n\t\t\t<Helipad className=\"page-outer-container\" onKeyDown={this.handleSpacebar} modal={<Upload />}>\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<video autoPlay muted loop className=\"background-video\">\n\t\t\t\t\t\t<source type=\"video/mp4\" src=\"test_data/video/corn.mov\" />\n\t\t\t\t\t</video>\n\t\t\t\t*/}\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<div className=\"background-video-shade\" />\n\t\t\t\t*/}\n{/*\t\t\t\t<Route path=\"/[artist]\">\n\t\t\t\t\t<Mural src=\"test_data/artistsbigbirb.jpg\" />\n\t\t\t\t</Route>*/}\n\t\t\t\t{/*<div className=\"mural-container\">\n\t\t\t\t\t{ screenOn && <div className=\"mural-fake\" /> }\t\n\t\t\t\t\t<Mural />\n\t\t\t\t</div>*/}\n\t\t\t\t<div className={classnames('page-content', { center: !signedIn })}>\t\n\t\t\t\t\t{ screenOn && <div className={classnames('left', 'fake', { wide: playingVideo })} /> }\t\t\n\t\t    \t\t<Left ref=\"left\" \n\t\t    \t\t\ttoggle={this.toggle} \n\t\t    \t\t\tplay={this.play} \n\t\t    \t\t\tpause={this.pause} \n\t\t    \t\t\tnowPlaying={song && this.state.tracksById[song.id]}\n\t\t    \t\t\tisPlaying={isPlaying}\n\t\t    \t\t\tsignedIn={signedIn}\n\t\t    \t\t\tstartSession={startSession}\n\t\t    \t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\tskipTo={this.skipTo}\n\t\t    \t\t\ttoggleScreen={this.toggleScreen}\n\t\t    \t\t\tscreenOn={screenOn}\n\t\t    \t\t\taccount={account} \n\t\t    \t\t\tartist={artist}\n\t\t    \t\t\tsetTyping={(value) => this.setState({ typing: value })}\n\t\t    \t\t\taddVerse={this.addVerse}\n\t\t    \t\t\tdragTrackId={dragTrackId}\n\t\t    \t\t\taddToQueue={this.addToQueue}\n\t\t    \t\t\tqueueTracks={this.state.queue.map((id) => this.state.tracksById[id])}\n\t\t    \t\t\tstopTrackDragging={this.stopTrackDragging}\n\t\t    \t\t\tplayQueueTrackByIndex={this.playQueueTrackByIndex}\n\t\t    \t\t\tnightMode={nightMode}\n\t\t    \t\t\tplayingVideo={playingVideo}\n\t\t    \t\t\tref={(input) => {this.left = input}}\n\n\t\t    \t\t/>\n\t\t    \t\t{ \n\t\t    \t\t\tsignedIn && \n\t\t    \t\t\t<Right toggle={this.toggle} \n\t\t    \t\t\t\tplay={this.play} \n\t\t    \t\t\t\tpause={this.pause} \n\t\t    \t\t\t\tplayingId={song && song.id} \n\t\t    \t\t\t\tisPlaying={isPlaying}\n\t\t    \t\t\t\tsignedIn={signedIn}\n\t\t    \t\t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\t\tskipTo={this.skipTo}\n\t\t    \t\t\t\tstream={realStream}\n\t\t    \t\t\t\taccount={account}\n\t\t    \t\t\t\tartist={artist}\n\t\t    \t\t\t\tstartTrackDragging={this.startTrackDragging}\n\t\t    \t\t\t\tstopTrackDragging={this.stopTrackDragging}\n\t\t    \t\t\t\thistory={history}\n\t\t    \t\t\t\tfollowing={following}\n\t\t    \t\t\t\tfollow={this.follow} />\n\t\t    \t\t}\n\t\t\t\t\t<audio id=\"audio\" src={song && song.audioUrl} ref={(input) => {this.audioRef = input}} />\n\t\t\t\t</div>\n\t\t\t</Helipad>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}