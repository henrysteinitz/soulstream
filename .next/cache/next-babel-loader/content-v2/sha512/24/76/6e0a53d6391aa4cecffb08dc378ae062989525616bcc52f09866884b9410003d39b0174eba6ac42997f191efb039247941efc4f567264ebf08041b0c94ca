{"ast":null,"code":"import prisma from '../../../lib/prisma.js';\n\nconst getComments = async (req, res) => {\n  const {\n    trackId\n  } = req.params;\n  const comments = await prisma.trackComment.findAll({\n    trackId\n  });\n  console.log(comments);\n  res.json(comments);\n};\n\nconst postComment = async (req, res) => {\n  const {\n    authorId,\n    trackId,\n    sessionToken,\n    message\n  } = req.body;\n  const comment = await prisma.trackComment.create({\n    data: {\n      message,\n      duration: 5,\n      track: {\n        connect: {\n          id: trackId\n        }\n      },\n      account: {\n        connect: {\n          id: authorId\n        }\n      }\n    }\n  });\n  res.json(comment);\n};\n\nexport default ((req, res) => {\n  // TODO: create isAêthenticated helper\n  if (req.method === 'GET') {\n    getComments(req, res);\n  } else if (req.method === 'POST') {\n    postComment(req, res);\n  } else {\n    console.log('Invalid request method.');\n  }\n});","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/pages/api/crowd/comments.js"],"names":["prisma","getComments","req","res","trackId","params","comments","trackComment","findAll","console","log","json","postComment","authorId","sessionToken","message","body","comment","create","data","duration","track","connect","id","account","method"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,wBAAnB;;AAGA,MAAMC,WAAW,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAcF,GAAG,CAACG,MAAxB;AACA,QAAMC,QAAQ,GAAG,MAAMN,MAAM,CAACO,YAAP,CAAoBC,OAApB,CAA4B;AAAEJ,IAAAA;AAAF,GAA5B,CAAvB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAH,EAAAA,GAAG,CAACQ,IAAJ,CAASL,QAAT;AACD,CALD;;AAOA,MAAMM,WAAW,GAAG,OAAOV,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAM;AAAEU,IAAAA,QAAF;AAAYT,IAAAA,OAAZ;AAAqBU,IAAAA,YAArB;AAAmCC,IAAAA;AAAnC,MAA+Cb,GAAG,CAACc,IAAzD;AACA,QAAMC,OAAO,GAAG,MAAMjB,MAAM,CAACO,YAAP,CAAoBW,MAApB,CAA2B;AAC/CC,IAAAA,IAAI,EAAE;AACJJ,MAAAA,OADI;AAEJK,MAAAA,QAAQ,EAAE,CAFN;AAGJC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,EAAE,EAAEnB;AAAN;AADJ,OAHH;AAMJoB,MAAAA,OAAO,EAAE;AACPF,QAAAA,OAAO,EAAE;AAAEC,UAAAA,EAAE,EAAEV;AAAN;AADF;AANL;AADyC,GAA3B,CAAtB;AAYAV,EAAAA,GAAG,CAACQ,IAAJ,CAASM,OAAT;AACD,CAfD;;AAiBA,gBAAe,CAACf,GAAD,EAAMC,GAAN,KAAc;AAC3B;AACA,MAAID,GAAG,CAACuB,MAAJ,KAAe,KAAnB,EAA0B;AACxBxB,IAAAA,WAAW,CAACC,GAAD,EAAMC,GAAN,CAAX;AACD,GAFD,MAEO,IAAID,GAAG,CAACuB,MAAJ,KAAe,MAAnB,EAA2B;AAChCb,IAAAA,WAAW,CAACV,GAAD,EAAMC,GAAN,CAAX;AACD,GAFM,MAEA;AACLM,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,CATD","sourcesContent":["import prisma from '../../../lib/prisma.js';\n\n\nconst getComments = async (req, res) => {\n  const { trackId } = req.params \n  const comments = await prisma.trackComment.findAll({ trackId })\n  console.log(comments)\n  res.json(comments)\n}\n\nconst postComment = async (req, res) => {\n  const { authorId, trackId, sessionToken, message } = req.body;\n  const comment = await prisma.trackComment.create({\n    data: { \n      message,\n      duration: 5,\n      track: {\n        connect: { id: trackId }\n      },\n      account: {\n        connect: { id: authorId }\n      }\n    },\n  })\n  res.json(comment)\n}\n\nexport default (req, res) => {\n  // TODO: create isAêthenticated helper\n  if (req.method === 'GET') {\n    getComments(req, res)\n  } else if (req.method === 'POST') {\n    postComment(req, res)\n  } else {\n    console.log('Invalid request method.')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}