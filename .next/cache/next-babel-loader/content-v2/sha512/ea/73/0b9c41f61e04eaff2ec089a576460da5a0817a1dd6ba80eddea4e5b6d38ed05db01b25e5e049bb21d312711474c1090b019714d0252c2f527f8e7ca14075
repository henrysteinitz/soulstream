{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/time.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport Draggable from 'react-draggable';\nimport classnames from 'classnames';\nexport default class Time extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      scrubbingWidth: null,\n      fakeTime: null\n    });\n\n    _defineProperty(this, \"handleStart\", e => {\n      console.log(e.clientX);\n      console.log(this.timeRef.getBoundingClientRect().left);\n      this.setState({\n        scrubbingWidth: e.clientX - this.timeRef.getBoundingClientRect().left\n      });\n    });\n\n    _defineProperty(this, \"handleStop\", e => {\n      const bounds = this.timeRef.getBoundingClientRect();\n      const scrubberWidth = bounds.right - bounds.left;\n      const newCurrentTime = (e.clientX - bounds.left) / scrubberWidth * this.props.totalTime;\n      this.setState({\n        scrubbingWidth: null,\n        fakeTime: newCurrentTime\n      }, () => {\n        this.props.skipTo(newCurrentTime, () => {\n          this.setState({\n            fakeTime: null\n          });\n        });\n      });\n    });\n  }\n\n  render() {\n    const {\n      screen,\n      currentTime,\n      totalTime,\n      channel,\n      history\n    } = this.props;\n    const {\n      scrubbingWidth,\n      fakeTime\n    } = this.state;\n    const renderTime = fakeTime || currentTime;\n    const secretWidth = 10000;\n    const widthValue = scrubbingWidth ? `${scrubbingWidth}px` : `${renderTime / totalTime * 100}%`;\n    const width = `calc(${secretWidth}px + ${widthValue})`;\n    const style = widthValue ? {\n      width\n    } : {};\n    let minTime = history && Math.min(...history.map(x => x.createdAt.getTime()));\n    let maxTime = history && Math.max(...history.map(x => x.createdAt.getTime()));\n    console.log(minTime);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onMouseDown: this.handleStart,\n        ref: input => {\n          this.timeRef = input;\n        },\n        className: classnames(\"time\", {\n          'screen-time': screen,\n          channel,\n          track: !channel\n        }),\n        children: /*#__PURE__*/_jsxDEV(Draggable, {\n          axis: \"x\",\n          onStop: this.handleStop,\n          position: scrubbingWidth ? null : {\n            x: 0,\n            y: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-scrubber-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time-scrubber\",\n              style: style\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 8\n            }, this), history && history.map(x => {\n              const percentage = (x.createdAt.getTime() - minTime) / (maxTime - minTime) * 100;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"history-point\",\n                style: {\n                  left: `${percentage}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this), history && history.map(x => {\n        const percentage = (maxTime - x.createdAt.getTime()) / (maxTime - minTime) * 100;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"history-point\",\n          style: {\n            left: `${percentage}%`\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: x.track.artUrl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 8\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/time.js"],"names":["Component","Draggable","classnames","Time","scrubbingWidth","fakeTime","e","console","log","clientX","timeRef","getBoundingClientRect","left","setState","bounds","scrubberWidth","right","newCurrentTime","props","totalTime","skipTo","render","screen","currentTime","channel","history","state","renderTime","secretWidth","widthValue","width","style","minTime","Math","min","map","x","createdAt","getTime","maxTime","max","handleStart","input","track","handleStop","y","percentage","artUrl"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Draggable from 'react-draggable'\nimport classnames from 'classnames'\n\nexport default class Time extends Component {\n\tstate = {\n\t\tscrubbingWidth: null,\n\t\tfakeTime: null\n\t}\n\n\thandleStart = (e) => {\n\t\tconsole.log(e.clientX)\n\t\tconsole.log(this.timeRef.getBoundingClientRect().left)\n\n\t\tthis.setState({\n\t\t\tscrubbingWidth: e.clientX - this.timeRef.getBoundingClientRect().left\n\t\t})\n\t}\n\n\thandleStop = (e) => {\n\t\tconst bounds = this.timeRef.getBoundingClientRect()\n\t\tconst scrubberWidth = bounds.right - bounds.left\n\t\tconst newCurrentTime = ((e.clientX - bounds.left) / scrubberWidth) * this.props.totalTime\n\t\tthis.setState({ scrubbingWidth: null, fakeTime: newCurrentTime }, () => {\n\t\t\tthis.props.skipTo(newCurrentTime, () => {\n\t\t\t\tthis.setState({ fakeTime: null })\n\t\t\t})\n\t\t})\n\t\t\n\t}\n\n\trender() {\n\t\tconst { screen, currentTime, totalTime, channel, history } = this.props\n\t\tconst { scrubbingWidth, fakeTime } = this.state\n\t\tconst renderTime = fakeTime || currentTime\n\t\tconst secretWidth = 10000\n\t\tconst widthValue = scrubbingWidth ? `${scrubbingWidth}px` : `${((renderTime / totalTime) * 100)}%`\n\t\tconst width = `calc(${secretWidth}px + ${(widthValue)})`\n\t\tconst style = widthValue ? { width } : {}\n\n\t\tlet minTime = history && Math.min(...history.map(x => x.createdAt.getTime()))\n\t\tlet maxTime = history && Math.max(...history.map(x => x.createdAt.getTime()))\n\t\tconsole.log(minTime)\n\n\n\t\treturn (\n\t\t\t<div className=\"time-container\">\n\t\t\t\t<div onMouseDown={this.handleStart} ref={(input) => {this.timeRef = input}} className={classnames(\"time\", { 'screen-time': screen, channel, track: !channel })}>\n\t\t\t\t\t<Draggable\n\t\t\t\t\t\taxis=\"x\"\n\t\t\t\t\t\tonStop={this.handleStop}\n\t\t\t\t\t\tposition={scrubbingWidth ? null : {x: 0, y: 0}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className=\"time-scrubber-container\">\n\t\t\t\t\t\t\t<div className=\"time-scrubber\" style={style} />\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\thistory && history.map(x => {\n\t\t\t\t\t\t\t\t\tconst percentage = ((x.createdAt.getTime() - minTime) / (maxTime - minTime)) * 100 \n\t\t\t\t\t\t\t\t\treturn <div className=\"history-point\" style={{ left: `${percentage}%`}} />\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Draggable>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\thistory && history.map(x => {\n\t\t\t\t\t\tconst percentage = ((maxTime - x.createdAt.getTime()) / (maxTime - minTime)) * 100 \n\t\t\t\t\t\treturn ( \n\t\t\t\t\t\t\t<div className=\"history-point\" style={{ left: `${percentage}%`}}>\n\t\t\t\t\t\t\t\t<img src={x.track.artUrl} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t\n\t\t\t</div>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}