{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/screen.js\",\n    _this2 = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport classnames from 'classnames';\nimport { Component } from 'react';\nimport { Route, AtlasProvider } from '../lib/atlas/atlas.js'; // import PropTypes from 'prop-types'\n\nimport Content from './content.js';\nimport Time from './time.js';\nvar MODES = {\n  'default': \"DEFAULT\",\n  'pocket': \"POCKET\"\n};\n\nvar ScreenWithAtlas = /*#__PURE__*/function (_Component) {\n  _inherits(ScreenWithAtlas, _Component);\n\n  var _super = _createSuper(ScreenWithAtlas);\n\n  function ScreenWithAtlas() {\n    var _this;\n\n    _classCallCheck(this, ScreenWithAtlas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      contentIsPaused: true,\n      mode: \"DEFAULT\"\n    });\n\n    return _this;\n  }\n\n  _createClass(ScreenWithAtlas, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          on = _this$props.on,\n          toggle = _this$props.toggle,\n          nowPlaying = _this$props.nowPlaying,\n          artist = _this$props.artist,\n          atlas = _this$props.atlas;\n      var onOrLocked = Atlas.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames(\"screen\", \"fullscreen\", {\n          \"off\": !on\n        }),\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Content, {\n            size: \"fullscreen\",\n            art: nowPlaying && nowPlaying.artUrl,\n            toggle: toggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/[artist]\",\n          children: /*#__PURE__*/_jsxDEV(Content, {\n            size: \"fullscreen\",\n            art: artist && artist.pictureUrl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 4\n      }, this);\n    }\n  }]);\n\n  return ScreenWithAtlas;\n}(Component);\n\nvar Screen = function Screen(props) {\n  return /*#__PURE__*/_jsxDEV(AtlasProvider, {\n    children: function children(atlas) {\n      /*#__PURE__*/\n      _jsxDEV(ScreenWithAtlas, _objectSpread({\n        atlas: atlas\n      }, props), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, _this2);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, _this2);\n};\n\n_c = Screen;\nexport default Screen; // Screen.propTypes = {\n//  \tsize: PropTypes.oneOf([\"full\"]),\n//  \tisCurrent: PropTypes.bool,\n// };\n// TODO\n// - take and render album art and album videos\n//   - consider allowing small album preview to be videos\n// - resize / minimize\n// - render and connect controls\n// - -\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/screen.js"],"names":["classnames","Component","Route","AtlasProvider","Content","Time","MODES","ScreenWithAtlas","contentIsPaused","mode","props","on","toggle","nowPlaying","artist","atlas","onOrLocked","Atlas","state","artUrl","pictureUrl","Screen"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,uBAArC,C,CACA;;AAEA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,IAAMC,KAAK,GAAG;AACb,aAAW,SADE;AAEb,YAAU;AAFG,CAAd;;IAKMC,e;;;;;;;;;;;;;;;;4DAEG;AACPC,MAAAA,eAAe,EAAE,IADV;AAEPC,MAAAA,IAAI,EAAE;AAFC,K;;;;;;;6BAKC;AAAA,wBAC0C,KAAKC,KAD/C;AAAA,UACAC,EADA,eACAA,EADA;AAAA,UACIC,MADJ,eACIA,MADJ;AAAA,UACYC,UADZ,eACYA,UADZ;AAAA,UACwBC,MADxB,eACwBA,MADxB;AAAA,UACgCC,KADhC,eACgCA,KADhC;AAGR,UAAMC,UAAU,GAAGC,KAAK,CAACC,KAAzB;AAEA,0BACC;AAAK,QAAA,SAAS,EAAElB,UAAU,CAAC,QAAD,EAAW,YAAX,EAAyB;AAAC,iBAAO,CAACW;AAAT,SAAzB,CAA1B;AAAA,gCACC,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAA,iCACC,QAAC,OAAD;AAAS,YAAA,IAAI,EAAC,YAAd;AAA2B,YAAA,GAAG,EAAEE,UAAU,IAAIA,UAAU,CAACM,MAAzD;AAAiE,YAAA,MAAM,EAAEP;AAAzE;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBADD,eAIC,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,WAAZ;AAAA,iCACC,QAAC,OAAD;AAAS,YAAA,IAAI,EAAC,YAAd;AAA2B,YAAA,GAAG,EAAEE,MAAM,IAAIA,MAAM,CAACM;AAAjD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAUA;;;;EAtB4BnB,S;;AAyB9B,IAAMoB,MAAM,GAAG,SAATA,MAAS,CAACX,KAAD,EAAW;AACzB,sBACC,QAAC,aAAD;AAAA,cACE,kBAACK,KAAD,EAAW;AACX;AAAA,cAAC,eAAD;AAAiB,QAAA,KAAK,EAAEA;AAAxB,SAAmCL,KAAnC;AAAA;AAAA;AAAA;AAAA;AACA;AAHF;AAAA;AAAA;AAAA;AAAA,YADD;AAOA,CARD;;KAAMW,M;AAUN,eAAeA,MAAf,C,CAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import classnames from 'classnames'\nimport { Component } from 'react'\nimport { Route, AtlasProvider } from '../lib/atlas/atlas.js'\n// import PropTypes from 'prop-types'\n\nimport Content from './content.js'\nimport Time from './time.js'\n\nconst MODES = {\n\t'default': \"DEFAULT\",\n\t'pocket': \"POCKET\"\n}\n\nclass ScreenWithAtlas extends Component {\n\n\tstate = {\n\t\tcontentIsPaused: true,\n\t\tmode: \"DEFAULT\",\n\t}\n\t\n\trender() {\n\t\tconst { on, toggle, nowPlaying, artist, atlas } = this.props;\n\n\t\tconst onOrLocked = Atlas.state\n\n\t\treturn (\n\t\t\t<div className={classnames(\"screen\", \"fullscreen\", {\"off\": !on})} >\n\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t<Content size=\"fullscreen\" art={nowPlaying && nowPlaying.artUrl} toggle={toggle} />\n\t\t\t\t</Route> \n\t\t\t\t<Route path=\"/[artist]\">\n\t\t\t\t\t<Content size=\"fullscreen\" art={artist && artist.pictureUrl} />\n\t\t\t\t</Route>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst Screen = (props) => {\n\treturn (\n\t\t<AtlasProvider>\n\t\t\t{(atlas) => {\n\t\t\t\t<ScreenWithAtlas atlas={atlas} {...props} />\n\t\t\t}}\n\t\t</AtlasProvider>\n\t)\n}\n\nexport default Screen\n\n\n// Screen.propTypes = {\n//  \tsize: PropTypes.oneOf([\"full\"]),\n//  \tisCurrent: PropTypes.bool,\n// };\n\n\n\n\n// TODO\n// - take and render album art and album videos\n//   - consider allowing small album preview to be videos\n// - resize / minimize\n// - render and connect controls\n// - -"]},"metadata":{},"sourceType":"module"}