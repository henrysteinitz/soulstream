{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/lib/atlas/atlas.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext } from 'react';\n\nclass AtlasClass {\n  constructor(preHistory = []) {\n    _defineProperty(this, \"push\", path => {\n      if (path[0] !== '/') {\n        path = '/' + path;\n      }\n\n      this.history.push(path);\n      window.href = path;\n      this.now += 1;\n    });\n\n    _defineProperty(this, \"back\", () => this.now -= 1);\n\n    _defineProperty(this, \"forward\", () => this.now += 1);\n\n    _defineProperty(this, \"path\", () => this.history[now]);\n\n    _defineProperty(this, \"context\", () => this.context);\n\n    _defineProperty(this, \"provider\", () => this.context.Provider);\n\n    _defineProperty(this, \"consumer\", () => this.context.Consumer);\n\n    this.history = preHistory;\n    this.now = preHistory.length - 1;\n    this.context = /*#__PURE__*/React.createContext(this);\n  }\n\n}\n\nconst Atlas = new AtlasClass();\nexport default Atlas;\nexport const AtlasProvider = Atlas.provider();\nexport const AtlasConsumer = Atlas.consumer();\nexport const Route = ({\n  path,\n  children\n}) => {\n  const atlas = useContext(); // TODO: Support inexact routes\t\n\n  if (atlas.path() !== path) {\n    return null;\n  }\n\n  return children;\n};\n\nconst handleClick = (atlas, path) => {\n  atlas.push(path);\n};\n\nexport const Link = ({\n  to,\n  children\n}) => {\n  const atlas = useContext();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => handleClick(atlas, to),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n};","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/lib/atlas/atlas.js"],"names":["React","useContext","AtlasClass","constructor","preHistory","path","history","push","window","href","now","context","Provider","Consumer","length","createContext","Atlas","AtlasProvider","provider","AtlasConsumer","consumer","Route","children","atlas","handleClick","Link","to"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,MAAMC,UAAN,CAAiB;AAChBC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EAAkB;AAAA,kCAMrBC,IAAD,IAAU;AAChB,UAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACpBA,QAAAA,IAAI,GAAG,MAAMA,IAAb;AACA;;AACD,WAAKC,OAAL,CAAaC,IAAb,CAAkBF,IAAlB;AACAG,MAAAA,MAAM,CAACC,IAAP,GAAcJ,IAAd;AACA,WAAKK,GAAL,IAAY,CAAZ;AACA,KAb4B;;AAAA,kCAetB,MAAM,KAAKA,GAAL,IAAY,CAfI;;AAAA,qCAiBnB,MAAM,KAAKA,GAAL,IAAY,CAjBC;;AAAA,kCAmBtB,MAAM,KAAKJ,OAAL,CAAaI,GAAb,CAnBgB;;AAAA,qCAqBnB,MAAM,KAAKC,OArBQ;;AAAA,sCAuBlB,MAAM,KAAKA,OAAL,CAAaC,QAvBD;;AAAA,sCAyBlB,MAAM,KAAKD,OAAL,CAAaE,QAzBD;;AAC5B,SAAKP,OAAL,GAAeF,UAAf;AACA,SAAKM,GAAL,GAAWN,UAAU,CAACU,MAAX,GAAoB,CAA/B;AACA,SAAKH,OAAL,gBAAeX,KAAK,CAACe,aAAN,CAAoB,IAApB,CAAf;AACA;;AALe;;AA6BjB,MAAMC,KAAK,GAAG,IAAId,UAAJ,EAAd;AACA,eAAec,KAAf;AACA,OAAO,MAAMC,aAAa,GAAGD,KAAK,CAACE,QAAN,EAAtB;AACP,OAAO,MAAMC,aAAa,GAAGH,KAAK,CAACI,QAAN,EAAtB;AAEP,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEhB,EAAAA,IAAF;AAAQiB,EAAAA;AAAR,CAAD,KAAwB;AAC5C,QAAMC,KAAK,GAAGtB,UAAU,EAAxB,CAD4C,CAG5C;;AACA,MAAIsB,KAAK,CAAClB,IAAN,OAAiBA,IAArB,EAA2B;AAC1B,WAAO,IAAP;AACA;;AAED,SAAOiB,QAAP;AACA,CATM;;AAWP,MAAME,WAAW,GAAG,CAACD,KAAD,EAAQlB,IAAR,KAAiB;AACpCkB,EAAAA,KAAK,CAAChB,IAAN,CAAWF,IAAX;AACA,CAFD;;AAIA,OAAO,MAAMoB,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMJ,EAAAA;AAAN,CAAD,KAAsB;AACzC,QAAMC,KAAK,GAAGtB,UAAU,EAAxB;AACA,sBACC;AAAK,IAAA,OAAO,EAAE,MAAMuB,WAAW,CAACD,KAAD,EAAQG,EAAR,CAA/B;AAAA,cACGJ;AADH;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAPM","sourcesContent":["import React, { useContext } from 'react'\n\nclass AtlasClass {\n\tconstructor(preHistory = []) {\n\t\tthis.history = preHistory\n\t\tthis.now = preHistory.length - 1\n\t\tthis.context = React.createContext(this)\n\t}\n\n\tpush = (path) => {\n\t\tif (path[0] !== '/') {\n\t\t\tpath = '/' + path\n\t\t}\n\t\tthis.history.push(path)\n\t\twindow.href = path\n\t\tthis.now += 1\n\t}\t\n\n\tback = () => this.now -= 1\n\n\tforward = () => this.now += 1\n\n\tpath = () => this.history[now]\n\n\tcontext = () => this.context\n\n\tprovider = () => this.context.Provider\n\n\tconsumer = () => this.context.Consumer\n}\n\nconst Atlas = new AtlasClass()\nexport default Atlas\nexport const AtlasProvider = Atlas.provider()\nexport const AtlasConsumer = Atlas.consumer()\n\nexport const Route = ({ path, children }) => {\n\tconst atlas = useContext()\n\t\n\t// TODO: Support inexact routes\t\n\tif (atlas.path() !== path) {\n\t\treturn null\n\t}\n\n\treturn children\n}\n\nconst handleClick = (atlas, path) => {\n\tatlas.push(path)\n}\n\nexport const Link = ({ to, children }) => {\n\tconst atlas = useContext()\n\treturn (\n\t\t<div onClick={() => handleClick(atlas, to)}>\n\t\t\t{ children }\n\t\t</div>\n\t)\n}\n\n"]},"metadata":{},"sourceType":"module"}