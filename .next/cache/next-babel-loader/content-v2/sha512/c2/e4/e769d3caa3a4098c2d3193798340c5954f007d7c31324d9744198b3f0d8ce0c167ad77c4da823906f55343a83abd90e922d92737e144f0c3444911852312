{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/stereo.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport Helipad from '../lib/helipad/helipad.js';\nimport { Route } from '../lib/atlas/atlas.js';\nimport Left from './left.js';\nimport Mural from './mural.js';\nimport Right from './right.js';\nimport Upload from './upload.js';\nimport { VerseMap } from '../state/lyrics.js';\n\nconst mapTracksById = tracks => {\n  let result = {};\n  tracks.forEach(track => {\n    result[track.id] = _objectSpread({}, track);\n    console.log(\"Map tracks by id .verses\");\n    console.log(result[track.id].verses);\n    result[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]);\n  });\n  return result;\n};\n\nexport default class Stereo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isPlaying: false,\n      song: null,\n      currentTrackTime: 0,\n      totalTrackTime: null,\n      scrubbingTrack: false,\n      scrubbingPlayer: false,\n      screenOn: false,\n      typing: false,\n      tracks: this.props.stream,\n      tracksById: mapTracksById(this.props.stream),\n      queue: [],\n      // list of track ids\\\n      defaultQueue: [],\n      dragTrackId: null // TODO: move to a global store.\n\n    });\n\n    _defineProperty(this, \"timeAnimationInterval\", null);\n\n    _defineProperty(this, \"play\", (song, source = \"STREAM\") => {\n      if (this.state.song && song.id === this.state.song.id) {\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: this.audioRef.currentTime,\n          totalTrackTime: this.audioRef.duration\n        }, () => {\n          this.audioRef.play();\n          this.animateTime();\n          setTimeout(() => this.turnScreenOn(), 70);\n        });\n      } else {\n        clearInterval(this.timeAnimationInterval);\n\n        if (source === 'STREAM') {// set default queue.\n        }\n\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: 0,\n          totalTrackTime: this.audioRef.duration,\n          song\n        }, () => {\n          this.audioRef.play();\n          this.animateTime();\n          setTimeout(() => this.turnScreenOn(), 70);\n        });\n      }\n    });\n\n    _defineProperty(this, \"animateTime\", () => {\n      this.timeAnimationInterval = setInterval(() => {\n        this.setState({\n          currentTrackTime: this.audioRef.currentTime,\n          totalTrackTime: this.audioRef.duration\n        });\n      }, 40);\n    });\n\n    _defineProperty(this, \"stopTimeAnimation\", () => {\n      clearInterval(this.timeAnimationInterval);\n    });\n\n    _defineProperty(this, \"pause\", () => {\n      this.setState({\n        isPlaying: false\n      }, () => this.audioRef.pause());\n    });\n\n    _defineProperty(this, \"toggle\", () => {\n      this.state.isPlaying ? this.pause() : this.play(this.state.song);\n    });\n\n    _defineProperty(this, \"beginScrub\", () => {\n      this.stopTimeAnimation();\n      this.setState({\n        scrubbing: true\n      });\n    });\n\n    _defineProperty(this, \"endScub\", () => {\n      this.setState({\n        scrubbing: false\n      });\n    });\n\n    _defineProperty(this, \"skipTo\", (time, cb = () => {}) => {\n      this.audioRef.currentTime = time;\n      this.setState({\n        currentTrackTime: time\n      }, cb);\n    });\n\n    _defineProperty(this, \"turnScreenOn\", () => this.setState({\n      screenOn: true\n    }));\n\n    _defineProperty(this, \"turnScreenOff\", () => this.setState({\n      screenOn: false\n    }));\n\n    _defineProperty(this, \"toggleScreen\", () => this.setState({\n      screenOn: !this.state.screenOn\n    }));\n\n    _defineProperty(this, \"handleSpacebar\", e => {\n      if (e.key === ' ' && !this.state.typing) {\n        e.preventDefault();\n        this.toggle();\n      }\n    });\n\n    _defineProperty(this, \"addVerse\", (verse, trackId) => {\n      const nextTracksById = _objectSpread({}, this.state.tracksById);\n\n      nextTracksById[trackid].verses.insert(verse);\n      this.setState({\n        tracksById: nextTracksById\n      }, () => this.syncTracks());\n    });\n\n    _defineProperty(this, \"syncSteamState\", () => {\n      const nextStream = this.state.tracks.map(x => this.state.tracksById[x.id]);\n      this.setState({\n        tracks: nextStream\n      });\n    });\n\n    _defineProperty(this, \"addToQueue\", id => {\n      this.setState({\n        queue: [...this.state.queue, id]\n      });\n    });\n\n    _defineProperty(this, \"startTrackDragging\", id => {\n      this.setState({\n        dragTrackId: id\n      });\n    });\n\n    _defineProperty(this, \"stopTrackDragging\", (id, e) => {\n      this.setState({\n        dragTrackId: null\n      });\n      const queueRect = this.left.queue.queueDropzone.getBoundingClientRect();\n\n      if (queueRect.left <= e.clientX && e.clientX <= queueRect.right && queueRect.top <= e.clientY && e.clientY <= queueRect.bottom) {\n        this.addToQueue(id);\n      }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => this.handleSpacebar(e));\n  }\n\n  render() {\n    const {\n      song,\n      isPlaying,\n      currentTrackTime,\n      totalTrackTime,\n      screenOn,\n      tracks,\n      dragTrackId\n    } = this.state;\n    const {\n      signedIn,\n      startSession,\n      stream,\n      account,\n      artist\n    } = this.props;\n    const realStream = tracks || stream;\n    console.log(dragTrackId);\n    return /*#__PURE__*/_jsxDEV(Helipad, {\n      className: \"page-outer-container\",\n      onKeyDown: this.handleSpacebar,\n      modal: /*#__PURE__*/_jsxDEV(Upload, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 85\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('page-content', {\n          center: !signedIn\n        }),\n        children: [screenOn && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left fake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(Left, {\n          ref: \"left\",\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          nowPlaying: song && this.state.tracksById[song.id],\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          startSession: startSession,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          toggleScreen: this.toggleScreen,\n          screenOn: screenOn,\n          account: account,\n          artist: artist,\n          setTyping: value => this.setState({\n            typing: value\n          }),\n          addVerse: this.addVerse,\n          dragTrackId: dragTrackId,\n          addToQueue: this.addToQueue,\n          queueTracks: this.state.queue.map(id => this.state.tracksById[id]),\n          stopTrackDragging: this.stopTrackDragging,\n          ref: input => {\n            this.left = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 9\n        }, this), signedIn && /*#__PURE__*/_jsxDEV(Right, {\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          playingId: song && song.id,\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          stream: realStream,\n          account: account,\n          artist: artist,\n          startTrackDragging: this.startTrackDragging\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"audio\",\n          src: song && song.audioUrl,\n          ref: input => {\n            this.audioRef = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/stereo.js"],"names":["Component","ReactDOM","classnames","Helipad","Route","Left","Mural","Right","Upload","VerseMap","mapTracksById","tracks","result","forEach","track","id","console","log","verses","Stereo","isPlaying","song","currentTrackTime","totalTrackTime","scrubbingTrack","scrubbingPlayer","screenOn","typing","props","stream","tracksById","queue","defaultQueue","dragTrackId","source","state","setState","audioRef","currentTime","duration","play","animateTime","setTimeout","turnScreenOn","clearInterval","timeAnimationInterval","setInterval","pause","stopTimeAnimation","scrubbing","time","cb","e","key","preventDefault","toggle","verse","trackId","nextTracksById","trackid","insert","syncTracks","nextStream","map","x","queueRect","left","queueDropzone","getBoundingClientRect","clientX","right","top","clientY","bottom","addToQueue","componentDidMount","window","addEventListener","handleSpacebar","render","signedIn","startSession","account","artist","realStream","center","skipTo","toggleScreen","value","addVerse","stopTrackDragging","input","startTrackDragging","audioUrl"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport classnames from 'classnames'\nimport Helipad from '../lib/helipad/helipad.js'\nimport { Route } from '../lib/atlas/atlas.js' \n\nimport Left from './left.js'\nimport Mural from './mural.js'\nimport Right from './right.js'\nimport Upload from './upload.js'\n\nimport { VerseMap } from '../state/lyrics.js'\n\n\nconst mapTracksById = (tracks) => {\n\tlet result = {}\n\ttracks.forEach((track) => {\n\t\tresult[track.id] = {...track}\n\t\tconsole.log(\"Map tracks by id .verses\")\n\t\tconsole.log(result[track.id].verses)\n\t\tresult[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]) \n\t})\n\treturn result\n}\n\nexport default class Stereo extends Component {\n\n\tstate = {\n\t\tisPlaying: false,\n\t\tsong: null,\n\t\tcurrentTrackTime: 0,\n\t\ttotalTrackTime: null,\n\t\tscrubbingTrack: false,\n\t\tscrubbingPlayer: false,\n\t\tscreenOn: false,\n\t\ttyping: false,\n\t\ttracks: this.props.stream,\n\t\ttracksById: mapTracksById(this.props.stream),\n\t\tqueue: [], // list of track ids\\\n\t\tdefaultQueue: [],\n\t\tdragTrackId: null\n\t\t// TODO: move to a global store.\n\t}\n\n\ttimeAnimationInterval = null\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener('keydown', (e) => this.handleSpacebar(e));\n\t}\n\n\tplay = (song, source=\"STREAM\") => {\n\t\tif (this.state.song && song.id === this.state.song.id) {\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: this.audioRef.currentTime, \n\t\t\t\ttotalTrackTime: this.audioRef.duration \n\t\t\t}, () => {\n\t\t\t\tthis.audioRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t\tsetTimeout(() => this.turnScreenOn(), 70)\n\t\t\t})\n\t\t} else {\n\t\t\tclearInterval(this.timeAnimationInterval)\n\t\t\tif (source === 'STREAM') {\n\t\t\t\t// set default queue.\n\t\t\t}\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: 0, \n\t\t\t\ttotalTrackTime: this.audioRef.duration,\n\t\t\t\tsong\n\t\t\t}, () => {\n\t\t\t\tthis.audioRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t\tsetTimeout(() => this.turnScreenOn(), 70)\n\t\t\t})\n\t\t}\n\n\t}\n\n\tanimateTime = () => {\n\t\tthis.timeAnimationInterval = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tcurrentTrackTime: this.audioRef.currentTime,\n\t\t\t\ttotalTrackTime: this.audioRef.duration\n\t\t\t})\n\t\t}, 40)\n\t}\n\n\tstopTimeAnimation = () => {\n\t\tclearInterval(this.timeAnimationInterval)\n\t}\n\n\tpause = () => {\n\t\tthis.setState({ isPlaying: false }, () => this.audioRef.pause())\n\t}\n\n\ttoggle = () => {\n\t\tthis.state.isPlaying ? this.pause() : this.play(this.state.song) \n\t}\n\n\tbeginScrub = () => {\n\t\tthis.stopTimeAnimation()\n\t\tthis.setState({ scrubbing: true })\n\t}\n\n\tendScub = () => {\n\t\tthis.setState({ scrubbing: false })\n\t}\n\n\tskipTo = (time, cb = () => {}) => {\n\t\tthis.audioRef.currentTime = time\n\t\tthis.setState({ currentTrackTime: time }, cb)\n\t}\n\n\tturnScreenOn = () => this.setState({ screenOn: true })\n\n\tturnScreenOff = () => this.setState({ screenOn: false })\n\n\ttoggleScreen = () => this.setState({ screenOn: !this.state.screenOn })\n\n\thandleSpacebar = (e) => {\n\t\tif (e.key === ' ' && ! this.state.typing) {\n\t\t\te.preventDefault()\n\t\t\tthis.toggle()\n\t\t}\n\t}\n\n\taddVerse = (verse, trackId) => {\n\t\tconst nextTracksById = {...this.state.tracksById}\n\t\tnextTracksById[trackid].verses.insert(verse)\n\t\tthis.setState({\n\t\t\ttracksById: nextTracksById\n\t\t}, () => this.syncTracks())\n\t}\n\n\tsyncSteamState = () => {\n\t\tconst nextStream = this.state.tracks.map(x => (\n\t\t\tthis.state.tracksById[x.id]\n\t\t))\n\t\tthis.setState({\n\t\t\ttracks: nextStream\n\t\t})\n\t}\n\n\taddToQueue = (id) => {\n\t\tthis.setState({queue: [...this.state.queue, id]})\n\t}\n\n\tstartTrackDragging = (id) => {\n\t\tthis.setState({ dragTrackId: id })\n\t}\n\n\tstopTrackDragging = (id, e) => {\n\t\tthis.setState({ dragTrackId: null })\n\t\tconst queueRect = this.left.queue.queueDropzone.getBoundingClientRect()\n\t\tif (queueRect.left <= e.clientX && \n\t\t\te.clientX<= queueRect.right && \n\t\t\tqueueRect.top <= e.clientY && \n\t\t\te.clientY <= queueRect.bottom) {\n\t\t\tthis.addToQueue(id)\t\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { song, isPlaying, currentTrackTime, totalTrackTime, screenOn, tracks, dragTrackId } = this.state\n\t\tconst { signedIn, startSession, stream, account, artist } = this.props\n\n\t\tconst realStream = tracks || stream\n\t\tconsole.log(dragTrackId)\n\n\t\treturn (\n\t\t\t<Helipad className=\"page-outer-container\" onKeyDown={this.handleSpacebar} modal={<Upload />}>\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<video autoPlay muted loop className=\"background-video\">\n\t\t\t\t\t\t<source type=\"video/mp4\" src=\"test_data/video/corn.mov\" />\n\t\t\t\t\t</video>\n\t\t\t\t*/}\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<div className=\"background-video-shade\" />\n\t\t\t\t*/}\n{/*\t\t\t\t<Route path=\"/[artist]\">\n\t\t\t\t\t<Mural src=\"test_data/artistsbigbirb.jpg\" />\n\t\t\t\t</Route>*/}\n\t\t\t\t{/*<div className=\"mural-container\">\n\t\t\t\t\t{ screenOn && <div className=\"mural-fake\" /> }\t\n\t\t\t\t\t<Mural />\n\t\t\t\t</div>*/}\n\t\t\t\t<div className={classnames('page-content', { center: !signedIn })}>\t\n\t\t\t\t\t{ screenOn && <div className=\"left fake\" /> }\t\t\n\t\t    \t\t<Left ref=\"left\" \n\t\t    \t\t\ttoggle={this.toggle} \n\t\t    \t\t\tplay={this.play} \n\t\t    \t\t\tpause={this.pause} \n\t\t    \t\t\tnowPlaying={song && this.state.tracksById[song.id]}\n\t\t    \t\t\tisPlaying={isPlaying}\n\t\t    \t\t\tsignedIn={signedIn}\n\t\t    \t\t\tstartSession={startSession}\n\t\t    \t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\tskipTo={this.skipTo}\n\t\t    \t\t\ttoggleScreen={this.toggleScreen}\n\t\t    \t\t\tscreenOn={screenOn}\n\t\t    \t\t\taccount={account} \n\t\t    \t\t\tartist={artist}\n\t\t    \t\t\tsetTyping={(value) => this.setState({ typing: value })}\n\t\t    \t\t\taddVerse={this.addVerse}\n\t\t    \t\t\tdragTrackId={dragTrackId}\n\t\t    \t\t\taddToQueue={this.addToQueue}\n\t\t    \t\t\tqueueTracks={this.state.queue.map((id) => this.state.tracksById[id])}\n\t\t    \t\t\tstopTrackDragging={this.stopTrackDragging}\n\t\t    \t\t\tref={(input) => {this.left = input}}\n\n\t\t    \t\t/>\n\t\t    \t\t{ \n\t\t    \t\t\tsignedIn && \n\t\t    \t\t\t<Right toggle={this.toggle} \n\t\t    \t\t\t\tplay={this.play} \n\t\t    \t\t\t\tpause={this.pause} \n\t\t    \t\t\t\tplayingId={song && song.id} \n\t\t    \t\t\t\tisPlaying={isPlaying}\n\t\t    \t\t\t\tsignedIn={signedIn}\n\t\t    \t\t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\t\tskipTo={this.skipTo}\n\t\t    \t\t\t\tstream={realStream}\n\t\t    \t\t\t\taccount={account}\n\t\t    \t\t\t\tartist={artist}\n\t\t    \t\t\t\tstartTrackDragging={this.startTrackDragging} />\n\t\t    \t\t}\n\t\t\t\t\t<audio id=\"audio\" src={song && song.audioUrl} ref={(input) => {this.audioRef = input}} />\n\t\t\t\t</div>\n\t\t\t</Helipad>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}