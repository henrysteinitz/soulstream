{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/lib/atlas/atlas.js\",\n    _this2 = this;\n\nimport React, { useContext } from 'react';\nimport classnames from 'classnames';\nvar path = 'path';\n\nvar AtlasClass = /*#__PURE__*/function () {\n  function AtlasClass(_path) {\n    var _this = this;\n\n    _classCallCheck(this, AtlasClass);\n\n    _defineProperty(this, \"padWithSlash\", function (path) {\n      if (path[0] !== '/') {\n        path = '/' + path;\n      }\n\n      return path;\n    });\n\n    _defineProperty(this, \"setPath\", function (path) {\n      _this.path = _this.padWithSlash(path);\n\n      _this.history.push(_this.padWithSlash(path));\n\n      true && window.location.replace(_this.padWithSlash(path));\n      _this.now += 1;\n    });\n\n    _defineProperty(this, \"setState\", function (state) {\n      Object.keys(state).forEach(function (x) {\n        _this.state[x] = state[x];\n      });\n    });\n\n    _defineProperty(this, \"back\", function () {\n      return _this.now -= 1;\n    });\n\n    _defineProperty(this, \"forward\", function () {\n      return _this.now += 1;\n    });\n\n    this.history = [this.padWithSlash(_path || '')];\n    this.now = 0;\n    this.state = {};\n  }\n\n  _createClass(AtlasClass, [{\n    key: path,\n    get: function get() {\n      return this.history;\n    },\n    set: function set(path) {\n      this.setPath(path);\n    }\n  }]);\n\n  return AtlasClass;\n}();\n\nvar Atlas = new AtlasClass();\nexport var AtlasContext = /*#__PURE__*/React.createContext(Atlas);\n_c = AtlasContext;\nexport var AtlasProvider = AtlasContext.Provider;\nexport var AtlasConsumer = AtlasContext.Consumer;\nexport var Route = function Route(_ref) {\n  var path = _ref.path,\n      _children = _ref.children;\n  return /*#__PURE__*/_jsxDEV(AtlasConsumer, {\n    children: function children(atlas) {\n      console.log(atlas.path.replace(/\\s/g, '') !== path.replace(/\\s/g, ''));\n      console.log(\"path: \".concat(path));\n      console.log(\"apath: \".concat(atlas.path)); // TODO: Support inexact routes\t\n\n      if (atlas.path !== path) {\n        return null;\n        console.log('far');\n      }\n\n      return _children;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 2\n  }, _this2);\n};\n_c2 = Route;\n\nvar handleClick = function handleClick(atlas, path) {\n  atlas.setPath(path);\n};\n\nexport var Link = function Link(_ref2) {\n  var to = _ref2.to,\n      className = _ref2.className,\n      _children2 = _ref2.children,\n      activeClassName = _ref2.activeClassName;\n  return /*#__PURE__*/_jsxDEV(AtlasConsumer, {\n    children: function children(atlas) {\n      return /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: function onClick() {\n          return handleClick(atlas, to);\n        },\n        className: classnames('atlas-link', className, {\n          activeClassName: atlas.path === to\n        }),\n        children: _children2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 4\n      }, _this2);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, _this2);\n};\n_c3 = Link;\nexport default Atlas;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AtlasContext\");\n$RefreshReg$(_c2, \"Route\");\n$RefreshReg$(_c3, \"Link\");","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/lib/atlas/atlas.js"],"names":["React","useContext","classnames","path","AtlasClass","padWithSlash","history","push","window","location","replace","now","state","Object","keys","forEach","x","setPath","Atlas","AtlasContext","createContext","AtlasProvider","Provider","AtlasConsumer","Consumer","Route","children","atlas","console","log","handleClick","Link","to","className","activeClassName"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport classnames from 'classnames'\n\nconst path = 'path'\n\nclass AtlasClass {\n\tconstructor(path) {\n\t\tthis.history = [this.padWithSlash(path || '')]\n\t\tthis.now = 0\n\t\tthis.state = {}\n\t}\n\n\tpadWithSlash = (path) => {\n\t\tif (path[0] !== '/') {\n\t\t\tpath = '/' + path\n\t\t}\n\t\treturn path\n\t}\n\n\tsetPath = (path) => {\n\t\tthis.path = this.padWithSlash(path)\n\t\tthis.history.push(this.padWithSlash(path))\n\t\ttypeof window != \"undefined\" && window.location.replace(this.padWithSlash(path))\n\t\tthis.now += 1\n\t}\t\n\n\tsetState = (state) => {\n\t\tObject.keys(state).forEach(x => {\n\t\t\tthis.state[x] = state[x]\n\t\t})\n\t}\n\tback = () => this.now -= 1\n\tforward = () => this.now += 1\n\n\tget[path]() {\n\t\treturn this.history\n\t}\n\n\tset[path](path) {\n\t\tthis.setPath(path)\n\t}\n}\n\nconst Atlas = new AtlasClass()\n\nexport const AtlasContext = React.createContext(Atlas)\nexport const AtlasProvider = AtlasContext.Provider\nexport const AtlasConsumer = AtlasContext.Consumer\n\nexport const Route = ({ path, children }) => (\n\t<AtlasConsumer>\n\t\t{\n\t\t\t(atlas) => {\n\t\t\t\tconsole.log(atlas.path.replace( /\\s/g, '') !== path.replace( /\\s/g, ''))\n\t\t\t\tconsole.log(`path: ${path}`)\n\t\t\t\tconsole.log(`apath: ${atlas.path}`)\n\t\t\t\t// TODO: Support inexact routes\t\n\t\t\t\tif (atlas.path !== path) {\n\t\t\t\t\treturn null\n\t\t\t\t\tconsole.log('far')\n\t\t\t\t}\n\t\t\t\treturn children\n\t\t\t}\n\t\t}\n\t</AtlasConsumer>\n)\n\nconst handleClick = (atlas, path) => {\n\tatlas.setPath(path)\n}\n\nexport const Link = ({ to, className, children, activeClassName }) => {\n\treturn (\n\t\t<AtlasConsumer>\n\t\t{ \n\t\t\t(atlas) => (\n\t\t\t<a onClick={() => handleClick(atlas, to)} className={classnames('atlas-link', className,  { activeClassName: atlas.path === to })}>\n\t\t\t\t{ children }\n\t\t\t</a>)\n\t\t}\n\t\t</AtlasConsumer>\n\t)\n}\n\n\n\nexport default Atlas\n\n"]},"metadata":{},"sourceType":"module"}