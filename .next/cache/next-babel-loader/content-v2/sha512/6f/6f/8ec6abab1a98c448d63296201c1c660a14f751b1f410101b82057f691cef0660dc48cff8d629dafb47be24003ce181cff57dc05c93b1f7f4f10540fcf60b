{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/stereo.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport Helipad from '../lib/helipad/helipad.js';\nimport { Route } from '../lib/atlas/atlas.js';\nimport Left from './left.js';\nimport Mural from './mural.js';\nimport Right from './right.js';\nimport Upload from './upload.js';\nexport default class Stereo extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isPlaying: false,\n      song: null,\n      currentTrackTime: 0,\n      totalTrackTime: null,\n      scrubbingTrack: false,\n      scrubbingPlayer: false,\n      screenOn: false,\n      typing: false // TODO: move to a global store.\n\n    });\n\n    _defineProperty(this, \"timeAnimationInterval\", null);\n\n    _defineProperty(this, \"play\", song => {\n      if (this.state.song && song.id === this.state.song.id) {\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: this.audioRef.currentTime,\n          totalTrackTime: this.audioRef.duration\n        }, () => {\n          this.audioRef.play();\n          this.animateTime();\n          setTimeout(() => this.turnScreenOn(), 70);\n        });\n      } else {\n        clearInterval(this.timeAnimationInterval);\n        this.setState({\n          isPlaying: true,\n          currentTrackTime: 0,\n          totalTrackTime: this.audioRef.duration,\n          song\n        }, () => {\n          this.audioRef.play();\n          this.animateTime();\n          setTimeout(() => this.turnScreenOn(), 70);\n        });\n      }\n    });\n\n    _defineProperty(this, \"animateTime\", () => {\n      this.timeAnimationInterval = setInterval(() => {\n        this.setState({\n          currentTrackTime: this.audioRef.currentTime,\n          totalTrackTime: this.audioRef.duration\n        });\n      }, 40);\n    });\n\n    _defineProperty(this, \"stopTimeAnimation\", () => {\n      clearInterval(this.timeAnimationInterval);\n    });\n\n    _defineProperty(this, \"pause\", () => {\n      this.setState({\n        isPlaying: false\n      }, () => this.audioRef.pause());\n    });\n\n    _defineProperty(this, \"toggle\", () => {\n      this.state.isPlaying ? this.pause() : this.play(this.state.song);\n    });\n\n    _defineProperty(this, \"beginScrub\", () => {\n      this.stopTimeAnimation();\n      this.setState({\n        scrubbing: true\n      });\n    });\n\n    _defineProperty(this, \"endScub\", () => {\n      this.setState({\n        scrubbing: false\n      });\n    });\n\n    _defineProperty(this, \"skipTo\", (time, cb = () => {}) => {\n      this.audioRef.currentTime = time;\n      this.setState({\n        currentTrackTime: time\n      }, cb);\n    });\n\n    _defineProperty(this, \"turnScreenOn\", () => this.setState({\n      screenOn: true\n    }));\n\n    _defineProperty(this, \"turnScreenOff\", () => this.setState({\n      screenOn: false\n    }));\n\n    _defineProperty(this, \"toggleScreen\", () => this.setState({\n      screenOn: !this.state.screenOn\n    }));\n\n    _defineProperty(this, \"handleSpacebar\", e => {\n      if (e.key === ' ' && !this.state.typing) {\n        e.preventDefault();\n        this.toggle();\n      }\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', e => this.handleSpacebar(e));\n  }\n\n  render() {\n    const {\n      song,\n      isPlaying,\n      currentTrackTime,\n      totalTrackTime,\n      screenOn\n    } = this.state;\n    const {\n      signedIn,\n      startSession,\n      stream,\n      account,\n      artist\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Helipad, {\n      className: \"page-outer-container\",\n      onKeyDown: this.handleSpacebar,\n      modal: /*#__PURE__*/_jsxDEV(Upload, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 85\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('page-content', {\n          center: !signedIn\n        }),\n        children: [screenOn && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left fake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(Left, {\n          ref: \"left\",\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          nowPlaying: song,\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          startSession: startSession,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          toggleScreen: this.toggleScreen,\n          screenOn: screenOn,\n          account: account,\n          artist: artist,\n          setTyping: value => this.setState({\n            typing: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this), signedIn && /*#__PURE__*/_jsxDEV(Right, {\n          toggle: this.toggle,\n          play: this.play,\n          pause: this.pause,\n          playingId: song && song.id,\n          isPlaying: isPlaying,\n          signedIn: signedIn,\n          currentTrackTime: currentTrackTime,\n          totalTrackTime: totalTrackTime,\n          skipTo: this.skipTo,\n          stream: stream,\n          account: account,\n          artist: artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"audio\",\n          src: song && song.audioUrl,\n          ref: input => {\n            this.audioRef = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 4\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/stereo.js"],"names":["Component","ReactDOM","classnames","Helipad","Route","Left","Mural","Right","Upload","Stereo","isPlaying","song","currentTrackTime","totalTrackTime","scrubbingTrack","scrubbingPlayer","screenOn","typing","state","id","setState","audioRef","currentTime","duration","play","animateTime","setTimeout","turnScreenOn","clearInterval","timeAnimationInterval","setInterval","pause","stopTimeAnimation","scrubbing","time","cb","e","key","preventDefault","toggle","componentDidMount","window","addEventListener","handleSpacebar","render","signedIn","startSession","stream","account","artist","props","center","skipTo","toggleScreen","value","audioUrl","input"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport classnames from 'classnames'\nimport Helipad from '../lib/helipad/helipad.js'\nimport { Route } from '../lib/atlas/atlas.js' \n\nimport Left from './left.js'\nimport Mural from './mural.js'\nimport Right from './right.js'\nimport Upload from './upload.js'\n\nexport default class Stereo extends Component {\n\n\tstate = {\n\t\tisPlaying: false,\n\t\tsong: null,\n\t\tcurrentTrackTime: 0,\n\t\ttotalTrackTime: null,\n\t\tscrubbingTrack: false,\n\t\tscrubbingPlayer: false,\n\t\tscreenOn: false,\n\t\ttyping: false,\t\n\t\t// TODO: move to a global store.\n\t}\n\n\ttimeAnimationInterval = null\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener('keydown', (e) => this.handleSpacebar(e));\n\t}\n\n\tplay = (song) => {\n\t\tif (this.state.song && song.id === this.state.song.id) {\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: this.audioRef.currentTime, \n\t\t\t\ttotalTrackTime: this.audioRef.duration \n\t\t\t}, () => {\n\t\t\t\tthis.audioRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t\tsetTimeout(() => this.turnScreenOn(), 70)\n\t\t\t})\n\t\t} else {\n\t\t\tclearInterval(this.timeAnimationInterval)\n\t\t\tthis.setState({ \n\t\t\t\tisPlaying: true, \n\t\t\t\tcurrentTrackTime: 0, \n\t\t\t\ttotalTrackTime: this.audioRef.duration,\n\t\t\t\tsong\n\t\t\t}, () => {\n\t\t\t\tthis.audioRef.play()\n\t\t\t\tthis.animateTime()\n\t\t\t\tsetTimeout(() => this.turnScreenOn(), 70)\n\t\t\t})\n\t\t}\n\n\t}\n\n\tanimateTime = () => {\n\t\tthis.timeAnimationInterval = setInterval(() => {\n\t\t\tthis.setState({\n\t\t\t\tcurrentTrackTime: this.audioRef.currentTime,\n\t\t\t\ttotalTrackTime: this.audioRef.duration\n\t\t\t})\n\t\t}, 40)\n\t}\n\n\tstopTimeAnimation = () => {\n\t\tclearInterval(this.timeAnimationInterval)\n\t}\n\n\tpause = () => {\n\t\tthis.setState({ isPlaying: false }, () => this.audioRef.pause())\n\t}\n\n\ttoggle = () => {\n\t\tthis.state.isPlaying ? this.pause() : this.play(this.state.song) \n\t}\n\n\tbeginScrub = () => {\n\t\tthis.stopTimeAnimation()\n\t\tthis.setState({ scrubbing: true })\n\t}\n\n\tendScub = () => {\n\t\tthis.setState({ scrubbing: false })\n\t}\n\n\tskipTo = (time, cb = () => {}) => {\n\t\tthis.audioRef.currentTime = time\n\t\tthis.setState({ currentTrackTime: time }, cb)\n\t}\n\n\tturnScreenOn = () => this.setState({ screenOn: true })\n\n\tturnScreenOff = () => this.setState({ screenOn: false })\n\n\ttoggleScreen = () => this.setState({ screenOn: !this.state.screenOn })\n\n\thandleSpacebar = (e) => {\n\t\tif (e.key === ' ' && ! this.state.typing) {\n\t\t\te.preventDefault()\n\t\t\tthis.toggle()\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { song, isPlaying, currentTrackTime, totalTrackTime, screenOn } = this.state\n\t\tconst { signedIn, startSession, stream, account, artist } = this.props\n\n\t\treturn (\n\t\t\t<Helipad className=\"page-outer-container\" onKeyDown={this.handleSpacebar} modal={<Upload />}>\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<video autoPlay muted loop className=\"background-video\">\n\t\t\t\t\t\t<source type=\"video/mp4\" src=\"test_data/video/corn.mov\" />\n\t\t\t\t\t</video>\n\t\t\t\t*/}\n\t\t\t\t{/*\n\t\t\t\t\tsignedIn ||\n\t\t\t\t\t<div className=\"background-video-shade\" />\n\t\t\t\t*/}\n{/*\t\t\t\t<Route path=\"/[artist]\">\n\t\t\t\t\t<Mural src=\"test_data/artistsbigbirb.jpg\" />\n\t\t\t\t</Route>*/}\n\t\t\t\t{/*<div className=\"mural-container\">\n\t\t\t\t\t{ screenOn && <div className=\"mural-fake\" /> }\t\n\t\t\t\t\t<Mural />\n\t\t\t\t</div>*/}\n\t\t\t\t<div className={classnames('page-content', { center: !signedIn })}>\t\n\t\t\t\t\t{ screenOn && <div className=\"left fake\" /> }\t\t\n\t\t    \t\t<Left ref=\"left\" \n\t\t    \t\t\ttoggle={this.toggle} \n\t\t    \t\t\tplay={this.play} \n\t\t    \t\t\tpause={this.pause} \n\t\t    \t\t\tnowPlaying={song}\n\t\t    \t\t\tisPlaying={isPlaying}\n\t\t    \t\t\tsignedIn={signedIn}\n\t\t    \t\t\tstartSession={startSession}\n\t\t    \t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\tskipTo={this.skipTo}\n\t\t    \t\t\ttoggleScreen={this.toggleScreen}\n\t\t    \t\t\tscreenOn={screenOn}\n\t\t    \t\t\taccount={account} \n\t\t    \t\t\tartist={artist}\n\t\t    \t\t\tsetTyping={(value) => this.setState({ typing: value })}\n\t\t    \t\t\t/>\n\t\t    \t\t{ \n\t\t    \t\t\tsignedIn && \n\t\t    \t\t\t<Right toggle={this.toggle} \n\t\t    \t\t\t\tplay={this.play} \n\t\t    \t\t\t\tpause={this.pause} \n\t\t    \t\t\t\tplayingId={song && song.id} \n\t\t    \t\t\t\tisPlaying={isPlaying}\n\t\t    \t\t\t\tsignedIn={signedIn}\n\t\t    \t\t\t\tcurrentTrackTime={currentTrackTime}\n\t\t    \t\t\t\ttotalTrackTime={totalTrackTime}\n\t\t    \t\t\t\tskipTo={this.skipTo}\n\t\t    \t\t\t\tstream={stream}\n\t\t    \t\t\t\taccount={account}\n\t\t    \t\t\t\tartist={artist} />\n\t\t    \t\t}\n\t\t\t\t\t<audio id=\"audio\" src={song && song.audioUrl} ref={(input) => {this.audioRef = input}} />\n\t\t\t\t</div>\n\t\t\t</Helipad>\n\t\t)\n\t}\n}"]},"metadata":{},"sourceType":"module"}