{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { useRouter } from 'next/router';\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js';\nimport Main from '../main.js';\n\nfunction Home(props) {\n  const router = useRouter();\n  Atlas.setPath('/' + props.artist.url); // console.log(router.pathname)\n\n  return /*#__PURE__*/_jsxDEV(Main, _objectSpread(_objectSpread({}, props), {}, {\n    pathname: router.pathname\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths(context) {\n  // TODO: Will this scale? Suspect...\n  let prisma = new PrismaClient();\n  const artists = await prisma.artist.findMany({\n    select: {\n      url: true\n    }\n  });\n  return {\n    paths: artists.map(artist => '/' + artist.url),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  let prisma = new PrismaClient();\n  const {\n    artist: artistUrl\n  } = context.params;\n  const artist = await prisma.artist.findUnique({\n    select: {\n      id: true,\n      name: true,\n      pictureUrl: true,\n      url: true,\n      tracks: {\n        include: {\n          track: {\n            select: {\n              id: true,\n              title: true,\n              audioUrl: true,\n              artUrl: true,\n              url: true\n            }\n          }\n        }\n      },\n      accounts: {\n        include: {\n          account: {\n            select: {\n              id: true\n            }\n          }\n        }\n      }\n    },\n    where: {\n      url: artistUrl\n    }\n  });\n  const history = await prisma.trackPlay.findMany({\n    select: {\n      track: {\n        include: {\n          id: true,\n          title: true,\n          audioUrl: true,\n          artUrl: true,\n          url: true\n        }\n      }\n    },\n    where: {\n      accountId: {\n        in: artist.accounts.map(x => x.account.id)\n      }\n    }\n  });\n  const artistNoTracks = {\n    artist: {\n      id: artist.id,\n      name: artist.name,\n      pictureUrl: artist.pictureUrl\n    }\n  };\n  const tracks = artist.tracks.map(x => x.track);\n  tracks.forEach(track => {\n    track.artists = [artistNoTracks];\n  });\n  return {\n    props: {\n      artist,\n      history,\n      stream: tracks\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js"],"names":["React","GetStaticProps","useRouter","PrismaClient","Atlas","Main","Home","props","router","setPath","artist","url","pathname","getStaticPaths","context","prisma","artists","findMany","select","paths","map","fallback","getStaticProps","artistUrl","params","findUnique","id","name","pictureUrl","tracks","include","track","title","audioUrl","artUrl","accounts","account","where","history","trackPlay","accountId","in","x","artistNoTracks","forEach","stream"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport { GetStaticProps } from \"next\"\nimport { useRouter } from 'next/router'\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js'\nimport Main from '../main.js'\n\n\nfunction Home(props){\n\tconst router = useRouter()\n\tAtlas.setPath('/' + props.artist.url)\n\t// console.log(router.pathname)\n\n\treturn <Main {...props} pathname={router.pathname}/>\n}\n\nexport async function getStaticPaths(context) {\n\t// TODO: Will this scale? Suspect...\n\tlet prisma = new PrismaClient();\n\tconst artists = await prisma.artist.findMany({\n\t\tselect: {\n\t\t\turl: true\n\t\t}\n\t})\n\n\treturn {\n\t\tpaths: artists.map(artist => ('/' + artist.url)),\n\t\tfallback: false\n\t}\n}\n\nexport async function getStaticProps(context){\n\tlet prisma = new PrismaClient();\n\tconst { artist: artistUrl } = context.params\n\n\tconst artist = await prisma.artist.findUnique({\n\t\tselect: {\n\t\t\tid: true,\n\t\t\tname: true,\n\t\t\tpictureUrl: true,\n\t\t\turl: true,\n\t\t\ttracks: {\n\t    \t\tinclude: {\n\t    \t\t\ttrack: {\n\t    \t\t\t\tselect: {\n\t    \t\t\t\t\tid: true,\n\t    \t\t\t\t\ttitle: true,\n\t    \t\t\t\t\taudioUrl: true,\n\t    \t\t\t\t\tartUrl: true,\n\t    \t\t\t\t\turl: true,\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \t},\n\t    \taccounts: {\n\t    \t\tinclude: {\n\t\t    \t\taccount: {\n\t    \t\t\t\tselect: {\n\t    \t\t\t\t\tid: true\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \t}\n\t\t},\n\t\twhere: {\n\t\t\turl: artistUrl\n\t\t}\n\t})\n\n\tconst history = await prisma.trackPlay.findMany({\n\t\tselect: {\n\t\t\ttrack: {\n\t\t\t\tinclude: {\n\t\t\t\t\tid: true,\n\t\t\t\t\ttitle: true,\n\t\t\t\t\taudioUrl: true,\n\t\t\t\t\tartUrl: true,\n\t\t\t\t\turl: true,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\twhere: {\n\t\t\taccountId: { in: artist.accounts.map(x => x.account.id)}\n\t\t}\n\t})\n\n\tconst artistNoTracks = {artist: {id: artist.id, name: artist.name, pictureUrl: artist.pictureUrl}}\n\tconst tracks = artist.tracks.map(x => x.track)\n\ttracks.forEach(track => {\n\t\ttrack.artists = [artistNoTracks]\n\t})\n\n\treturn { props: { artist, history, stream: tracks }}\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}