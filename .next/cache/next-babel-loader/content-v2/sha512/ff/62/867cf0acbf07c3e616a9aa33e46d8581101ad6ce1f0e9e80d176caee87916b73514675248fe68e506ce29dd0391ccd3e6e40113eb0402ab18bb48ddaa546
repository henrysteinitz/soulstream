{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/screen.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classnames from 'classnames';\nimport { Component } from 'react';\nimport { Route, AtlasProvider } from '../lib/atlas/atlas.js'; // import PropTypes from 'prop-types'\n\nimport Content from './content.js';\nimport Time from './time.js';\nconst MODES = {\n  'default': \"DEFAULT\",\n  'pocket': \"POCKET\"\n};\nexport default class Screen extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      contentIsPaused: true,\n      mode: \"DEFAULT\"\n    });\n  }\n\n  render() {\n    const {\n      on,\n      toggle,\n      nowPlaying,\n      artist,\n      atlas\n    } = this.props;\n    const isNewArtist = atlas.getLastUrlSegment() === 'new';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames(\"screen\", \"fullscreen\", {\n        \"off\": !on\n      }),\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: nowPlaying && nowPlaying.type === 'VIDEO' ? /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"video\",\n          className: \"screen-video\",\n          src: song && song.audioUrl,\n          ref: input => {\n            this.videoRef = input;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }, this) : /*#__PURE__*/_jsxDEV(Content, {\n          size: \"fullscreen\",\n          art: nowPlaying && nowPlaying.artUrl,\n          toggle: toggle,\n          song: nowPlaying\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/[artist]\",\n        children: /*#__PURE__*/_jsxDEV(Content, {\n          size: \"fullscreen\",\n          art: isNewArtist ? \"test_data/profile.jpg\" : artist && artist.pictureUrl,\n          song: nowPlaying\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this);\n  }\n\n} // Screen.propTypes = {\n//  \tsize: PropTypes.oneOf([\"full\"]),\n//  \tisCurrent: PropTypes.bool,\n// };\n// TODO\n// - take and render album art and album videos\n//   - consider allowing small album preview to be videos\n// - resize / minimize\n// - render and connect controls\n// - -","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/screen.js"],"names":["classnames","Component","Route","AtlasProvider","Content","Time","MODES","Screen","contentIsPaused","mode","render","on","toggle","nowPlaying","artist","atlas","props","isNewArtist","getLastUrlSegment","type","song","audioUrl","input","videoRef","artUrl","pictureUrl"],"mappings":";;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,uBAArC,C,CACA;;AAEA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,KAAK,GAAG;AACb,aAAW,SADE;AAEb,YAAU;AAFG,CAAd;AAKA,eAAe,MAAMC,MAAN,SAAqBN,SAArB,CAA+B;AAAA;AAAA;;AAAA,mCAErC;AACPO,MAAAA,eAAe,EAAE,IADV;AAEPC,MAAAA,IAAI,EAAE;AAFC,KAFqC;AAAA;;AAO7CC,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,MAAN;AAAcC,MAAAA,UAAd;AAA0BC,MAAAA,MAA1B;AAAkCC,MAAAA;AAAlC,QAA4C,KAAKC,KAAvD;AAEA,UAAMC,WAAW,GAAGF,KAAK,CAACG,iBAAN,OAA8B,KAAlD;AAEA,wBACC;AAAK,MAAA,SAAS,EAAElB,UAAU,CAAC,QAAD,EAAW,YAAX,EAAyB;AAAC,eAAO,CAACW;AAAT,OAAzB,CAA1B;AAAA,8BACC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAA,kBAEEE,UAAU,IAAIA,UAAU,CAACM,IAAX,KAAoB,OAAlC,gBACA;AAAO,UAAA,EAAE,EAAC,OAAV;AAAkB,UAAA,SAAS,EAAC,cAA5B;AAA2C,UAAA,GAAG,EAAEC,IAAI,IAAIA,IAAI,CAACC,QAA7D;AAAuE,UAAA,GAAG,EAAGC,KAAD,IAAW;AAAC,iBAAKC,QAAL,GAAgBD,KAAhB;AAAsB;AAA9G;AAAA;AAAA;AAAA;AAAA,gBADA,gBAEA,QAAC,OAAD;AAAS,UAAA,IAAI,EAAC,YAAd;AAA2B,UAAA,GAAG,EAAET,UAAU,IAAIA,UAAU,CAACW,MAAzD;AAAiE,UAAA,MAAM,EAAEZ,MAAzE;AAAiF,UAAA,IAAI,EAAEC;AAAvF;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,cADD,eAQC,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,WAAZ;AAAA,+BACC,QAAC,OAAD;AAAS,UAAA,IAAI,EAAC,YAAd;AAA2B,UAAA,GAAG,EAAEI,WAAW,GAAG,uBAAH,GAA8BH,MAAM,IAAIA,MAAM,CAACW,UAA1F;AAAuG,UAAA,IAAI,EAAEZ;AAA7G;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cARD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAeA;;AA3B4C,C,CA+B9C;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import classnames from 'classnames'\nimport { Component } from 'react'\nimport { Route, AtlasProvider } from '../lib/atlas/atlas.js'\n// import PropTypes from 'prop-types'\n\nimport Content from './content.js'\nimport Time from './time.js'\n\nconst MODES = {\n\t'default': \"DEFAULT\",\n\t'pocket': \"POCKET\"\n}\n\nexport default class Screen extends Component {\n\n\tstate = {\n\t\tcontentIsPaused: true,\n\t\tmode: \"DEFAULT\",\n\t}\n\t\n\trender() {\n\t\tconst { on, toggle, nowPlaying, artist, atlas } = this.props;\n\n\t\tconst isNewArtist = atlas.getLastUrlSegment() === 'new'\n\n\t\treturn (\n\t\t\t<div className={classnames(\"screen\", \"fullscreen\", {\"off\": !on})} >\n\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t{\n\t\t\t\t\t\tnowPlaying && nowPlaying.type === 'VIDEO' ?\n\t\t\t\t\t\t<video id=\"video\" className=\"screen-video\" src={song && song.audioUrl} ref={(input) => {this.videoRef = input}} /> :\n\t\t\t\t\t\t<Content size=\"fullscreen\" art={nowPlaying && nowPlaying.artUrl} toggle={toggle} song={nowPlaying} />\n\t\t\t\t\t}\n\t\t\t\t</Route> \n\t\t\t\t<Route path=\"/[artist]\">\n\t\t\t\t\t<Content size=\"fullscreen\" art={isNewArtist ? \"test_data/profile.jpg\" : (artist && artist.pictureUrl)} song={nowPlaying} />\n\t\t\t\t</Route>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n// Screen.propTypes = {\n//  \tsize: PropTypes.oneOf([\"full\"]),\n//  \tisCurrent: PropTypes.bool,\n// };\n\n\n\n\n// TODO\n// - take and render album art and album videos\n//   - consider allowing small album preview to be videos\n// - resize / minimize\n// - render and connect controls\n// - -"]},"metadata":{},"sourceType":"module"}