{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { useRouter } from 'next/router';\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js';\nimport Main from '../main.js';\n\nfunction Home(props) {\n  const router = useRouter();\n  Atlas.setPath(router.pathname);\n  Atlas.setState({\n    artist: router.asPath.slice(1)\n  }); // console.log(router.pathname)\n\n  return /*#__PURE__*/_jsxDEV(Main, _objectSpread(_objectSpread({}, props), {}, {\n    pathname: router.pathname\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths(context) {\n  // TODO: Will this scale? Suspect...\n  let prisma = new PrismaClient();\n  const artists = await prisma.artist.findMany({\n    select: {\n      url: true\n    }\n  });\n  return {\n    paths: artists.map(artist => '/' + artist.url),\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  let prisma = new PrismaClient();\n  const {\n    artist: artistUrl\n  } = context.params;\n  const artist = await prisma.artist.findUnique({\n    select: {\n      id: true,\n      name: true,\n      pictureUrl: true,\n      tracks: {\n        include: {\n          track: {\n            select: {\n              id: true,\n              title: true,\n              audioUrl: true,\n              artUrl: true,\n              url: true\n            }\n          }\n        }\n      }\n    },\n    where: {\n      url: artistUrl\n    }\n  });\n  const artistNoTracks = {\n    artist: {\n      id: artist.id,\n      name: artist.name,\n      pictureUrl: artist.pictureUrl\n    }\n  };\n  const tracks = artist.tracks.map(x => x.track);\n  tracks.forEach(track => {\n    track.artists = [artistNoTracks];\n  });\n  return {\n    props: {\n      artist,\n      stream: tracks\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/pages/[artist]/index.js"],"names":["React","GetStaticProps","useRouter","PrismaClient","Atlas","Main","Home","props","router","setPath","pathname","setState","artist","asPath","slice","getStaticPaths","context","prisma","artists","findMany","select","url","paths","map","fallback","getStaticProps","artistUrl","params","findUnique","id","name","pictureUrl","tracks","include","track","title","audioUrl","artUrl","where","artistNoTracks","x","forEach","stream"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAGA,SAASC,IAAT,CAAcC,KAAd,EAAoB;AACnB,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACAE,EAAAA,KAAK,CAACK,OAAN,CAAcD,MAAM,CAACE,QAArB;AACAN,EAAAA,KAAK,CAACO,QAAN,CAAe;AAAEC,IAAAA,MAAM,EAAEJ,MAAM,CAACK,MAAP,CAAcC,KAAd,CAAoB,CAApB;AAAV,GAAf,EAHmB,CAInB;;AAEA,sBAAO,QAAC,IAAD,kCAAUP,KAAV;AAAiB,IAAA,QAAQ,EAAEC,MAAM,CAACE;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;AAED,OAAO,eAAeK,cAAf,CAA8BC,OAA9B,EAAuC;AAC7C;AACA,MAAIC,MAAM,GAAG,IAAId,YAAJ,EAAb;AACA,QAAMe,OAAO,GAAG,MAAMD,MAAM,CAACL,MAAP,CAAcO,QAAd,CAAuB;AAC5CC,IAAAA,MAAM,EAAE;AACPC,MAAAA,GAAG,EAAE;AADE;AADoC,GAAvB,CAAtB;AAMA,SAAO;AACNC,IAAAA,KAAK,EAAEJ,OAAO,CAACK,GAAR,CAAYX,MAAM,IAAK,MAAMA,MAAM,CAACS,GAApC,CADD;AAENG,IAAAA,QAAQ,EAAE;AAFJ,GAAP;AAIA;AAED,OAAO,eAAeC,cAAf,CAA8BT,OAA9B,EAAsC;AAC5C,MAAIC,MAAM,GAAG,IAAId,YAAJ,EAAb;AACA,QAAM;AAAES,IAAAA,MAAM,EAAEc;AAAV,MAAwBV,OAAO,CAACW,MAAtC;AAEA,QAAMf,MAAM,GAAG,MAAMK,MAAM,CAACL,MAAP,CAAcgB,UAAd,CAAyB;AAC7CR,IAAAA,MAAM,EAAE;AACPS,MAAAA,EAAE,EAAE,IADG;AAEPC,MAAAA,IAAI,EAAE,IAFC;AAGPC,MAAAA,UAAU,EAAE,IAHL;AAIPC,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAE;AACRC,UAAAA,KAAK,EAAE;AACNd,YAAAA,MAAM,EAAE;AACPS,cAAAA,EAAE,EAAE,IADG;AAEPM,cAAAA,KAAK,EAAE,IAFA;AAGPC,cAAAA,QAAQ,EAAE,IAHH;AAIPC,cAAAA,MAAM,EAAE,IAJD;AAKPhB,cAAAA,GAAG,EAAE;AALE;AADF;AADC;AADL;AAJD,KADqC;AAmB7CiB,IAAAA,KAAK,EAAE;AACNjB,MAAAA,GAAG,EAAEK;AADC;AAnBsC,GAAzB,CAArB;AAuBA,QAAMa,cAAc,GAAG;AAAC3B,IAAAA,MAAM,EAAE;AAACiB,MAAAA,EAAE,EAAEjB,MAAM,CAACiB,EAAZ;AAAgBC,MAAAA,IAAI,EAAElB,MAAM,CAACkB,IAA7B;AAAmCC,MAAAA,UAAU,EAAEnB,MAAM,CAACmB;AAAtD;AAAT,GAAvB;AACA,QAAMC,MAAM,GAAGpB,MAAM,CAACoB,MAAP,CAAcT,GAAd,CAAkBiB,CAAC,IAAIA,CAAC,CAACN,KAAzB,CAAf;AACAF,EAAAA,MAAM,CAACS,OAAP,CAAeP,KAAK,IAAI;AACvBA,IAAAA,KAAK,CAAChB,OAAN,GAAgB,CAACqB,cAAD,CAAhB;AACA,GAFD;AAIA,SAAO;AAAEhC,IAAAA,KAAK,EAAE;AAAEK,MAAAA,MAAF;AAAU8B,MAAAA,MAAM,EAAEV;AAAlB;AAAT,GAAP;AACA;AAED,eAAe1B,IAAf","sourcesContent":["import React from \"react\"\nimport { GetStaticProps } from \"next\"\nimport { useRouter } from 'next/router'\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../../lib/atlas/atlas.js'\nimport Main from '../main.js'\n\n\nfunction Home(props){\n\tconst router = useRouter()\n\tAtlas.setPath(router.pathname)\n\tAtlas.setState({ artist: router.asPath.slice(1) })\n\t// console.log(router.pathname)\n\n\treturn <Main {...props} pathname={router.pathname}/>\n}\n\nexport async function getStaticPaths(context) {\n\t// TODO: Will this scale? Suspect...\n\tlet prisma = new PrismaClient();\n\tconst artists = await prisma.artist.findMany({\n\t\tselect: {\n\t\t\turl: true\n\t\t}\n\t})\n\n\treturn {\n\t\tpaths: artists.map(artist => ('/' + artist.url)),\n\t\tfallback: false\n\t}\n}\n\nexport async function getStaticProps(context){\n\tlet prisma = new PrismaClient();\n\tconst { artist: artistUrl } = context.params\n\n\tconst artist = await prisma.artist.findUnique({\n\t\tselect: {\n\t\t\tid: true,\n\t\t\tname: true,\n\t\t\tpictureUrl: true,\n\t\t\ttracks: {\n\t    \t\tinclude: {\n\t    \t\t\ttrack: {\n\t    \t\t\t\tselect: {\n\t    \t\t\t\t\tid: true,\n\t    \t\t\t\t\ttitle: true,\n\t    \t\t\t\t\taudioUrl: true,\n\t    \t\t\t\t\tartUrl: true,\n\t    \t\t\t\t\turl: true,\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \t}\n\t\t},\n\t\twhere: {\n\t\t\turl: artistUrl\n\t\t}\n\t})\n\tconst artistNoTracks = {artist: {id: artist.id, name: artist.name, pictureUrl: artist.pictureUrl}}\n\tconst tracks = artist.tracks.map(x => x.track)\n\ttracks.forEach(track => {\n\t\ttrack.artists = [artistNoTracks]\n\t})\n\n\treturn { props: { artist, stream: tracks }}\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}