{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Users/henrysteinitz/Desktop/soulstream/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/components/crowd.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from 'react';\nimport classnames from 'classnames';\nexport var testComments = [{\n  message: 'Yoooooooo',\n  author: 'Ab',\n  id: 1,\n  remainingTime: 3\n}, {\n  message: 'yeah ab I want to f**k you good. Abadelic style.',\n  author: 'Henry',\n  id: 2,\n  remainingTime: 4\n}]; // Ephemeral comments and social interactions\n\nvar Crowd = /*#__PURE__*/function (_Component) {\n  _inherits(Crowd, _Component);\n\n  var _super = _createSuper(Crowd);\n\n  function Crowd() {\n    var _this;\n\n    _classCallCheck(this, Crowd);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      // map comments ids to hidden = {true, false}\n      // TODO: nest...?\n      comment: '',\n      postedComments: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"computeRemainingTime\", function (comment) {\n      // TODO: figure it out, kiiid\n      return comment.remainingTime * (1000 * 60);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleComment\", function (e) {\n      _this.setState({\n        comment: e.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePostComment\", function (e) {\n      var _this$props = _this.props,\n          account = _this$props.account,\n          song = _this$props.song;\n      var comment = _this.state.comment;\n      fetch('/api/crowd/comment', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionToken: account.sessionToken,\n          comment: comment,\n          trackId: song.id,\n          authorId: account.id\n        })\n      }).then(function (res) {\n        console.log(res);\n        res.json().then(function (body) {\n          return _this.setState({\n            postedComments: [body.comment].concat(_this.state.postedComments)\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEnter\", function (fn) {\n      return function (e) {\n        if (e.key === 'Enter') {\n          fn(e);\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(Crowd, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.comments.forEach(function (comment) {\n        setTimeout(function () {\n          return _this2.setState(_defineProperty({}, comment.id, true));\n        }, _this2.computeRemainingTime(comment));\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          comments = _this$props2.comments,\n          show = _this$props2.show;\n      var comment = this.state.comment;\n      var combinedComments = this.state.postedComments.concat(comments);\n      console.log(combinedComments.filter(function (x) {\n        return !_this3.state[x.id];\n      }).length);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classnames('crowd', {\n          show: show\n        }),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crowd-inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crowd-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crowd-speak\",\n              children: show && /*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"crowd-input\",\n                placeholder: \"Talk\",\n                value: comment,\n                onChange: this.handleComment,\n                onKeyPress: this.handleEnter(this.handlePostComment),\n                autoFocus: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 8\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crowd-chat\",\n              children: combinedComments.filter(function (x) {\n                return !_this3.state[x.id];\n              }).map(function (comment) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: comment.message\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 10\n                  }, _this3), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: comment.author\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 10\n                  }, _this3)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 9\n                }, _this3);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 4\n      }, this);\n    }\n  }]);\n\n  return Crowd;\n}(Component);\n\nexport { Crowd as default };","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/components/crowd.js"],"names":["Component","classnames","testComments","message","author","id","remainingTime","Crowd","comment","postedComments","e","setState","target","value","props","account","song","state","fetch","method","headers","body","JSON","stringify","sessionToken","trackId","authorId","then","res","console","log","json","concat","fn","key","comments","forEach","setTimeout","computeRemainingTime","show","combinedComments","filter","x","length","handleComment","handleEnter","handlePostComment","map"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport classnames from 'classnames'\n\n\nexport const testComments = [\n\t{\n\t\tmessage: 'Yoooooooo',\n\t\tauthor: 'Ab',\n\t\tid: 1,\n\t\tremainingTime: 3\n\t},\n\t{\n\t\tmessage: 'yeah ab I want to f**k you good. Abadelic style.',\n\t\tauthor: 'Henry',\n\t\tid: 2,\n\t\tremainingTime: 4 \n\t}\n]\n\n// Ephemeral comments and social interactions\nexport default class Crowd extends Component {\n\t\n\tstate = {\n\t\t// map comments ids to hidden = {true, false}\n\t\t// TODO: nest...?\n\t\tcomment: '',\n\t\tpostedComments: []\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.comments.forEach(comment => {\n\t\t\tsetTimeout(() => this.setState({[comment.id]: true}), this.computeRemainingTime(comment))\n\t\t})\n\t}\n\n\tcomputeRemainingTime = (comment) => {\n\t\t// TODO: figure it out, kiiid\n\t\treturn comment.remainingTime * (1000 * 60)\n\t}\n\n\thandleComment = (e) => {\n\t\tthis.setState({ comment: e.target.value })\n\t}\n\n\thandlePostComment = (e) => {\n\t\tconst { account, song } = this.props\n\t\tconst { comment } = this.state\n\n\t\tfetch('/api/crowd/comment', \n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tsessionToken: account.sessionToken,\n\t\t\t\tcomment,\n\t\t\t\ttrackId: song.id,\n\t\t\t\tauthorId: account.id\n\n\n\t\t\t})\n\t\t}).then((res) => {\n\t\t\tconsole.log(res)\n\t\t\tres.json().then(body => this.setState({ postedComments: [body.comment].concat(this.state.postedComments)}))\n\t\t})\n\t}\n\n\thandleEnter = (fn) => (e) => {\n\t\tif (e.key === 'Enter') {\n\t\t\tfn(e)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { comments, show } = this.props\n\t\tconst { comment } = this.state\n\t\tconst combinedComments = this.state.postedComments.concat(comments)\n\t\tconsole.log(combinedComments.filter(x => !this.state[x.id]).length)\n\t\treturn (\n\t\t\t<div className={classnames('crowd', { show })}>\n\t\t\t\t<div className=\"crowd-inner\">\n\t\t\t\t\t<div className=\"crowd-left\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"crowd-right\">\n\t\t\t\t\t\t<div className=\"crowd-speak\">\n\t\t\t\t\t\t\t{show &&\n\t\t\t\t\t\t\t<input className=\"crowd-input\" \n\t\t\t\t\t\t\t\tplaceholder=\"Talk\" \n\t\t\t\t\t\t\t\tvalue={comment} \n\t\t\t\t\t\t\t\tonChange={this.handleComment}\n\t\t\t\t\t\t\t\tonKeyPress={this.handleEnter(this.handlePostComment)}\n\t\t\t\t\t\t\t\tautoFocus />}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"crowd-chat\">\n\t\t\t\t\t\t\t{combinedComments.filter(x => !this.state[x.id]).map(comment => (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{comment.message}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{comment.author}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\t\n\t\t)\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}