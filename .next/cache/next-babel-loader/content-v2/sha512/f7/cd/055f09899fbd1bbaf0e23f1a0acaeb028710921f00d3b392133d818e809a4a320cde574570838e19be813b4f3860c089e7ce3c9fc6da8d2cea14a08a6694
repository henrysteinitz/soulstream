{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/henrysteinitz/Desktop/soulstream/pages/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { GetStaticProps } from \"next\";\nimport { useRouter } from 'next/router';\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../lib/atlas/atlas.js';\nimport Main from './main.js';\n\nconst mapTracksById = tracks => {\n  let result = {};\n  tracks.forEach(track => {\n    result[track.id] = track;\n    console.log(\"Map tracks by id .verses\");\n    console.log(result[track.id].verses);\n    result[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]);\n  });\n  return result;\n};\n\nfunction Home(props) {\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(Main, _objectSpread(_objectSpread({}, props), {}, {\n    pathname: router.pathname\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticProps(context) {\n  let prisma = new PrismaClient();\n  const stream = await prisma.track.findMany({\n    select: {\n      id: true,\n      title: true,\n      audioUrl: true,\n      artUrl: true,\n      url: true,\n      artists: {\n        include: {\n          artist: {\n            select: {\n              name: true\n            }\n          }\n        }\n      },\n      albums: {\n        include: {\n          album: {\n            select: {\n              title: true\n            }\n          }\n        }\n      },\n      verses: {\n        select: {\n          body: true,\n          startTime: true,\n          endTime: true\n        },\n        orderBy: [{\n          startTime: 'asc'\n        }, {\n          endTime: 'asc'\n        }]\n      }\n    }\n  });\n  const tracksById = mapTracksById(stream);\n  return {\n    props: {\n      stream\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["/Users/henrysteinitz/Desktop/soulstream/pages/index.js"],"names":["React","GetStaticProps","useRouter","PrismaClient","Atlas","Main","mapTracksById","tracks","result","forEach","track","id","console","log","verses","VerseMap","Home","props","router","pathname","getStaticProps","context","prisma","stream","findMany","select","title","audioUrl","artUrl","url","artists","include","artist","name","albums","album","body","startTime","endTime","orderBy","tracksById"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,MAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,aAAa,GAAIC,MAAD,IAAY;AACjC,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAW;AACzBF,IAAAA,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,GAAmBD,KAAnB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAA7B;AACAN,IAAAA,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAAjB,GAA0BN,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAAjB,GAA0B,IAAIC,QAAJ,CAAaP,MAAM,CAACE,KAAK,CAACC,EAAP,CAAN,CAAiBG,MAA9B,CAA1B,GAAkE,IAAIC,QAAJ,CAAa,EAAb,CAA5F;AACA,GALD;AAMA,SAAOP,MAAP;AACA,CATD;;AAWA,SAASQ,IAAT,CAAcC,KAAd,EAAoB;AACnB,QAAMC,MAAM,GAAGhB,SAAS,EAAxB;AACA,sBAAO,QAAC,IAAD,kCAAUe,KAAV;AAAiB,IAAA,QAAQ,EAAEC,MAAM,CAACC;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAP;AACA;;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAsC;AAC5C,MAAIC,MAAM,GAAG,IAAInB,YAAJ,EAAb;AACA,QAAMoB,MAAM,GAAG,MAAMD,MAAM,CAACZ,KAAP,CAAac,QAAb,CAAsB;AAC1CC,IAAAA,MAAM,EAAE;AACPd,MAAAA,EAAE,EAAE,IADG;AAEJe,MAAAA,KAAK,EAAE,IAFH;AAGJC,MAAAA,QAAQ,EAAE,IAHN;AAIJC,MAAAA,MAAM,EAAE,IAJJ;AAKJC,MAAAA,GAAG,EAAE,IALD;AAMJC,MAAAA,OAAO,EAAE;AACRC,QAAAA,OAAO,EAAE;AACRC,UAAAA,MAAM,EAAE;AACPP,YAAAA,MAAM,EAAE;AACPQ,cAAAA,IAAI,EAAE;AADC;AADD;AADA;AADD,OANL;AAeJC,MAAAA,MAAM,EAAE;AACPH,QAAAA,OAAO,EAAE;AACRI,UAAAA,KAAK,EAAE;AACNV,YAAAA,MAAM,EAAE;AACPC,cAAAA,KAAK,EAAE;AADA;AADF;AADC;AADF,OAfJ;AAwBJZ,MAAAA,MAAM,EAAE;AACPW,QAAAA,MAAM,EAAE;AACPW,UAAAA,IAAI,EAAE,IADC;AAEPC,UAAAA,SAAS,EAAE,IAFJ;AAGPC,UAAAA,OAAO,EAAE;AAHF,SADD;AAMPC,QAAAA,OAAO,EAAE,CACR;AAACF,UAAAA,SAAS,EAAE;AAAZ,SADQ,EAER;AAACC,UAAAA,OAAO,EAAE;AAAV,SAFQ;AANF;AAxBJ;AADkC,GAAtB,CAArB;AAsCA,QAAME,UAAU,GAAGlC,aAAa,CAACiB,MAAD,CAAhC;AAEA,SAAO;AAAEN,IAAAA,KAAK,EAAE;AAAEM,MAAAA;AAAF;AAAT,GAAP;AACA;AAED,eAAeP,IAAf","sourcesContent":["import React from \"react\"\nimport { GetStaticProps } from \"next\"\nimport { useRouter } from 'next/router'\nimport { PrismaClient } from '@prisma/client';\nimport Atlas from '../lib/atlas/atlas.js'\nimport Main from './main.js'\n\nconst mapTracksById = (tracks) => {\n\tlet result = {}\n\ttracks.forEach((track) => {\n\t\tresult[track.id] = track\n\t\tconsole.log(\"Map tracks by id .verses\")\n\t\tconsole.log(result[track.id].verses)\n\t\tresult[track.id].verses = result[track.id].verses ? new VerseMap(result[track.id].verses) : new VerseMap([]) \n\t})\n\treturn result\n}\n\nfunction Home(props){\n\tconst router = useRouter()\n\treturn <Main {...props} pathname={router.pathname}/>\n}\n\nexport async function getStaticProps(context){\n\tlet prisma = new PrismaClient();\n\tconst stream = await prisma.track.findMany({\n\t\tselect: {\n\t\t\tid: true,\n\t    \ttitle: true,\n\t    \taudioUrl: true,\n\t    \tartUrl: true,\n\t    \turl: true,\n\t    \tartists: {\n\t    \t\tinclude: {\n\t    \t\t\tartist: {\n\t    \t\t\t\tselect: {\n\t    \t\t\t\t\tname: true\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \t},\n\t    \talbums: {\n\t    \t\tinclude: {\n\t    \t\t\talbum: {\n\t    \t\t\t\tselect: {\n\t    \t\t\t\t\ttitle: true\n\t    \t\t\t\t}\n\t    \t\t\t}\n\t    \t\t}\n\t    \t},\n\t    \tverses: {\n\t    \t\tselect: {\n\t    \t\t\tbody: true,\n\t    \t\t\tstartTime: true,\n\t    \t\t\tendTime: true\n\t    \t\t},\n\t    \t\torderBy: [\n    \t\t\t\t{startTime: 'asc'},\n    \t\t\t\t{endTime: 'asc'}\n    \t\t\t]\n\t    \t}\n\t}})\n\n\tconst tracksById = mapTracksById(stream)\n\n\treturn { props: { stream } }\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}